[project]
name = "epochalyst"
version = "0.3.6"
authors = [
    { name = "Jasper van Selm", email = "jmvanselm@gmail.com" },
    { name = "Ariel Ebersberger", email = "arielebersberger@gmail.com" },
    { name = "Tolga Kopar", email = "cahittolgakopar@gmail.com" },
    { name = "Jeffrey Lim", email = "jeffrey-lim@outlook.com" },
    { name = "Hugo de Heer", email = "hugodeheer1234@gmail.com"},
]
description = "This package contains the code for team Epoch's pipeline"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies= [
    # Machine Learning Libraries
    "numpy>=1.22.4",

    # Parallel Processing Libraries
    # "dask>=2023.12.0",

    # Data Processing Libraries
    # "pandas>=1.3.0",
    # "polars",

    # Parquet
    # "pyarrow>=6.0.0",

    # PyTorch
    "torch>=2.1.0",

    # Agogos
    "agogos==0.4",
]

[tool.mypy]
exclude = ["external/", "venv/", ".cache"]
allow_untyped_calls = true
disable_error_code = ["import-untyped"]

[tool.ruff]
extend-exclude = ["external/*"]
line-length = 175
fix = true
show-fixes = true
select = [
    "ALL",  # Every check supported by Ruff
]
ignore = [
    # pydocstyle (D)
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
     # eradicate (ERA)
    "ERA001",  # Found commented-out code
    # Pylint (PL)
    "PLR0913", # Too many arguments for function
    "PLR2004",  # Magic value used in comparison, consider replacing with a constant variable
    # flake8-annotations (ANN)
    "ANN101",  # Missing type annotation for self in method
    # flake8-errmsg (EM)
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    # flake8-future-annotations (FA)
    "FA",  # Missing from __future__ import annotations
    # flake8-fixme (FIX)
    "FIX001",  # Line contains FIXME
    "FIX002",  # Line contains TODO
    "FIX003",  # Line contains XXX
    "FIX004",  # Line contains HACK
    # pep8-naming (N)
    "N803",  # Argument name should be lowercase. Variable name "X" is very common in machine learning.
    "N806",  # Variable in function should be lowercase. Variable name "X" is very common in machine learning.
    # flake8-use-pathlib (PTH)
    "PTH",  # Use pathlib instead of os.path. Dask does not seem to like pathlib.
    # flake8-quotes (Q)
    "Q000",  # Single quotes found but double quotes preferred
    # flake8-simplify (SIM)
    "SIM108",  # Use ternary operator instead of `if`-`else`-block
    # flake8-type-checking (TCH)
    "TCH001",  # Move application import into a type-checking block. Breaks Sphinx autodoc (https://github.com/sphinx-doc/sphinx/issues/11225).
    "TCH002",  # Move third-party import into a type-checking block. Breaks Sphinx autodoc (https://github.com/sphinx-doc/sphinx/issues/11225).
    "TCH003",  # Move standard library import into a type-checking block. Breaks Sphinx autodoc (https://github.com/sphinx-doc/sphinx/issues/11225).
    # flake8-todos (TD)
    "TD003",  # Missing issue link on the line following this TODO
    # tryceratops (TRY)
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.isort]
known-third-party = ["wandb"]


[tool.ruff.format]
docstring-code-format = true

# allow unsused **kwargs of type Any
[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true
