import os
from typing import Dict, Union

import click
from outpostkit._types.endpoint import EndpointAutogeneratedTemplateConfigDetails
from outpostkit.exceptions import OutpostError, OutpostHTTPException
from rich.console import Console

from .config_utils import (
    get_default_api_token_from_config,
    get_default_entity_from_config,
)

console = Console(highlight=False)


def click_group(*args, **kwargs):
    class ClickAliasedGroup(click.Group):
        def get_command(self, ctx, cmd_name):
            rv = click.Group.get_command(self, ctx, cmd_name)
            if rv is not None:
                return rv

            def is_abbrev(x, y):
                # first char must match
                if x[0] != y[0]:
                    return False
                it = iter(y)
                return all(any(c == ch for c in it) for ch in x)

            matches = [x for x in self.list_commands(ctx) if is_abbrev(cmd_name, x)]

            if not matches:
                return None
            elif len(matches) == 1:
                return click.Group.get_command(self, ctx, matches[0])
            ctx.fail(f"'{cmd_name}' is ambiguous: {', '.join(sorted(matches))}")

        def resolve_command(self, ctx, args):
            # always return the full command name
            _, cmd, args = super().resolve_command(ctx, args)
            return cmd.name, cmd, args

    return click.group(*args, cls=ClickAliasedGroup, **kwargs)


def check_token(token: str):
    from outpostkit import Client

    client = Client(api_token=token)
    try:
        user = client.user
        return 1, user
    except OutpostHTTPException as e:
        click.echo(
            f"Error while validating token: {e.status_code} - {e.message}", err=True
        )
        return -1, None
    except OutpostError as e:
        click.echo(f"Error while validating token: {str(e)}", err=True)
        return -1, None
    except Exception as e:
        click.echo(e, err=True)
        return -1, None


def condense_endpt_autogen_configs(
    autogen_configs: EndpointAutogeneratedTemplateConfigDetails,
):
    load_source = autogen_configs.modelSource
    revision = (
        f"@{autogen_configs.revision}" if autogen_configs.revision is not None else ""
    )
    if load_source == "huggingface":
        gen_str: str = "hf:"
        hf_model = autogen_configs.huggingfaceModel
        if hf_model:
            gen_str = gen_str + hf_model.id
        else:
            gen_str = gen_str + "<unknown>"
        return f"{gen_str}{revision}"

    if load_source == "outpost":
        gen_str: str = ""
        op_model = autogen_configs.outpostModel
        if hf_model:
            gen_str = op_model
        else:
            gen_str = "<unknown>"
        return f"{gen_str}:{revision}"
    else:
        return "cannot-parse-model"


def add_options(options):
    def _add_options(func):
        for option in reversed(options):
            func = option(func)
        return func

    return _add_options


api_token_opt = click.option(
    "--api-token", default=lambda: get_default_api_token_from_config()
)
entity_opt = click.option(
    "--entity", "-e", default=lambda: get_default_entity_from_config()
)

output_style_opt = click.option(
    "--output-style",
    "--output-style",
    type=str,
    help="formatting of the output.",
    default=lambda: os.getenv("OUTPUT_STYLE"),
)


log_level_style_info: Dict[str, Dict[str, Union[str, bool]]] = {
    "DEBUG": {"fg": "grey", "bold": False},
    "INFO": {"fg": "bright_white", "bold": False},
    "WARNING": {"fg": "bright_yellow", "bold": False},
    "ERROR": {"fg": "bright_red", "bold": True},
    "CRITICAL": {
        "fg": "bright_red",
        "bold": True,
    },
}


def get_log_level_style_info(level: str):
    return log_level_style_info[level]
