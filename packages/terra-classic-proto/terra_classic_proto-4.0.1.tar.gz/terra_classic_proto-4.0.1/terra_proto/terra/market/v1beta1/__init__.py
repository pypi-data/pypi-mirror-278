# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/market/v1beta1/genesis.proto, terra/market/v1beta1/market.proto, terra/market/v1beta1/query.proto, terra/market/v1beta1/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgSwap(betterproto.Message):
    """MsgSwap represents a message to swap coin to another denom."""

    trader: str = betterproto.string_field(1)
    offer_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    ask_denom: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgSwapResponse(betterproto.Message):
    """MsgSwapResponse defines the Msg/Swap response type."""

    swap_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    swap_fee: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgSwapSend(betterproto.Message):
    """
    MsgSwapSend represents a message to swap coin and send all result coin to
    recipient
    """

    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    offer_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    ask_denom: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgSwapSendResponse(betterproto.Message):
    """MsgSwapSendResponse defines the Msg/SwapSend response type."""

    swap_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    swap_fee: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the market module."""

    base_pool: bytes = betterproto.bytes_field(1)
    pool_recovery_period: int = betterproto.uint64_field(2)
    min_stability_spread: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class QuerySwapRequest(betterproto.Message):
    """QuerySwapRequest is the request type for the Query/Swap RPC method."""

    offer_coin: str = betterproto.string_field(1)
    """offer_coin defines the coin being offered (i.e. 1000000uluna)"""

    ask_denom: str = betterproto.string_field(2)
    """ask_denom defines the denom of the coin to swap to"""


@dataclass(eq=False, repr=False)
class QuerySwapResponse(betterproto.Message):
    """
    QuerySwapResponse is the response type for the Query/Swap RPC method.
    """

    return_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    """
    return_coin defines the coin returned as a result of the swap simulation.
    """


@dataclass(eq=False, repr=False)
class QueryTerraPoolDeltaRequest(betterproto.Message):
    """
    QueryTerraPoolDeltaRequest is the request type for the Query/TerraPoolDelta
    RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryTerraPoolDeltaResponse(betterproto.Message):
    """
    QueryTerraPoolDeltaResponse is the response type for the
    Query/TerraPoolDelta RPC method.
    """

    terra_pool_delta: bytes = betterproto.bytes_field(1)
    """
    terra_pool_delta defines the gap between the TerraPool and the
    TerraBasePool
    """


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the market module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the paramaters of the module."""

    terra_pool_delta: bytes = betterproto.bytes_field(2)
    """the gap between the TerraPool and the BasePool"""


class MsgStub(betterproto.ServiceStub):
    async def swap(
        self,
        msg_swap: "MsgSwap",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSwapResponse":
        return await self._unary_unary(
            "/terra.market.v1beta1.Msg/Swap",
            msg_swap,
            MsgSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def swap_send(
        self,
        msg_swap_send: "MsgSwapSend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSwapSendResponse":
        return await self._unary_unary(
            "/terra.market.v1beta1.Msg/SwapSend",
            msg_swap_send,
            MsgSwapSendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def swap(
        self,
        query_swap_request: "QuerySwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySwapResponse":
        return await self._unary_unary(
            "/terra.market.v1beta1.Query/Swap",
            query_swap_request,
            QuerySwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def terra_pool_delta(
        self,
        query_terra_pool_delta_request: "QueryTerraPoolDeltaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTerraPoolDeltaResponse":
        return await self._unary_unary(
            "/terra.market.v1beta1.Query/TerraPoolDelta",
            query_terra_pool_delta_request,
            QueryTerraPoolDeltaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/terra.market.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def swap(self, msg_swap: "MsgSwap") -> "MsgSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def swap_send(self, msg_swap_send: "MsgSwapSend") -> "MsgSwapSendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_swap(
        self, stream: "grpclib.server.Stream[MsgSwap, MsgSwapResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.swap(request)
        await stream.send_message(response)

    async def __rpc_swap_send(
        self, stream: "grpclib.server.Stream[MsgSwapSend, MsgSwapSendResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.swap_send(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/terra.market.v1beta1.Msg/Swap": grpclib.const.Handler(
                self.__rpc_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSwap,
                MsgSwapResponse,
            ),
            "/terra.market.v1beta1.Msg/SwapSend": grpclib.const.Handler(
                self.__rpc_swap_send,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSwapSend,
                MsgSwapSendResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def swap(self, query_swap_request: "QuerySwapRequest") -> "QuerySwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def terra_pool_delta(
        self, query_terra_pool_delta_request: "QueryTerraPoolDeltaRequest"
    ) -> "QueryTerraPoolDeltaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_swap(
        self, stream: "grpclib.server.Stream[QuerySwapRequest, QuerySwapResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.swap(request)
        await stream.send_message(response)

    async def __rpc_terra_pool_delta(
        self,
        stream: "grpclib.server.Stream[QueryTerraPoolDeltaRequest, QueryTerraPoolDeltaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.terra_pool_delta(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/terra.market.v1beta1.Query/Swap": grpclib.const.Handler(
                self.__rpc_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySwapRequest,
                QuerySwapResponse,
            ),
            "/terra.market.v1beta1.Query/TerraPoolDelta": grpclib.const.Handler(
                self.__rpc_terra_pool_delta,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTerraPoolDeltaRequest,
                QueryTerraPoolDeltaResponse,
            ),
            "/terra.market.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
        }
