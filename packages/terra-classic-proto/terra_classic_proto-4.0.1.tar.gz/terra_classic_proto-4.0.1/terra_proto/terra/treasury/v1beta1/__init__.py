# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/treasury/v1beta1/genesis.proto, terra/treasury/v1beta1/gov.proto, terra/treasury/v1beta1/query.proto, terra/treasury/v1beta1/treasury.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class AddBurnTaxExemptionAddressProposal(betterproto.Message):
    """proposal request structure for adding burn tax exemption address(es)"""

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    addresses: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RemoveBurnTaxExemptionAddressProposal(betterproto.Message):
    """
    proposal request structure for removing burn tax exemption address(es)
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    addresses: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the oracle module."""

    tax_policy: "PolicyConstraints" = betterproto.message_field(1)
    reward_policy: "PolicyConstraints" = betterproto.message_field(2)
    seigniorage_burden_target: str = betterproto.string_field(3)
    mining_increment: str = betterproto.string_field(4)
    window_short: int = betterproto.uint64_field(5)
    window_long: int = betterproto.uint64_field(6)
    window_probation: int = betterproto.uint64_field(7)
    burn_tax_split: str = betterproto.string_field(8)
    min_initial_deposit_ratio: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class PolicyConstraints(betterproto.Message):
    """
    PolicyConstraints - defines policy constraints can be applied in tax &
    reward policies
    """

    rate_min: str = betterproto.string_field(1)
    rate_max: str = betterproto.string_field(2)
    cap: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    change_rate_max: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class EpochTaxProceeds(betterproto.Message):
    """
    EpochTaxProceeds represents the tax amount collected at the current epoch
    """

    tax_proceeds: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EpochInitialIssuance(betterproto.Message):
    """
    EpochInitialIssuance represents initial issuance of the currrent epoch
    """

    issuance: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryTaxRateRequest(betterproto.Message):
    """
    QueryTaxRateRequest is the request type for the Query/TaxRate RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryTaxRateResponse(betterproto.Message):
    """
    QueryTaxRateResponse is response type for the Query/TaxRate RPC method.
    """

    tax_rate: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTaxCapRequest(betterproto.Message):
    """
    QueryTaxCapRequest is the request type for the Query/TaxCap RPC method.
    """

    denom: str = betterproto.string_field(1)
    """denom defines the denomination to query for."""


@dataclass(eq=False, repr=False)
class QueryTaxCapResponse(betterproto.Message):
    """
    QueryTaxCapResponse is response type for the Query/TaxCap RPC method.
    """

    tax_cap: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTaxCapsRequest(betterproto.Message):
    """
    QueryTaxCapsRequest is the request type for the Query/TaxCaps RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryTaxCapsResponseItem(betterproto.Message):
    """
    QueryTaxCapsResponseItem is response item type for the Query/TaxCaps RPC
    method.
    """

    denom: str = betterproto.string_field(1)
    tax_cap: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryTaxCapsResponse(betterproto.Message):
    """
    QueryTaxCapsResponse is response type for the Query/TaxCaps RPC method.
    """

    tax_caps: List["QueryTaxCapsResponseItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRewardWeightRequest(betterproto.Message):
    """
    QueryRewardWeightRequest is the request type for the Query/RewardWeight RPC
    method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryRewardWeightResponse(betterproto.Message):
    """
    QueryRewardWeightResponse is response type for the Query/RewardWeight RPC
    method.
    """

    reward_weight: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTaxProceedsRequest(betterproto.Message):
    """
    QueryTaxProceedsRequest is the request type for the Query/TaxProceeds RPC
    method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryTaxProceedsResponse(betterproto.Message):
    """
    QueryTaxProceedsResponse is response type for the Query/TaxProceeds RPC
    method.
    """

    tax_proceeds: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuerySeigniorageProceedsRequest(betterproto.Message):
    """
    QuerySeigniorageProceedsRequest is the request type for the
    Query/SeigniorageProceeds RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QuerySeigniorageProceedsResponse(betterproto.Message):
    """
    QuerySeigniorageProceedsResponse is response type for the
    Query/SeigniorageProceeds RPC method.
    """

    seigniorage_proceeds: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryIndicatorsRequest(betterproto.Message):
    """
    QueryIndicatorsRequest is the request type for the Query/Indicators RPC
    method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryIndicatorsResponse(betterproto.Message):
    """
    QueryIndicatorsResponse is response type for the Query/Indicators RPC
    method.
    """

    trl_year: str = betterproto.string_field(1)
    trl_month: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryBurnTaxExemptionListRequest(betterproto.Message):
    """
    QueryBurnTaxExemptionListRequest is the request type for the
    Query/BurnTaxExemptionList RPC method.
    """

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryBurnTaxExemptionListResponse(betterproto.Message):
    """
    QueryBurnTaxExemptionListResponse is response type for the
    Query/BurnTaxExemptionList RPC method.
    """

    addresses: List[str] = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    tax_rate: str = betterproto.string_field(2)
    reward_weight: str = betterproto.string_field(3)
    tax_caps: List["TaxCap"] = betterproto.message_field(4)
    tax_proceeds: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(5)
    epoch_initial_issuance: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(6)
    epoch_states: List["EpochState"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class TaxCap(betterproto.Message):
    """TaxCap is the max tax amount can be charged for the given denom"""

    denom: str = betterproto.string_field(1)
    tax_cap: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EpochState(betterproto.Message):
    """EpochState is the record for each epoch state"""

    epoch: int = betterproto.uint64_field(1)
    tax_reward: str = betterproto.string_field(2)
    seigniorage_reward: str = betterproto.string_field(3)
    total_staked_luna: str = betterproto.string_field(4)


class QueryStub(betterproto.ServiceStub):
    async def tax_rate(
        self,
        query_tax_rate_request: "QueryTaxRateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTaxRateResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxRate",
            query_tax_rate_request,
            QueryTaxRateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tax_cap(
        self,
        query_tax_cap_request: "QueryTaxCapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTaxCapResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxCap",
            query_tax_cap_request,
            QueryTaxCapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tax_caps(
        self,
        query_tax_caps_request: "QueryTaxCapsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTaxCapsResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxCaps",
            query_tax_caps_request,
            QueryTaxCapsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reward_weight(
        self,
        query_reward_weight_request: "QueryRewardWeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRewardWeightResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/RewardWeight",
            query_reward_weight_request,
            QueryRewardWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def seigniorage_proceeds(
        self,
        query_seigniorage_proceeds_request: "QuerySeigniorageProceedsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySeigniorageProceedsResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/SeigniorageProceeds",
            query_seigniorage_proceeds_request,
            QuerySeigniorageProceedsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tax_proceeds(
        self,
        query_tax_proceeds_request: "QueryTaxProceedsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTaxProceedsResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxProceeds",
            query_tax_proceeds_request,
            QueryTaxProceedsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def indicators(
        self,
        query_indicators_request: "QueryIndicatorsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIndicatorsResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/Indicators",
            query_indicators_request,
            QueryIndicatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def burn_tax_exemption_list(
        self,
        query_burn_tax_exemption_list_request: "QueryBurnTaxExemptionListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryBurnTaxExemptionListResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/BurnTaxExemptionList",
            query_burn_tax_exemption_list_request,
            QueryBurnTaxExemptionListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def tax_rate(
        self, query_tax_rate_request: "QueryTaxRateRequest"
    ) -> "QueryTaxRateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tax_cap(
        self, query_tax_cap_request: "QueryTaxCapRequest"
    ) -> "QueryTaxCapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tax_caps(
        self, query_tax_caps_request: "QueryTaxCapsRequest"
    ) -> "QueryTaxCapsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reward_weight(
        self, query_reward_weight_request: "QueryRewardWeightRequest"
    ) -> "QueryRewardWeightResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def seigniorage_proceeds(
        self, query_seigniorage_proceeds_request: "QuerySeigniorageProceedsRequest"
    ) -> "QuerySeigniorageProceedsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tax_proceeds(
        self, query_tax_proceeds_request: "QueryTaxProceedsRequest"
    ) -> "QueryTaxProceedsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def indicators(
        self, query_indicators_request: "QueryIndicatorsRequest"
    ) -> "QueryIndicatorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def burn_tax_exemption_list(
        self, query_burn_tax_exemption_list_request: "QueryBurnTaxExemptionListRequest"
    ) -> "QueryBurnTaxExemptionListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_tax_rate(
        self, stream: "grpclib.server.Stream[QueryTaxRateRequest, QueryTaxRateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.tax_rate(request)
        await stream.send_message(response)

    async def __rpc_tax_cap(
        self, stream: "grpclib.server.Stream[QueryTaxCapRequest, QueryTaxCapResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.tax_cap(request)
        await stream.send_message(response)

    async def __rpc_tax_caps(
        self, stream: "grpclib.server.Stream[QueryTaxCapsRequest, QueryTaxCapsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.tax_caps(request)
        await stream.send_message(response)

    async def __rpc_reward_weight(
        self,
        stream: "grpclib.server.Stream[QueryRewardWeightRequest, QueryRewardWeightResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.reward_weight(request)
        await stream.send_message(response)

    async def __rpc_seigniorage_proceeds(
        self,
        stream: "grpclib.server.Stream[QuerySeigniorageProceedsRequest, QuerySeigniorageProceedsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.seigniorage_proceeds(request)
        await stream.send_message(response)

    async def __rpc_tax_proceeds(
        self,
        stream: "grpclib.server.Stream[QueryTaxProceedsRequest, QueryTaxProceedsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.tax_proceeds(request)
        await stream.send_message(response)

    async def __rpc_indicators(
        self,
        stream: "grpclib.server.Stream[QueryIndicatorsRequest, QueryIndicatorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.indicators(request)
        await stream.send_message(response)

    async def __rpc_burn_tax_exemption_list(
        self,
        stream: "grpclib.server.Stream[QueryBurnTaxExemptionListRequest, QueryBurnTaxExemptionListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.burn_tax_exemption_list(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/terra.treasury.v1beta1.Query/TaxRate": grpclib.const.Handler(
                self.__rpc_tax_rate,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTaxRateRequest,
                QueryTaxRateResponse,
            ),
            "/terra.treasury.v1beta1.Query/TaxCap": grpclib.const.Handler(
                self.__rpc_tax_cap,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTaxCapRequest,
                QueryTaxCapResponse,
            ),
            "/terra.treasury.v1beta1.Query/TaxCaps": grpclib.const.Handler(
                self.__rpc_tax_caps,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTaxCapsRequest,
                QueryTaxCapsResponse,
            ),
            "/terra.treasury.v1beta1.Query/RewardWeight": grpclib.const.Handler(
                self.__rpc_reward_weight,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRewardWeightRequest,
                QueryRewardWeightResponse,
            ),
            "/terra.treasury.v1beta1.Query/SeigniorageProceeds": grpclib.const.Handler(
                self.__rpc_seigniorage_proceeds,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySeigniorageProceedsRequest,
                QuerySeigniorageProceedsResponse,
            ),
            "/terra.treasury.v1beta1.Query/TaxProceeds": grpclib.const.Handler(
                self.__rpc_tax_proceeds,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTaxProceedsRequest,
                QueryTaxProceedsResponse,
            ),
            "/terra.treasury.v1beta1.Query/Indicators": grpclib.const.Handler(
                self.__rpc_indicators,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIndicatorsRequest,
                QueryIndicatorsResponse,
            ),
            "/terra.treasury.v1beta1.Query/BurnTaxExemptionList": grpclib.const.Handler(
                self.__rpc_burn_tax_exemption_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBurnTaxExemptionListRequest,
                QueryBurnTaxExemptionListResponse,
            ),
            "/terra.treasury.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
        }
