# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/dyncomm/v1beta1/dyncomm.proto, terra/dyncomm/v1beta1/genesis.proto, terra/dyncomm/v1beta1/query.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the dyncomm module."""

    max_zero: str = betterproto.string_field(1)
    slope_base: str = betterproto.string_field(2)
    slope_vp_impact: str = betterproto.string_field(3)
    cap: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryRateRequest(betterproto.Message):
    """QueryRateRequest is the request type for the Query/Rate RPC method."""

    validator_addr: str = betterproto.string_field(1)
    """validator_addr defines the validator address to query for."""


@dataclass(eq=False, repr=False)
class QueryRateResponse(betterproto.Message):
    """
    QueryRateResponse is the response type for the Query/Rate RPC method.
    """

    rate: str = betterproto.string_field(1)
    target: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the dyncomm module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the paramaters of the module."""

    validator_commission_rates: List[
        "ValidatorCommissionRate"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ValidatorCommissionRate(betterproto.Message):
    """
    MinDynCommission defines a validator - min commission rate pair to be
    enforced by the blockchain
    """

    validator_address: str = betterproto.string_field(1)
    min_commission_rate: str = betterproto.string_field(2)
    target_commission_rate: str = betterproto.string_field(3)


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/terra.dyncomm.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate(
        self,
        query_rate_request: "QueryRateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRateResponse":
        return await self._unary_unary(
            "/terra.dyncomm.v1beta1.Query/Rate",
            query_rate_request,
            QueryRateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate(self, query_rate_request: "QueryRateRequest") -> "QueryRateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_rate(
        self, stream: "grpclib.server.Stream[QueryRateRequest, QueryRateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/terra.dyncomm.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/terra.dyncomm.v1beta1.Query/Rate": grpclib.const.Handler(
                self.__rpc_rate,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRateRequest,
                QueryRateResponse,
            ),
        }
