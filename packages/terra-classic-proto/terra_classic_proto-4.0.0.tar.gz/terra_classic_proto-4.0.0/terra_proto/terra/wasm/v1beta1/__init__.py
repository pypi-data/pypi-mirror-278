# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/wasm/v1beta1/genesis.proto, terra/wasm/v1beta1/tx.proto, terra/wasm/v1beta1/wasm.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgStoreCode(betterproto.Message):
    """MsgStoreCode represents a message to submit Wasm code to the system"""

    sender: str = betterproto.string_field(1)
    """Sender is the that actor that signed the messages"""

    wasm_byte_code: bytes = betterproto.bytes_field(2)
    """WASMByteCode can be raw or gzip compressed"""


@dataclass(eq=False, repr=False)
class MsgStoreCodeResponse(betterproto.Message):
    """MsgStoreCodeResponse defines the Msg/StoreCode response type."""

    code_id: int = betterproto.uint64_field(1)
    """CodeID is the reference to the stored WASM code"""


@dataclass(eq=False, repr=False)
class MsgMigrateCode(betterproto.Message):
    """
    MsgMigrateCode represents a message to submit Wasm code to the system
    """

    code_id: int = betterproto.uint64_field(1)
    """CodeID is the migration target code id"""

    sender: str = betterproto.string_field(2)
    """Sender is the that actor that signed the messages"""

    wasm_byte_code: bytes = betterproto.bytes_field(3)
    """WASMByteCode can be raw or gzip compressed"""


@dataclass(eq=False, repr=False)
class MsgMigrateCodeResponse(betterproto.Message):
    """MsgMigrateCodeResponse defines the Msg/MigrateCode response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgInstantiateContract(betterproto.Message):
    """
    MsgInstantiateContract represents a message to create a new smart contract
    instance for the given code id.
    """

    sender: str = betterproto.string_field(1)
    """Sender is an sender address"""

    admin: str = betterproto.string_field(2)
    """Admin is an optional admin address who can migrate the contract"""

    code_id: int = betterproto.uint64_field(3)
    """CodeID is the reference to the stored WASM code"""

    init_msg: bytes = betterproto.bytes_field(4)
    """
    InitMsg json encoded message to be passed to the contract on instantiation
    """

    init_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(5)
    """InitCoins that are transferred to the contract on execution"""


@dataclass(eq=False, repr=False)
class MsgInstantiateContractResponse(betterproto.Message):
    """
    MsgInstantiateContractResponse defines the Msg/InstantiateContract response
    type.
    """

    contract_address: str = betterproto.string_field(1)
    """ContractAddress is the bech32 address of the new contract instance."""

    data: bytes = betterproto.bytes_field(2)
    """Data contains base64-encoded bytes to returned from the contract"""


@dataclass(eq=False, repr=False)
class MsgExecuteContract(betterproto.Message):
    """
    MsgExecuteContract represents a message to submits the given message data
    to a smart contract.
    """

    sender: str = betterproto.string_field(1)
    """Sender is the that actor that signed the messages"""

    contract: str = betterproto.string_field(2)
    """Contract is the address of the smart contract"""

    execute_msg: bytes = betterproto.bytes_field(3)
    """ExecuteMsg json encoded message to be passed to the contract"""

    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(5)
    """Coins that are transferred to the contract on execution"""


@dataclass(eq=False, repr=False)
class MsgExecuteContractResponse(betterproto.Message):
    """
    MsgExecuteContractResponse defines the Msg/ExecuteContract response type.
    """

    data: bytes = betterproto.bytes_field(1)
    """Data contains base64-encoded bytes to returned from the contract"""


@dataclass(eq=False, repr=False)
class MsgMigrateContract(betterproto.Message):
    """
    MsgMigrateContract represents a message to runs a code upgrade/ downgrade
    for a smart contract
    """

    admin: str = betterproto.string_field(1)
    """Admin is the current contract admin"""

    contract: str = betterproto.string_field(2)
    """Contract is the address of the smart contract"""

    new_code_id: int = betterproto.uint64_field(3)
    """NewCodeID references the new WASM code"""

    migrate_msg: bytes = betterproto.bytes_field(4)
    """
    MigrateMsg is json encoded message to be passed to the contract on
    migration
    """


@dataclass(eq=False, repr=False)
class MsgMigrateContractResponse(betterproto.Message):
    """
    MsgMigrateContractResponse defines the Msg/MigrateContract response type.
    """

    data: bytes = betterproto.bytes_field(1)
    """Data contains base64-encoded bytes to returned from the contract"""


@dataclass(eq=False, repr=False)
class MsgUpdateContractAdmin(betterproto.Message):
    """
    MsgUpdateContractAdmin represents a message to sets a new admin for a smart
    contract
    """

    admin: str = betterproto.string_field(1)
    """Admin is the current contract admin"""

    new_admin: str = betterproto.string_field(2)
    """NewAdmin is the new contract admin"""

    contract: str = betterproto.string_field(3)
    """Contract is the address of the smart contract"""


@dataclass(eq=False, repr=False)
class MsgUpdateContractAdminResponse(betterproto.Message):
    """
    MsgUpdateContractAdminResponse defines the Msg/UpdateContractAdmin response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgClearContractAdmin(betterproto.Message):
    """
    MsgClearContractAdmin represents a message to clear admin address from a
    smart contract
    """

    admin: str = betterproto.string_field(1)
    """Admin is the current contract admin"""

    contract: str = betterproto.string_field(2)
    """Contract is the address of the smart contract"""


@dataclass(eq=False, repr=False)
class MsgClearContractAdminResponse(betterproto.Message):
    """
    MsgClearContractAdminResponse defines the Msg/ClearContractAdmin response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class LegacyCodeInfo(betterproto.Message):
    """CodeInfo is data for the uploaded contract WASM code"""

    code_id: int = betterproto.uint64_field(1)
    """CodeID is the sequentially increasing unique identifier"""

    code_hash: bytes = betterproto.bytes_field(2)
    """CodeHash is the unique identifier created by wasmvm"""

    creator: str = betterproto.string_field(3)
    """Creator address who initially stored the code"""


@dataclass(eq=False, repr=False)
class LegacyContractInfo(betterproto.Message):
    """ContractInfo stores a WASM contract instance"""

    address: str = betterproto.string_field(1)
    """Address is the address of the contract"""

    creator: str = betterproto.string_field(2)
    """Creator is the contract creator address"""

    admin: str = betterproto.string_field(3)
    """Admin is who can execute the contract migration"""

    code_id: int = betterproto.uint64_field(4)
    """CodeID is the reference to the stored Wasm code"""

    init_msg: bytes = betterproto.bytes_field(5)
    """InitMsg is the raw message used when instantiating a contract"""


@dataclass(eq=False, repr=False)
class Model(betterproto.Message):
    """Model is a struct that holds a KV pair"""

    key: bytes = betterproto.bytes_field(1)
    value: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class Code(betterproto.Message):
    """Code struct encompasses CodeInfo and CodeBytes"""

    code_info: "LegacyCodeInfo" = betterproto.message_field(1)
    code_bytes: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class Contract(betterproto.Message):
    """
    Contract struct encompasses ContractAddress, ContractInfo, and
    ContractState
    """

    contract_info: "LegacyContractInfo" = betterproto.message_field(1)
    contract_store: List["Model"] = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def store_code(
        self,
        msg_store_code: "MsgStoreCode",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgStoreCodeResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/StoreCode",
            msg_store_code,
            MsgStoreCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def migrate_code(
        self,
        msg_migrate_code: "MsgMigrateCode",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMigrateCodeResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/MigrateCode",
            msg_migrate_code,
            MsgMigrateCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def instantiate_contract(
        self,
        msg_instantiate_contract: "MsgInstantiateContract",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgInstantiateContractResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/InstantiateContract",
            msg_instantiate_contract,
            MsgInstantiateContractResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_contract(
        self,
        msg_execute_contract: "MsgExecuteContract",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgExecuteContractResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/ExecuteContract",
            msg_execute_contract,
            MsgExecuteContractResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def migrate_contract(
        self,
        msg_migrate_contract: "MsgMigrateContract",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMigrateContractResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/MigrateContract",
            msg_migrate_contract,
            MsgMigrateContractResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_contract_admin(
        self,
        msg_update_contract_admin: "MsgUpdateContractAdmin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateContractAdminResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/UpdateContractAdmin",
            msg_update_contract_admin,
            MsgUpdateContractAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_contract_admin(
        self,
        msg_clear_contract_admin: "MsgClearContractAdmin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClearContractAdminResponse":
        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/ClearContractAdmin",
            msg_clear_contract_admin,
            MsgClearContractAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def store_code(
        self, msg_store_code: "MsgStoreCode"
    ) -> "MsgStoreCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def migrate_code(
        self, msg_migrate_code: "MsgMigrateCode"
    ) -> "MsgMigrateCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def instantiate_contract(
        self, msg_instantiate_contract: "MsgInstantiateContract"
    ) -> "MsgInstantiateContractResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_contract(
        self, msg_execute_contract: "MsgExecuteContract"
    ) -> "MsgExecuteContractResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def migrate_contract(
        self, msg_migrate_contract: "MsgMigrateContract"
    ) -> "MsgMigrateContractResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_contract_admin(
        self, msg_update_contract_admin: "MsgUpdateContractAdmin"
    ) -> "MsgUpdateContractAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_contract_admin(
        self, msg_clear_contract_admin: "MsgClearContractAdmin"
    ) -> "MsgClearContractAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_store_code(
        self, stream: "grpclib.server.Stream[MsgStoreCode, MsgStoreCodeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.store_code(request)
        await stream.send_message(response)

    async def __rpc_migrate_code(
        self, stream: "grpclib.server.Stream[MsgMigrateCode, MsgMigrateCodeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.migrate_code(request)
        await stream.send_message(response)

    async def __rpc_instantiate_contract(
        self,
        stream: "grpclib.server.Stream[MsgInstantiateContract, MsgInstantiateContractResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.instantiate_contract(request)
        await stream.send_message(response)

    async def __rpc_execute_contract(
        self,
        stream: "grpclib.server.Stream[MsgExecuteContract, MsgExecuteContractResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_contract(request)
        await stream.send_message(response)

    async def __rpc_migrate_contract(
        self,
        stream: "grpclib.server.Stream[MsgMigrateContract, MsgMigrateContractResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.migrate_contract(request)
        await stream.send_message(response)

    async def __rpc_update_contract_admin(
        self,
        stream: "grpclib.server.Stream[MsgUpdateContractAdmin, MsgUpdateContractAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_contract_admin(request)
        await stream.send_message(response)

    async def __rpc_clear_contract_admin(
        self,
        stream: "grpclib.server.Stream[MsgClearContractAdmin, MsgClearContractAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_contract_admin(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/terra.wasm.v1beta1.Msg/StoreCode": grpclib.const.Handler(
                self.__rpc_store_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgStoreCode,
                MsgStoreCodeResponse,
            ),
            "/terra.wasm.v1beta1.Msg/MigrateCode": grpclib.const.Handler(
                self.__rpc_migrate_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMigrateCode,
                MsgMigrateCodeResponse,
            ),
            "/terra.wasm.v1beta1.Msg/InstantiateContract": grpclib.const.Handler(
                self.__rpc_instantiate_contract,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgInstantiateContract,
                MsgInstantiateContractResponse,
            ),
            "/terra.wasm.v1beta1.Msg/ExecuteContract": grpclib.const.Handler(
                self.__rpc_execute_contract,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgExecuteContract,
                MsgExecuteContractResponse,
            ),
            "/terra.wasm.v1beta1.Msg/MigrateContract": grpclib.const.Handler(
                self.__rpc_migrate_contract,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMigrateContract,
                MsgMigrateContractResponse,
            ),
            "/terra.wasm.v1beta1.Msg/UpdateContractAdmin": grpclib.const.Handler(
                self.__rpc_update_contract_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateContractAdmin,
                MsgUpdateContractAdminResponse,
            ),
            "/terra.wasm.v1beta1.Msg/ClearContractAdmin": grpclib.const.Handler(
                self.__rpc_clear_contract_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClearContractAdmin,
                MsgClearContractAdminResponse,
            ),
        }
