# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .... import v1beta1 as ___v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgCreateBalancerPool(betterproto.Message):
    """===================== MsgCreatePool"""

    sender: str = betterproto.string_field(1)
    pool_params: "___v1_beta1__.PoolParams" = betterproto.message_field(2)
    pool_assets: List["___v1_beta1__.PoolAsset"] = betterproto.message_field(3)
    future_pool_governor: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgCreateBalancerPoolResponse(betterproto.Message):
    """Returns the poolID"""

    pool_id: int = betterproto.uint64_field(1)


class MsgStub(betterproto.ServiceStub):
    async def create_balancer_pool(
        self,
        msg_create_balancer_pool: "MsgCreateBalancerPool",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateBalancerPoolResponse":
        return await self._unary_unary(
            "/osmosis.gamm.poolmodels.balancer.v1beta1.Msg/CreateBalancerPool",
            msg_create_balancer_pool,
            MsgCreateBalancerPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def create_balancer_pool(
        self, msg_create_balancer_pool: "MsgCreateBalancerPool"
    ) -> "MsgCreateBalancerPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_balancer_pool(
        self,
        stream: "grpclib.server.Stream[MsgCreateBalancerPool, MsgCreateBalancerPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_balancer_pool(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/osmosis.gamm.poolmodels.balancer.v1beta1.Msg/CreateBalancerPool": grpclib.const.Handler(
                self.__rpc_create_balancer_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateBalancerPool,
                MsgCreateBalancerPoolResponse,
            ),
        }
