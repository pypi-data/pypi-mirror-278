import importlib.resources as pkg_resources

prakt = {
    "1": "написать программу с длину окружности вычислить объем шара",
    "2": "создать класс стек первый и последний элементы стека",
    "3": "дан список а3 элементы а в другом отрицательные",
    "4": "создать класс стек если четное то два средних",
    "5": "создать класс plane определить среднюю загрузку всех самолетов",
    "6": "создать класс стек удалить каждый второй элемент стека",
    "7": "дано предложение без обрезанные слова длина которых больше",
    "8": "создать класс стек стека и вставить после него",
    "9": "дан список s использовать встроенные функции высшего порядка",
    "10": "реализовать декоратор с декорируемая функция вернула значения none",
    "11": "создайте класс speed проверку продемонстрируйте работу с классом",
    "12": "реализовать декоратор с тип значения возвращаемого декорируемой функцией",
    "13": "создать класс стек list удалить минимальный элемент стека",
    "14": "задано положительное и двоичной системе счисления использовать рекурсию",
    "15": "вывести по убыванию с помощью алгоритма сортировки слиянием",
    "16": "написать программу с списка и вывести его номера",
    "17": "задание построить базовый вывод информации об объектах классов",
    "18": "написать программу с площадь прямоугольника вычислить периметр прямоугольника",
    "19": "дан кольцевой список создать из них новый список",
    "20": "с помощью функции для четного или нечетного n",
    "21": "создайте класс заказ для объектов opt и retail",
    "22": "создать класс деньги деление сумм деление денежных сумм",
    "23": "дан кольцевой список вторую группу попадает каждый человек",
    "24": "составить программу для числа получаем результат использовать рекурсию",
    "25": "создать класс стек местами верхний и нижний элементы",
    "26": "дан список а3 элементы а в другом отрицательные",
    "27": "создайте класс студент с атрибутами методами и свойствами",
    "28": "дан список s списка использовать функции высшего порядка",
    "29": "дан однонаправленный связный элемент после nго элемента списка",
    "30": "создать декоратор tol len то хвост последовательности отбрасывается",
    "31": "реализовать однонаправленный связанный все элементы содержащие гласные буквы",
    "32": "создать базовый класс руки переменная summa как okladnalog",
    "33": "вывести по убыванию жигули осуществить алгоритм сортировки слиянием",
    "34": "описать рекурсивные функции соответственно n параметр целого типа",
    "35": "дан однонаправленный связный удалить каждый второй элемент списка",
    "36": "создать иерархию классов объектов и продемонстрировать созданную защиту",
    "37": "расположить по алфавиту машинах использовать алгоритм сортировки выбором",
    "38": "описать рекурсивную функцию на отрезке а b функция",
    "39": "дан одномерный массив реализовать сортировку алгоритмом сортировки выбором",
    "40": "создать декоратор dec декорируемой функции на значение b",
    "41": "дан одномерный массив реализовать сортировку алгоритмом сортировки вставками",
    "42": "дан список целых тех остатков величина которых больше",
    "43": "дан одномерный массив убыванию реализовать алгоритм сортировки слиянием",
    "44": "реализовать декоратор с отрицательное значение суммы трех чисел",
    "45": "дано два однонаправленных элементы общие для двух списков",
    "46": "дан список целых тех остатков величина которых меньше",
    "47": "создать класс профиль длины по перепаду по крутизне",
    "48": "дан список целых тех значений величина которых меньше",
    "49": "реализовать двоичное дерево дерева в виде рекурсивной функции",
    "50": "в одномерном массиве это два рядом стоящих элемента",
    "51": "задание построить базовый вывод информации об объектах классов",
    "52": "создать иерархию классов и продемонстрировать работу созданного механизма",
    "53": "дано предложение без склеить их в одну строку",
    "54": "в одномерном массиве это два рядом стоящих элемента",
    "55": "реализовать функцию streverse обратный пример streverse abcd dcba",
    "56": "дан двунаправленный связный элемент после nго элемента списка",
    "57": "дан двунаправленный связный список удалить nый элемент списка",
    "58": "добавить элемент в в начало однонаправленного связного списка",
    "59": "соединить два однонаправленных соединить два однонаправленных связных списка",
    "60": "даны кольцевых списка а во второй каждый kй",
    "61": "даны кольцевых списка число для пересчета призов t",
    "62": "дан список с создать из них новый список",
    "63": "даны списка перечень обязателен достаточно обычных кнопок списков",
    "64": "даны списка с группы во число пересчета k",
    "65": "даны списка перечень mй товар вывести список покупок",
    "66": "описать функцию которая записи e в дерево t",
    "67": "вершины дерева вещественные обязателен достаточно обычных кнопок списков",
}

teor = {
    "1": "концепция класса и объекта",
    "2": "объявление класса конструктор создание",
    "3": "методы классов и статические",
    "4": "основные возможности поддерживаемые функциональными",
    "5": "концепция функции граждане первого",
    "6": "глобальные и локальные переменные",
    "7": "вложенные функции и замыкания",
    "8": "функции высшего порядка и",
    "9": "концепция map filter reduce",
    "10": "итераторы в python встроенные",
    "11": "специфика массивов как структур",
    "12": "абстрактная структура данных стек",
    "13": "специфика реализации и скорости",
    "14": "связанные списки однонаправленные и",
    "15": "алгоритм обменной сортировки сложность",
    "16": "алгоритм сортировки выбором сложность",
    "17": "алгоритм сортировки вставками его",
    "18": "алгоритм сортировки шелла сложность",
    "19": "алгоритм быстрой сортировки сложность",
    "20": "алгоритм сортировки слиянием сложность",
    "21": "реализация двоичных деревьев в",
    "22": "двоичное дерево поиска принципы",
    "23": "двоичная куча принципы реализации",
    "24": "абстрактный тип данных ассоциативный",
    "25": "общая схема построения хэшфункции",
    "26": "полиномиальная хэшфункция принцип работы",
    "27": "различные методы разрешения коллизий",
}
content = ''


def write_code(name, f):
    global content

    resource_package = 'gnida.c'

    keys = [key for key, val in prakt.items() if val == name]

    if len(keys) == 1:
        resource_path = f'{keys[0]}.py'
        with pkg_resources.open_text(resource_package, resource_path) as file:
            content = file.read()
        with open(f"{f}.py", "w+", encoding='utf-8') as my_file:
            my_file.write(content)
        return 'Все получилось'
    else:
        for key in keys:
            resource_path = f'{key}.py'
            with pkg_resources.open_text(resource_package, resource_path) as file:
                content = file.read()
            with open(f"{f}.py", "w+", encoding='utf-8') as my_file:
                my_file.write(content)
            f += 1


def write_teor(name):
    global content

    resource_package = 'gnida.t'

    keys = [key for key, val in teor.items() if val == name]

    resource_path = f'{keys[0]}.txt'
    with pkg_resources.open_text(resource_package, resource_path) as file:
        content = file.read()
    return content
