# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import io
import re  # noqa: F401
import warnings
from typing import Optional

from pydantic import conint
from pydantic import StrictStr
from pydantic import validate_arguments
from pydantic import ValidationError

from superwise_api.client.api_client import ApiClient
from superwise_api.client.api_response import ApiResponse
from superwise_api.client.exceptions import ApiTypeError
from superwise_api.client.exceptions import ApiValueError
from superwise_api.client.models.page_policy_response import PagePolicyResponse
from superwise_api.client.models.policy_create import PolicyCreate
from superwise_api.client.models.policy_response import PolicyResponse
from superwise_api.client.models.policy_status import PolicyStatus
from superwise_api.client.models.policy_update import PolicyUpdate


class PoliciesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_policy(self, policy_create: PolicyCreate, **kwargs) -> PolicyResponse:  # noqa: E501
        """Create Policy  # noqa: E501

        Creates a new Policy  - **payload** (PolicySchema): Required. The policy data to be created:     - **name** (str): A descriptive name for this policy.     - **query** (Query): Cube.js query.     - **cron_expression** (str): Cron expression for policy evaluation.     - **condition_above_value** (float or None): Condition above value.     - **condition_below_value** (float or None): Condition below value.     - **destination_ids** (list of UUID): List of communication channels to get notified through.     - **alert_on_status** (AlertOnStatusDirection): Trigger policy action if the value is above/below.     - **alert_on_policy_level** (bool): Trigger policy action on a single group/entire groups.     - **dataset_id** (str): The dataset this policy is monitoring.     - **time_range_field** (str): Time field to scan.     - **time_range_unit** (TimeRangeUnit): Time unit to scan.     - **time_range_value** (int): Time value to scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_policy(policy_create, async_req=True)
        >>> result = thread.get()

        :param policy_create: (required)
        :type policy_create: PolicyCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_policy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_policy_with_http_info(policy_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_policy_with_http_info(self, policy_create: PolicyCreate, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Policy  # noqa: E501

        Creates a new Policy  - **payload** (PolicySchema): Required. The policy data to be created:     - **name** (str): A descriptive name for this policy.     - **query** (Query): Cube.js query.     - **cron_expression** (str): Cron expression for policy evaluation.     - **condition_above_value** (float or None): Condition above value.     - **condition_below_value** (float or None): Condition below value.     - **destination_ids** (list of UUID): List of communication channels to get notified through.     - **alert_on_status** (AlertOnStatusDirection): Trigger policy action if the value is above/below.     - **alert_on_policy_level** (bool): Trigger policy action on a single group/entire groups.     - **dataset_id** (str): The dataset this policy is monitoring.     - **time_range_field** (str): Time field to scan.     - **time_range_unit** (TimeRangeUnit): Time unit to scan.     - **time_range_value** (int): Time value to scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_policy_with_http_info(policy_create, async_req=True)
        >>> result = thread.get()

        :param policy_create: (required)
        :type policy_create: PolicyCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["policy_create"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_policy" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["policy_create"] is not None:
            _body_params = _params["policy_create"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "201": "PolicyResponse",
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/policies",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_policy(self, policy_id: StrictStr, **kwargs) -> None:  # noqa: E501
        """Delete policy by ID  # noqa: E501

        Delete a specific Policy  - **policy_id**: The ID of the policy to be deleted.  Raises:     PolicyNotFoundException: If the policy with the specified ID is not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_policy(policy_id, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_policy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_policy_with_http_info(policy_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_policy_with_http_info(self, policy_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete policy by ID  # noqa: E501

        Delete a specific Policy  - **policy_id**: The ID of the policy to be deleted.  Raises:     PolicyNotFoundException: If the policy with the specified ID is not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_policy_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["policy_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_policy" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["policy_id"] is not None:
            _path_params["policy_id"] = _params["policy_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/policies/{policy_id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_policies(
        self,
        name: Optional[StrictStr] = None,
        status: Optional[PolicyStatus] = None,
        created_by: Optional[StrictStr] = None,
        dataset_id: Optional[StrictStr] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> PagePolicyResponse:  # noqa: E501
        """Get Policies  # noqa: E501

        Retrieve all Policies based on provided filters  - **name** (str or None): Optional. The name of the policy to filter by. - **status** (PolicyStatus or None): Optional. The status of the policy to filter by. - **created_by** (str or None): Optional. The creator of the policy to filter by. - **dataset_id** (str or None): Optional. The ID of the dataset associated with the policy to filter by.  Raises:     500: If there is a server error.     404: If the requested resource is not found.     200: If the operation is successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_policies(name, status, created_by, dataset_id, page, size, async_req=True)
        >>> result = thread.get()

        :param name:
        :type name: str
        :param status:
        :type status: PolicyStatus
        :param created_by:
        :type created_by: str
        :param dataset_id:
        :type dataset_id: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagePolicyResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_policies_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_policies_with_http_info(
            name, status, created_by, dataset_id, page, size, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_policies_with_http_info(
        self,
        name: Optional[StrictStr] = None,
        status: Optional[PolicyStatus] = None,
        created_by: Optional[StrictStr] = None,
        dataset_id: Optional[StrictStr] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Policies  # noqa: E501

        Retrieve all Policies based on provided filters  - **name** (str or None): Optional. The name of the policy to filter by. - **status** (PolicyStatus or None): Optional. The status of the policy to filter by. - **created_by** (str or None): Optional. The creator of the policy to filter by. - **dataset_id** (str or None): Optional. The ID of the dataset associated with the policy to filter by.  Raises:     500: If there is a server error.     404: If the requested resource is not found.     200: If the operation is successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_policies_with_http_info(name, status, created_by, dataset_id, page, size, async_req=True)
        >>> result = thread.get()

        :param name:
        :type name: str
        :param status:
        :type status: PolicyStatus
        :param created_by:
        :type created_by: str
        :param dataset_id:
        :type dataset_id: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PagePolicyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["name", "status", "created_by", "dataset_id", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_policies" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"].value))

        if _params.get("created_by") is not None:  # noqa: E501
            _query_params.append(("created_by", _params["created_by"]))

        if _params.get("dataset_id") is not None:  # noqa: E501
            _query_params.append(("dataset_id", _params["dataset_id"]))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PagePolicyResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/policies",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_policy(self, policy_id: StrictStr, **kwargs) -> PolicyResponse:  # noqa: E501
        """Get Policy By Id  # noqa: E501

        Get policy by ID  - policy_id (UUID): The ID of the policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_policy(policy_id, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_policy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_policy_with_http_info(policy_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_policy_with_http_info(self, policy_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Policy By Id  # noqa: E501

        Get policy by ID  - policy_id (UUID): The ID of the policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_policy_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["policy_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_policy" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["policy_id"] is not None:
            _path_params["policy_id"] = _params["policy_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PolicyResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/policies/{policy_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def trigger_policy(self, policy_id: StrictStr, **kwargs) -> None:  # noqa: E501
        """Trigger policy by ID  # noqa: E501

        Trigger policy by ID.  - **policy_id** (UUID): The unique identifier of the policy that needs to be triggered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_policy(policy_id, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the trigger_policy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trigger_policy_with_http_info(policy_id, **kwargs)  # noqa: E501

    @validate_arguments
    def trigger_policy_with_http_info(self, policy_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Trigger policy by ID  # noqa: E501

        Trigger policy by ID.  - **policy_id** (UUID): The unique identifier of the policy that needs to be triggered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_policy_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["policy_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method trigger_policy" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["policy_id"] is not None:
            _path_params["policy_id"] = _params["policy_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/policies/{policy_id}/trigger",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_policy(
        self, policy_id: StrictStr, policy_update: PolicyUpdate, **kwargs
    ) -> PolicyResponse:  # noqa: E501
        """Update policy by ID  # noqa: E501

        Update policy by ID.  - **payload** (PolicyUpdate): Required. The updated policy information with:     - **name** (str or None): The updated name of the policy.     - **query** (Query or None): The updated Cube.js query for the policy.     - **cron_expression** (str or None): The updated cron expression for the policy evaluation.     - **condition_above_value** (float or None): The updated condition above value.     - **condition_below_value** (float or None): The updated condition below value.     - **destination_ids** (list of UUID or None): The updated list of communication channels to get notified through.     - **alert_on_status** (AlertOnStatusDirection or None): The updated trigger policy action if the value is above/below.     - **alert_on_policy_level** (bool or None): The updated trigger policy action on a single group/entire groups.     - **dataset_id** (str or None): The updated dataset this policy is monitoring.     - **time_range_field** (str or None): The updated time field to scan.     - **time_range_unit** (TimeRangeUnit or None): The updated time unit to scan.     - **time_range_value** (int or None): The updated time value to scan. - **policy_id** (UUID): Required. The ID of the policy to be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_policy(policy_id, policy_update, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param policy_update: (required)
        :type policy_update: PolicyUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_policy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_policy_with_http_info(policy_id, policy_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_policy_with_http_info(
        self, policy_id: StrictStr, policy_update: PolicyUpdate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Update policy by ID  # noqa: E501

        Update policy by ID.  - **payload** (PolicyUpdate): Required. The updated policy information with:     - **name** (str or None): The updated name of the policy.     - **query** (Query or None): The updated Cube.js query for the policy.     - **cron_expression** (str or None): The updated cron expression for the policy evaluation.     - **condition_above_value** (float or None): The updated condition above value.     - **condition_below_value** (float or None): The updated condition below value.     - **destination_ids** (list of UUID or None): The updated list of communication channels to get notified through.     - **alert_on_status** (AlertOnStatusDirection or None): The updated trigger policy action if the value is above/below.     - **alert_on_policy_level** (bool or None): The updated trigger policy action on a single group/entire groups.     - **dataset_id** (str or None): The updated dataset this policy is monitoring.     - **time_range_field** (str or None): The updated time field to scan.     - **time_range_unit** (TimeRangeUnit or None): The updated time unit to scan.     - **time_range_value** (int or None): The updated time value to scan. - **policy_id** (UUID): Required. The ID of the policy to be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_policy_with_http_info(policy_id, policy_update, async_req=True)
        >>> result = thread.get()

        :param policy_id: (required)
        :type policy_id: str
        :param policy_update: (required)
        :type policy_update: PolicyUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["policy_id", "policy_update"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method update_policy" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["policy_id"] is not None:
            _path_params["policy_id"] = _params["policy_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["policy_update"] is not None:
            _body_params = _params["policy_update"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PolicyResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/policies/{policy_id}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
