# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import io
import re  # noqa: F401
import warnings
from typing import Any
from typing import Optional

from pydantic import conint
from pydantic import Field
from pydantic import StrictStr
from pydantic import validate_arguments
from pydantic import ValidationError
from typing_extensions import Annotated

from superwise_api.client.api_client import ApiClient
from superwise_api.client.api_response import ApiResponse
from superwise_api.client.exceptions import ApiTypeError
from superwise_api.client.models import Application
from superwise_api.client.models import ApplicationConfigPayload
from superwise_api.client.models import AskRequestPayload
from superwise_api.client.models import ModelLLM
from superwise_api.client.models.page_application import PageApplication
from superwise_api.client.models.payload import Payload


class ApplicationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def ask_application(self, ask_request_payload: Any, **kwargs) -> object:  # noqa: E501
        """Ask Application  # noqa: E501

        Ask an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ask_application(ask_request_payload, async_req=True)
        >>> result = thread.get()

        :param ask_request_payload: (required)
        :type ask_request_payload: AskRequestPayload
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the ask_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ask_application_with_http_info(ask_request_payload, **kwargs)  # noqa: E501

    @validate_arguments
    def ask_application_with_http_info(self, ask_request_payload: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Ask Application  # noqa: E501

        Ask an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ask_application_with_http_info(ask_request_payload, async_req=True)
        >>> result = thread.get()

        :param ask_request_payload: (required)
        :type ask_request_payload: AskRequestPayload
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["ask_request_payload"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method ask_application" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["ask_request_payload"] is not None:
            _body_params = _params["ask_request_payload"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "object",
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/application-playground/ask",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_application(self, application_config_payload: Any, **kwargs) -> Application:  # noqa: E501
        """Create Application  # noqa: E501

        Create a new application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_application(application_config_payload, async_req=True)
        >>> result = thread.get()

        :param application_config_payload: (required)
        :type application_config_payload: Any
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Application
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_application_with_http_info(application_config_payload, **kwargs)  # noqa: E501

    @validate_arguments
    def create_application_with_http_info(self, application_config_payload: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Application  # noqa: E501

        Create a new application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_application_with_http_info(application_config_payload, async_req=True)
        >>> result = thread.get()

        :param application_config_payload: (required)
        :type application_config_payload: Any
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Application, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_config_payload"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_application" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["application_config_payload"] is not None:
            _body_params = _params["application_config_payload"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "201": "Application",
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_application(self, application_id: StrictStr, **kwargs) -> None:  # noqa: E501
        """Delete Application  # noqa: E501

        Delete an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_application(application_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_application_with_http_info(application_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_application_with_http_info(self, application_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Application  # noqa: E501

        Delete an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_application_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["application_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_application" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/applications/{application_id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_application_by_id(self, application_id: StrictStr, **kwargs) -> Application:  # noqa: E501
        """Get Application By Id  # noqa: E501

        Get an application by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_application_by_id(application_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Application
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_application_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_application_by_id_with_http_info(application_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_application_by_id_with_http_info(self, application_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Application By Id  # noqa: E501

        Get an application by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_application_by_id_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Application, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_application_by_id" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "Application",
            "404": None,
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications/{application_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_applications(
        self,
        name: Optional[Any] = None,
        created_by: Optional[Any] = None,
        prompt: Optional[Any] = None,
        dataset_id: Optional[Any] = None,
        page: Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page number")] = None,
        size: Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="Page size")] = None,
        **kwargs
    ) -> PageApplication:  # noqa: E501
        """Get Applications  # noqa: E501

        Get applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_applications(name, created_by, prompt, dataset_id, page, size, async_req=True)
        >>> result = thread.get()

        :param name:
        :type name: Name
        :param created_by:
        :type created_by: CreatedBy
        :param prompt:
        :type prompt: Prompt
        :param dataset_id:
        :type dataset_id: DatasetId
        :param page: Page number
        :type page: int
        :param size: Page size
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageApplication
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_applications_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_applications_with_http_info(
            name, created_by, prompt, dataset_id, page, size, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_applications_with_http_info(
        self,
        name: Optional[Any] = None,
        created_by: Optional[Any] = None,
        prompt: Optional[Any] = None,
        dataset_id: Optional[Any] = None,
        page: Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page number")] = None,
        size: Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="Page size")] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Applications  # noqa: E501

        Get applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_applications_with_http_info(name, created_by, prompt, dataset_id, page, size, async_req=True)
        >>> result = thread.get()

        :param name:
        :type name: Name
        :param created_by:
        :type created_by: CreatedBy
        :param prompt:
        :type prompt: Prompt
        :param dataset_id:
        :type dataset_id: DatasetId
        :param page: Page number
        :type page: int
        :param size: Page size
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageApplication, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["name", "created_by", "prompt", "dataset_id", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_applications" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("created_by") is not None:  # noqa: E501
            _query_params.append(("created_by", _params["created_by"]))

        if _params.get("prompt") is not None:  # noqa: E501
            _query_params.append(("prompt", _params["prompt"]))

        if _params.get("dataset_id") is not None:  # noqa: E501
            _query_params.append(("dataset_id", _params["dataset_id"]))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PageApplication",
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def put_application(
        self, application_id: StrictStr, application_config_payload: Any, **kwargs
    ) -> Application:  # noqa: E501
        """Put Application  # noqa: E501

        Update an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_application(application_id, application_config_payload, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param application_config_payload: (required)
        :type application_config_payload: Any
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Application
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the put_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.put_application_with_http_info(application_id, application_config_payload, **kwargs)  # noqa: E501

    @validate_arguments
    def put_application_with_http_info(
        self, application_id: StrictStr, application_config_payload: Any, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Put Application  # noqa: E501

        Update an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_application_with_http_info(application_id, application_config_payload, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param application_config_payload: (required)
        :type application_config_payload: Any
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Application, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id", "application_config_payload"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method put_application" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["application_config_payload"] is not None:
            _body_params = _params["application_config_payload"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "Application",
            "404": None,
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications/{application_id}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def test_model_connection(self, model_llm: ModelLLM, **kwargs) -> None:  # noqa: E501
        """Test Model Connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_model_connection(model_llm, async_req=True)
        >>> result = thread.get()

        :param model_llm: (required)
        :type model_llm: ModelLLM
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the test_model_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.test_model_connection_with_http_info(model_llm, **kwargs)  # noqa: E501

    @validate_arguments
    def test_model_connection_with_http_info(self, model_llm: ModelLLM, **kwargs) -> ApiResponse:  # noqa: E501
        """Test Model Connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_model_connection_with_http_info(model_llm, async_req=True)
        >>> result = thread.get()

        :param model_llm: (required)
        :type model_llm: ModelLLM
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["model_llm"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method test_model_connection" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model_llm"] is not None:
            _body_params = _params["model_llm"]

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/applications/test-model-connection",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def test_tool_connection(self, payload: Payload, **kwargs) -> None:  # noqa: E501
        """Test Tool Connection  # noqa: E501

        Test a tool connection.  Parameters:  For `ToolConfigPostgres`: - **type**: Literal type indication for Postgres tool (`Postgres`). - **connection_string**: Connection string for the Postgres database.  For `ToolConfigMySQL`: - **type**: Literal type indication for MySQL tool (`MySQL`). - **connection_string**: Connection string for the MySQL database.  For `ToolConfigMSSQL`: - **type**: Literal type indication for MSSQL tool (`MSSQL`). - **connection_string**: Connection string for the MSSQL database.  For `ToolConfigOracle`: - **type**: Literal type indication for Oracle tool (`Oracle`). - **connection_string**: Connection string for the Oracle database.  For `ToolConfigBigQuery`: - **type**: Literal type indication for BigQuery tool (`BigQuery`). - **project_id**: Project ID for BigQuery. - **dataset_id**: Dataset ID for BigQuery. - **service_account**: Service account information as a dictionary with keys and values as strings.  For `ToolConfigPGVector`: - **type**: Literal type indication for PG Vector tool (`PGVector`). - **connection_string**: Connection string for the PG Vector database. - **table_name**: Name of the table in the PG Vector database. - **embedding_model**: Configuration of the embedding model to be used.     - **provider**: Provider of the embedding model (`VertexAIModelGarden`).     - **project_id**: Project ID for Vertex AI.     - **endpoint_id**: Endpoint ID for the model.     - **location**: Location of the Vertex AI endpoint.     - **service_account**: Service account information as a dictionary with keys and values as strings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_tool_connection(payload, async_req=True)
        >>> result = thread.get()

        :param payload: (required)
        :type payload: Payload
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the test_tool_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.test_tool_connection_with_http_info(payload, **kwargs)  # noqa: E501

    @validate_arguments
    def test_tool_connection_with_http_info(self, payload: Payload, **kwargs) -> ApiResponse:  # noqa: E501
        """Test Tool Connection  # noqa: E501

        Test a tool connection.  Parameters:  For `ToolConfigPostgres`: - **type**: Literal type indication for Postgres tool (`Postgres`). - **connection_string**: Connection string for the Postgres database.  For `ToolConfigMySQL`: - **type**: Literal type indication for MySQL tool (`MySQL`). - **connection_string**: Connection string for the MySQL database.  For `ToolConfigMSSQL`: - **type**: Literal type indication for MSSQL tool (`MSSQL`). - **connection_string**: Connection string for the MSSQL database.  For `ToolConfigOracle`: - **type**: Literal type indication for Oracle tool (`Oracle`). - **connection_string**: Connection string for the Oracle database.  For `ToolConfigBigQuery`: - **type**: Literal type indication for BigQuery tool (`BigQuery`). - **project_id**: Project ID for BigQuery. - **dataset_id**: Dataset ID for BigQuery. - **service_account**: Service account information as a dictionary with keys and values as strings.  For `ToolConfigPGVector`: - **type**: Literal type indication for PG Vector tool (`PGVector`). - **connection_string**: Connection string for the PG Vector database. - **table_name**: Name of the table in the PG Vector database. - **embedding_model**: Configuration of the embedding model to be used.     - **provider**: Provider of the embedding model (`VertexAIModelGarden`).     - **project_id**: Project ID for Vertex AI.     - **endpoint_id**: Endpoint ID for the model.     - **location**: Location of the Vertex AI endpoint.     - **service_account**: Service account information as a dictionary with keys and values as strings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_tool_connection_with_http_info(payload, async_req=True)
        >>> result = thread.get()

        :param payload: (required)
        :type payload: Payload
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["payload"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method test_tool_connection" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["payload"] is not None:
            _body_params = _params["payload"]

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/applications/test-tool-connection",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
