# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import io
import re  # noqa: F401
import warnings
from typing import Optional

from pydantic import conint
from pydantic import StrictStr
from pydantic import validate_arguments
from pydantic import ValidationError

from superwise_api.client.api_client import ApiClient
from superwise_api.client.api_response import ApiResponse
from superwise_api.client.exceptions import ApiTypeError
from superwise_api.client.exceptions import ApiValueError
from superwise_api.client.models.dataset_create import DatasetCreate
from superwise_api.client.models.dataset_response import DatasetResponse
from superwise_api.client.models.dataset_update import DatasetUpdate
from superwise_api.client.models.page_dataset_response import PageDatasetResponse


class DatasetApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_dataset(self, dataset_create: DatasetCreate, **kwargs) -> DatasetResponse:  # noqa: E501
        """Create Dataset  # noqa: E501

        Create a new Dataset  - **payload** (DatasetCreate): Required. The payload that includes:     - **name** (str): Name of the dataset, min_length=1, max_length=100.     - **description** (str or None): A description about the dataset.     - **id** (str): Unique identifier of the dataset.     - **model_version_id** (str or None): Model version identifier.     - **tags** (list of DatasetTag or None): A list of tags related to the dataset.     - **schema** (Schema): The schema of the dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dataset(dataset_create, async_req=True)
        >>> result = thread.get()

        :param dataset_create: (required)
        :type dataset_create: DatasetCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DatasetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_dataset_with_http_info(dataset_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_dataset_with_http_info(self, dataset_create: DatasetCreate, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Dataset  # noqa: E501

        Create a new Dataset  - **payload** (DatasetCreate): Required. The payload that includes:     - **name** (str): Name of the dataset, min_length=1, max_length=100.     - **description** (str or None): A description about the dataset.     - **id** (str): Unique identifier of the dataset.     - **model_version_id** (str or None): Model version identifier.     - **tags** (list of DatasetTag or None): A list of tags related to the dataset.     - **schema** (Schema): The schema of the dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dataset_with_http_info(dataset_create, async_req=True)
        >>> result = thread.get()

        :param dataset_create: (required)
        :type dataset_create: DatasetCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["dataset_create"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_dataset" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["dataset_create"] is not None:
            _body_params = _params["dataset_create"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "201": "DatasetResponse",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/v1/datasets",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_dataset(self, dataset_id: StrictStr, **kwargs) -> None:  # noqa: E501
        """Delete Dataset  # noqa: E501

        Delete a specific Dataset  - **dataset_id** (str): Required, ID of the dataset to be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset(dataset_id, async_req=True)
        >>> result = thread.get()

        :param dataset_id: (required)
        :type dataset_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_dataset_with_http_info(dataset_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_dataset_with_http_info(self, dataset_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Dataset  # noqa: E501

        Delete a specific Dataset  - **dataset_id** (str): Required, ID of the dataset to be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_with_http_info(dataset_id, async_req=True)
        >>> result = thread.get()

        :param dataset_id: (required)
        :type dataset_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["dataset_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_dataset" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["dataset_id"] is not None:
            _path_params["dataset_id"] = _params["dataset_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/datasets/{dataset_id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_dataset(self, dataset_id: StrictStr, **kwargs) -> DatasetResponse:  # noqa: E501
        """Get Dataset  # noqa: E501

        Fetch a specific Dataset  - **dataset_id** (str): Required, ID of the dataset to be fetched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset(dataset_id, async_req=True)
        >>> result = thread.get()

        :param dataset_id: (required)
        :type dataset_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DatasetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_dataset_with_http_info(dataset_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_dataset_with_http_info(self, dataset_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Dataset  # noqa: E501

        Fetch a specific Dataset  - **dataset_id** (str): Required, ID of the dataset to be fetched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_with_http_info(dataset_id, async_req=True)
        >>> result = thread.get()

        :param dataset_id: (required)
        :type dataset_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["dataset_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_dataset" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["dataset_id"] is not None:
            _path_params["dataset_id"] = _params["dataset_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "DatasetResponse",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/v1/datasets/{dataset_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_datasets(
        self,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        model_version_id: Optional[StrictStr] = None,
        created_by: Optional[StrictStr] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> PageDatasetResponse:  # noqa: E501
        """Get Datasets  # noqa: E501

        Retrieve all Datasets based on provided filters  - **name** (str or None): Optional, Name of the dataset based on which records to be fetched. - **description** (str or None): Optional, Description of the dataset based on which records to be fetched. - **id** (str or None): Optional, Unique identifier of the dataset based on which records to be fetched. - **model_version_id** (str or None): Optional, Model version identifier based on which datasets to be fetched. - **created_by** (str or None): Optional, Identifier of the user who created the datasets based on which datasets to be fetched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_datasets(name, description, id, model_version_id, created_by, page, size, async_req=True)
        >>> result = thread.get()

        :param name:
        :type name: str
        :param description:
        :type description: str
        :param id:
        :type id: str
        :param model_version_id:
        :type model_version_id: str
        :param created_by:
        :type created_by: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageDatasetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_datasets_with_http_info(
            name, description, id, model_version_id, created_by, page, size, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_datasets_with_http_info(
        self,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        model_version_id: Optional[StrictStr] = None,
        created_by: Optional[StrictStr] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Datasets  # noqa: E501

        Retrieve all Datasets based on provided filters  - **name** (str or None): Optional, Name of the dataset based on which records to be fetched. - **description** (str or None): Optional, Description of the dataset based on which records to be fetched. - **id** (str or None): Optional, Unique identifier of the dataset based on which records to be fetched. - **model_version_id** (str or None): Optional, Model version identifier based on which datasets to be fetched. - **created_by** (str or None): Optional, Identifier of the user who created the datasets based on which datasets to be fetched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_datasets_with_http_info(name, description, id, model_version_id, created_by, page, size, async_req=True)
        >>> result = thread.get()

        :param name:
        :type name: str
        :param description:
        :type description: str
        :param id:
        :type id: str
        :param model_version_id:
        :type model_version_id: str
        :param created_by:
        :type created_by: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageDatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["name", "description", "id", "model_version_id", "created_by", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_datasets" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("description") is not None:  # noqa: E501
            _query_params.append(("description", _params["description"]))

        if _params.get("id") is not None:  # noqa: E501
            _query_params.append(("id", _params["id"]))

        if _params.get("model_version_id") is not None:  # noqa: E501
            _query_params.append(("model_version_id", _params["model_version_id"]))

        if _params.get("created_by") is not None:  # noqa: E501
            _query_params.append(("created_by", _params["created_by"]))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PageDatasetResponse",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/v1/datasets",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def search_datasets(
        self,
        prefix: StrictStr,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> PageDatasetResponse:  # noqa: E501
        """Search Datasets  # noqa: E501

        Search for Datasets that match the provided prefix for id or name  - **prefix** (str): Required, Dataset id/name prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_datasets(prefix, page, size, async_req=True)
        >>> result = thread.get()

        :param prefix: (required)
        :type prefix: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageDatasetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the search_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_datasets_with_http_info(prefix, page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def search_datasets_with_http_info(
        self,
        prefix: StrictStr,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Search Datasets  # noqa: E501

        Search for Datasets that match the provided prefix for id or name  - **prefix** (str): Required, Dataset id/name prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_datasets_with_http_info(prefix, page, size, async_req=True)
        >>> result = thread.get()

        :param prefix: (required)
        :type prefix: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageDatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["prefix", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method search_datasets" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["prefix"] is not None:
            _path_params["prefix"] = _params["prefix"]

        # process the query parameters
        _query_params = []
        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PageDatasetResponse",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/v1/datasets/search/{prefix}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_dataset(
        self, dataset_id: StrictStr, dataset_update: DatasetUpdate, **kwargs
    ) -> DatasetResponse:  # noqa: E501
        """Update Dataset  # noqa: E501

        Update an existing Dataset  - **payload** (DatasetUpdate): Required. The payload that includes:     - **name** (str or None): Updated name of the dataset.     - **description** (str or None): A revised description about the dataset.     - **id** (str or None): Unique identifier of the dataset.     - **model_version_id** (str or None): Updated model version identifier.     - **created_by** (str or None): Identifier of the user who updated the dataset.     - **tags** (list of str or None): A list of updated tags related to the dataset.     - **schema** (SchemaUpdate or None): The updated schema of the dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset(dataset_id, dataset_update, async_req=True)
        >>> result = thread.get()

        :param dataset_id: (required)
        :type dataset_id: str
        :param dataset_update: (required)
        :type dataset_update: DatasetUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DatasetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_dataset_with_http_info(dataset_id, dataset_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_dataset_with_http_info(
        self, dataset_id: StrictStr, dataset_update: DatasetUpdate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Update Dataset  # noqa: E501

        Update an existing Dataset  - **payload** (DatasetUpdate): Required. The payload that includes:     - **name** (str or None): Updated name of the dataset.     - **description** (str or None): A revised description about the dataset.     - **id** (str or None): Unique identifier of the dataset.     - **model_version_id** (str or None): Updated model version identifier.     - **created_by** (str or None): Identifier of the user who updated the dataset.     - **tags** (list of str or None): A list of updated tags related to the dataset.     - **schema** (SchemaUpdate or None): The updated schema of the dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset_with_http_info(dataset_id, dataset_update, async_req=True)
        >>> result = thread.get()

        :param dataset_id: (required)
        :type dataset_id: str
        :param dataset_update: (required)
        :type dataset_update: DatasetUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["dataset_id", "dataset_update"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method update_dataset" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["dataset_id"] is not None:
            _path_params["dataset_id"] = _params["dataset_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["dataset_update"] is not None:
            _body_params = _params["dataset_update"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "DatasetResponse",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/v1/datasets/{dataset_id}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
