# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel
from pydantic import constr
from pydantic import Field
from pydantic import StrictStr

from superwise_api.client.models.schema_update import SchemaUpdate


class DatasetUpdate(BaseModel):
    """
    DatasetUpdate
    """

    name: Optional[constr(strict=True, max_length=100, min_length=1)] = "NOT_SET"
    description: Optional[StrictStr] = None
    id: Optional[constr(strict=True, min_length=1)] = "NOT_SET"
    var_schema: Optional[SchemaUpdate] = Field(None, alias="schema")
    __properties = ["name", "description", "id", "schema"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetUpdate:
        """Create an instance of DatasetUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict["schema"] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetUpdate:
        """Create an instance of DatasetUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetUpdate.parse_obj(obj)

        _obj = DatasetUpdate.parse_obj(
            {
                "name": obj.get("name") if obj.get("name") is not None else "NOT_SET",
                "description": obj.get("description"),
                "id": obj.get("id") if obj.get("id") is not None else "NOT_SET",
                "var_schema": SchemaUpdate.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            }
        )
        return _obj
