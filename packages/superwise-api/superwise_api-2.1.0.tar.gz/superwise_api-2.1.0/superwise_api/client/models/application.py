# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import constr
from pydantic import Field
from pydantic import StrictStr

from superwise_api.client.models.application_model import ApplicationModel
from superwise_api.client.models.created_at import CreatedAt
from superwise_api.client.models.prompt import Prompt
from superwise_api.client.models.tool_def_output import ToolDefOutput
from superwise_api.client.models.updated_at import UpdatedAt


class Application(BaseModel):
    """
    Application
    """

    id: StrictStr = Field(...)
    created_by: StrictStr = Field(...)
    created_at: Optional[CreatedAt] = None
    updated_at: Optional[UpdatedAt] = None
    name: StrictStr = Field(...)
    model: Optional[ApplicationModel] = None
    prompt: Prompt = Field(...)
    dataset_id: StrictStr = Field(...)
    tools: conlist(ToolDefOutput) = Field(...)
    url: constr(strict=True, max_length=2083, min_length=1) = Field(...)
    __properties = [
        "id",
        "created_by",
        "created_at",
        "updated_at",
        "name",
        "model",
        "prompt",
        "dataset_id",
        "tools",
        "url",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Application:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict["created_at"] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict["updated_at"] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt
        if self.prompt:
            _dict["prompt"] = self.prompt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tools"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Application:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Application.parse_obj(obj)

        _obj = Application.parse_obj(
            {
                "id": obj.get("id"),
                "created_by": obj.get("created_by"),
                "created_at": CreatedAt.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
                "updated_at": UpdatedAt.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None,
                "name": obj.get("name"),
                "model": ApplicationModel.from_dict(obj.get("model")) if obj.get("model") is not None else None,
                "prompt": Prompt.from_dict(obj.get("prompt")) if obj.get("prompt") is not None else None,
                "dataset_id": obj.get("dataset_id"),
                "tools": [ToolDefOutput.from_dict(_item) for _item in obj.get("tools")]
                if obj.get("tools") is not None
                else None,
                "url": obj.get("url"),
            }
        )
        return _obj
