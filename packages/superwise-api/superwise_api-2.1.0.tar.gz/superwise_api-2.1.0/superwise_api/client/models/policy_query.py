# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field

from superwise_api.client.models.dashboard_item_query_order import DashboardItemQueryOrder


class PolicyQuery(BaseModel):
    """
    PolicyQuery
    """

    measures: Optional[Any] = Field(...)
    order: Optional[DashboardItemQueryOrder] = None
    dimensions: Optional[Any] = None
    timezone: Optional[Any] = None
    filters: Optional[Any] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["measures", "order", "dimensions", "timezone", "filters"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyQuery:
        """Create an instance of PolicyQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={"additional_properties"}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict["order"] = self.order.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if measures (nullable) is None
        # and __fields_set__ contains the field
        if self.measures is None and "measures" in self.__fields_set__:
            _dict["measures"] = None

        # set to None if dimensions (nullable) is None
        # and __fields_set__ contains the field
        if self.dimensions is None and "dimensions" in self.__fields_set__:
            _dict["dimensions"] = None

        # set to None if timezone (nullable) is None
        # and __fields_set__ contains the field
        if self.timezone is None and "timezone" in self.__fields_set__:
            _dict["timezone"] = None

        # set to None if filters (nullable) is None
        # and __fields_set__ contains the field
        if self.filters is None and "filters" in self.__fields_set__:
            _dict["filters"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyQuery:
        """Create an instance of PolicyQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyQuery.parse_obj(obj)

        _obj = PolicyQuery.parse_obj(
            {
                "measures": obj.get("measures"),
                "order": DashboardItemQueryOrder.from_dict(obj.get("order")) if obj.get("order") is not None else None,
                "dimensions": obj.get("dimensions"),
                "timezone": obj.get("timezone"),
                "filters": obj.get("filters"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
