# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field
from pydantic import StrictInt
from pydantic import StrictStr

from superwise_api.client.models.filter import Filter
from superwise_api.client.models.order import Order
from superwise_api.client.models.time_dimension import TimeDimension


class Query(BaseModel):
    """
    Query
    """

    measures: conlist(StrictStr) = Field(...)
    order: Optional[Order] = None
    dimensions: Optional[conlist(StrictStr)] = None
    timezone: Optional[StrictStr] = "UTC"
    filters: Optional[conlist(Filter)] = None
    limit: StrictInt = Field(...)
    time_dimensions: conlist(TimeDimension) = Field(...)
    __properties = ["measures", "order", "dimensions", "timezone", "filters", "limit", "time_dimensions"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Query:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict["order"] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict["filters"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_dimensions (list)
        _items = []
        if self.time_dimensions:
            for _item in self.time_dimensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["time_dimensions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Query:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Query.parse_obj(obj)

        _obj = Query.parse_obj(
            {
                "measures": obj.get("measures"),
                "order": Order.from_dict(obj.get("order")) if obj.get("order") is not None else None,
                "dimensions": obj.get("dimensions"),
                "timezone": obj.get("timezone") if obj.get("timezone") is not None else "UTC",
                "filters": [Filter.from_dict(_item) for _item in obj.get("filters")]
                if obj.get("filters") is not None
                else None,
                "limit": obj.get("limit"),
                "time_dimensions": [TimeDimension.from_dict(_item) for _item in obj.get("time_dimensions")]
                if obj.get("time_dimensions") is not None
                else None,
            }
        )
        return _obj
