# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import validator

from superwise_api.client.models.aws_credentials_request import AWSCredentialsRequest
from superwise_api.client.models.source_s3_params import SourceS3Params


class SourceCreateS3(BaseModel):
    """
    SourceCreateS3
    """

    name: Optional[Any] = Field(...)
    type: Optional[Any] = None
    credentials: Optional[AWSCredentialsRequest] = None
    params: SourceS3Params = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "type", "credentials", "params"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("S3"):
            raise ValueError("must be one of enum values ('S3')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SourceCreateS3:
        """Create an instance of SourceCreateS3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={"additional_properties"}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            _dict["credentials"] = self.credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict["params"] = self.params.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict["type"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SourceCreateS3:
        """Create an instance of SourceCreateS3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SourceCreateS3.parse_obj(obj)

        _obj = SourceCreateS3.parse_obj(
            {
                "name": obj.get("name"),
                "type": obj.get("type"),
                "credentials": AWSCredentialsRequest.from_dict(obj.get("credentials"))
                if obj.get("credentials") is not None
                else None,
                "params": SourceS3Params.from_dict(obj.get("params")) if obj.get("params") is not None else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
