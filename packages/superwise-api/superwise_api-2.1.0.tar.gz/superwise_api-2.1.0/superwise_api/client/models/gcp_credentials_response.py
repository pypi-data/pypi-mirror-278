# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import StrictStr
from pydantic import validator


class GCPCredentialsResponse(BaseModel):
    """
    GCPCredentialsResponse
    """

    credentials_type: Optional[StrictStr] = "GCP"
    service_account: Optional[Any] = None
    __properties = ["credentials_type", "service_account"]

    @validator("credentials_type")
    def credentials_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("GCP"):
            raise ValueError("must be one of enum values ('GCP')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GCPCredentialsResponse:
        """Create an instance of GCPCredentialsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GCPCredentialsResponse:
        """Create an instance of GCPCredentialsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GCPCredentialsResponse.parse_obj(obj)

        _obj = GCPCredentialsResponse.parse_obj(
            {
                "credentials_type": obj.get("credentials_type") if obj.get("credentials_type") is not None else "GCP",
            }
        )
        return _obj
