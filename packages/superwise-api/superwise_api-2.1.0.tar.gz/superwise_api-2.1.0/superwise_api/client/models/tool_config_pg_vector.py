# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictStr

from superwise_api.client.models.embedding_model import EmbeddingModel


class ToolConfigPGVector(BaseModel):
    """
    ToolConfigPGVector
    """

    type: Optional[Any] = Field(...)
    connection_string: StrictStr = Field(...)
    table_name: StrictStr = Field(...)
    embedding_model: EmbeddingModel = Field(...)
    __properties = ["type", "connection_string", "table_name", "embedding_model"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToolConfigPGVector:
        """Create an instance of ToolConfigPGVector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of embedding_model
        if self.embedding_model:
            _dict["embedding_model"] = self.embedding_model.to_dict()
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict["type"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ToolConfigPGVector:
        """Create an instance of ToolConfigPGVector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ToolConfigPGVector.parse_obj(obj)

        _obj = ToolConfigPGVector.parse_obj(
            {
                "type": obj.get("type"),
                "connection_string": obj.get("connection_string"),
                "table_name": obj.get("table_name"),
                "embedding_model": EmbeddingModel.from_dict(obj.get("embedding_model"))
                if obj.get("embedding_model") is not None
                else None,
            }
        )
        return _obj
