# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel
from pydantic import StrictStr

from superwise_api.client.models.ingest_type import IngestType


class DatasetSourceUpdate(BaseModel):
    """
    DatasetSourceUpdate
    """

    id: Optional[StrictStr] = None
    dataset_id: Optional[StrictStr] = None
    source_id: Optional[StrictStr] = None
    folder: Optional[StrictStr] = None
    query: Optional[StrictStr] = None
    ingest_type: Optional[IngestType] = None
    created_by: Optional[StrictStr] = None
    __properties = ["id", "dataset_id", "source_id", "folder", "query", "ingest_type", "created_by"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetSourceUpdate:
        """Create an instance of DatasetSourceUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetSourceUpdate:
        """Create an instance of DatasetSourceUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetSourceUpdate.parse_obj(obj)

        _obj = DatasetSourceUpdate.parse_obj(
            {
                "id": obj.get("id"),
                "dataset_id": obj.get("dataset_id"),
                "source_id": obj.get("source_id"),
                "folder": obj.get("folder"),
                "query": obj.get("query"),
                "ingest_type": obj.get("ingest_type"),
                "created_by": obj.get("created_by"),
            }
        )
        return _obj
