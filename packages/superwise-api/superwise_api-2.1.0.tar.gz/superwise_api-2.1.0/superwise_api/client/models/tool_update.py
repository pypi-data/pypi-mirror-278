# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel

from superwise_api.client.models.config1 import Config1
from superwise_api.client.models.description import Description
from superwise_api.client.models.tool_name_update import ToolNameUpdate


class ToolUpdate(BaseModel):
    """
    ToolUpdate
    """

    name: Optional[ToolNameUpdate] = None
    description: Optional[Description] = None
    config: Optional[Config1] = None
    __properties = ["name", "description", "config"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToolUpdate:
        """Create an instance of ToolUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict["description"] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict["config"] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ToolUpdate:
        """Create an instance of ToolUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ToolUpdate.parse_obj(obj)

        _obj = ToolUpdate.parse_obj(
            {
                "name": ToolNameUpdate.from_dict(obj.get("name")) if obj.get("name") is not None else None,
                "description": Description.from_dict(obj.get("description"))
                if obj.get("description") is not None
                else None,
                "config": Config1.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            }
        )
        return _obj
