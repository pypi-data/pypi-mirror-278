# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field
from pydantic import StrictStr

from superwise_api.client.models.dataset_tag import DatasetTag
from superwise_api.client.models.model_schema import ModelSchema


class DatasetResponse(BaseModel):
    """
    DatasetResponse
    """

    id: StrictStr = Field(..., alias="_id")
    id: StrictStr = Field(...)
    name: StrictStr = Field(..., description="A descriptive name for this dataset")
    description: Optional[StrictStr] = Field(None, description="Relevant information about the context of this dataset")
    model_version_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    created_by: StrictStr = Field(...)
    tags: Optional[conlist(DatasetTag)] = None
    var_schema: Optional[ModelSchema] = Field(None, alias="schema")
    tenant_id: Optional[StrictStr] = None
    __properties = [
        "_id",
        "id",
        "name",
        "description",
        "model_version_id",
        "created_at",
        "updated_at",
        "created_by",
        "tags",
        "schema",
        "tenant_id",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetResponse:
        """Create an instance of DatasetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict["schema"] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetResponse:
        """Create an instance of DatasetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetResponse.parse_obj(obj)

        _obj = DatasetResponse.parse_obj(
            {
                "id": obj.get("_id"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "model_version_id": obj.get("model_version_id"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "created_by": obj.get("created_by"),
                "tags": [DatasetTag.from_dict(_item) for _item in obj.get("tags")]
                if obj.get("tags") is not None
                else None,
                "var_schema": ModelSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
                "tenant_id": obj.get("tenant_id"),
            }
        )
        return _obj
