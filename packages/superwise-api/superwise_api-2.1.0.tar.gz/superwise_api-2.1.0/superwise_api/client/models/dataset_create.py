# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field

from superwise_api.client.models.model_schema import ModelSchema


class DatasetCreate(BaseModel):
    """
    DatasetCreate
    """

    name: Optional[Any] = Field(..., description="A descriptive name for this dataset")
    description: Optional[Any] = Field(None, description="Relevant information about the context of this dataset")
    id: Optional[Any] = None
    model_version_id: Optional[Any] = None
    tags: Optional[Any] = None
    var_schema: Optional[ModelSchema] = Field(None, alias="schema")
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "description", "id", "model_version_id", "tags", "schema"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetCreate:
        """Create an instance of DatasetCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={"additional_properties"}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict["schema"] = self.var_schema.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if model_version_id (nullable) is None
        # and __fields_set__ contains the field
        if self.model_version_id is None and "model_version_id" in self.__fields_set__:
            _dict["model_version_id"] = None

        # set to None if tags (nullable) is None
        # and __fields_set__ contains the field
        if self.tags is None and "tags" in self.__fields_set__:
            _dict["tags"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetCreate:
        """Create an instance of DatasetCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetCreate.parse_obj(obj)

        _obj = DatasetCreate.parse_obj(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "id": obj.get("id"),
                "model_version_id": obj.get("model_version_id"),
                "tags": obj.get("tags"),
                "var_schema": ModelSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
