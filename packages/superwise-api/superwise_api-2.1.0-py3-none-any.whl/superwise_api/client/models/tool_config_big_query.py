# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictStr


class ToolConfigBigQuery(BaseModel):
    """
    ToolConfigBigQuery
    """

    type: Optional[Any] = Field(...)
    project_id: StrictStr = Field(...)
    dataset_id: StrictStr = Field(...)
    service_account: Any = Field(...)
    __properties = ["type", "project_id", "dataset_id", "service_account"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToolConfigBigQuery:
        """Create an instance of ToolConfigBigQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict["type"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ToolConfigBigQuery:
        """Create an instance of ToolConfigBigQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ToolConfigBigQuery.parse_obj(obj)

        _obj = ToolConfigBigQuery.parse_obj(
            {
                "type": obj.get("type"),
                "project_id": obj.get("project_id"),
                "dataset_id": obj.get("dataset_id"),
            }
        )
        return _obj
