# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel
from pydantic import constr
from pydantic import Field
from pydantic import validator


class SourceGCSParams(BaseModel):
    """
    SourceGCSParams
    """

    bucket_name: constr(strict=True) = Field(...)
    topic_name: constr(strict=True) = Field(...)
    __properties = ["bucket_name", "topic_name"]

    @validator("bucket_name")
    def bucket_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9][a-z0-9_-]{1,61}[a-z0-9](\.[a-z0-9][a-z0-9_-]{1,61}[a-z0-9])*$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9][a-z0-9_-]{1,61}[a-z0-9](\.[a-z0-9][a-z0-9_-]{1,61}[a-z0-9])*$/"
            )
        return value

    @validator("topic_name")
    def topic_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^projects\/[a-z][a-z0-9-]{3,29}\/topics\/[a-zA-Z][-\w.~%+]{2,254}$", value):
            raise ValueError(
                r"must validate the regular expression /^projects\/[a-z][a-z0-9-]{3,29}\/topics\/[a-zA-Z][-\w.~%+]{2,254}$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SourceGCSParams:
        """Create an instance of SourceGCSParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SourceGCSParams:
        """Create an instance of SourceGCSParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SourceGCSParams.parse_obj(obj)

        _obj = SourceGCSParams.parse_obj({"bucket_name": obj.get("bucket_name"), "topic_name": obj.get("topic_name")})
        return _obj
