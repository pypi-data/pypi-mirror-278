# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import Any
from typing import List
from typing import Optional
from typing import TYPE_CHECKING
from typing import Union

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictStr
from pydantic import ValidationError
from pydantic import validator

from superwise_api.client.models.source_create_azure import SourceCreateAzure
from superwise_api.client.models.source_create_gcs import SourceCreateGCS
from superwise_api.client.models.source_create_s3 import SourceCreateS3

SOURCECREATE_ANY_OF_SCHEMAS = ["SourceCreateAzure", "SourceCreateGCS", "SourceCreateS3"]


class SourceCreate(BaseModel):
    """
    SourceCreate
    """

    # data type: SourceCreateGCS
    anyof_schema_1_validator: Optional[SourceCreateGCS] = None
    # data type: SourceCreateAzure
    anyof_schema_2_validator: Optional[SourceCreateAzure] = None
    # data type: SourceCreateS3
    anyof_schema_3_validator: Optional[SourceCreateS3] = None
    if TYPE_CHECKING:
        actual_instance: Union[SourceCreateAzure, SourceCreateGCS, SourceCreateS3]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(SOURCECREATE_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = SourceCreate.construct()
        error_messages = []
        # validate data type: SourceCreateGCS
        if not isinstance(v, SourceCreateGCS):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SourceCreateGCS`")
        else:
            return v

        # validate data type: SourceCreateAzure
        if not isinstance(v, SourceCreateAzure):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SourceCreateAzure`")
        else:
            return v

        # validate data type: SourceCreateS3
        if not isinstance(v, SourceCreateS3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SourceCreateS3`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in SourceCreate with anyOf schemas: SourceCreateAzure, SourceCreateGCS, SourceCreateS3. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> SourceCreate:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> SourceCreate:
        """Returns the object represented by the json string"""
        instance = SourceCreate.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[SourceCreateGCS] = None
        try:
            instance.actual_instance = SourceCreateGCS.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[SourceCreateAzure] = None
        try:
            instance.actual_instance = SourceCreateAzure.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[SourceCreateS3] = None
        try:
            instance.actual_instance = SourceCreateS3.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into SourceCreate with anyOf schemas: SourceCreateAzure, SourceCreateGCS, SourceCreateS3. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
