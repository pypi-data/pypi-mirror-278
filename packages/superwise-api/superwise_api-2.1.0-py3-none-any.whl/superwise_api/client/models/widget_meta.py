# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictInt

from superwise_api.client.models.visualization_type import VisualizationType


class WidgetMeta(BaseModel):
    """
    WidgetMeta
    """

    visualization_type: VisualizationType = Field(...)
    x_pos: StrictInt = Field(...)
    y_pos: StrictInt = Field(...)
    height: Optional[StrictInt] = 0
    width: Optional[StrictInt] = 0
    __properties = ["visualization_type", "x_pos", "y_pos", "height", "width"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WidgetMeta:
        """Create an instance of WidgetMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WidgetMeta:
        """Create an instance of WidgetMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WidgetMeta.parse_obj(obj)

        _obj = WidgetMeta.parse_obj(
            {
                "visualization_type": obj.get("visualization_type"),
                "x_pos": obj.get("x_pos"),
                "y_pos": obj.get("y_pos"),
                "height": obj.get("height") if obj.get("height") is not None else 0,
                "width": obj.get("width") if obj.get("width") is not None else 0,
            }
        )
        return _obj
