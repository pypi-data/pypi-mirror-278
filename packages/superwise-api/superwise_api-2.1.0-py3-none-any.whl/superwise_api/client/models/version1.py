# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import Any
from typing import List
from typing import Optional
from typing import TYPE_CHECKING
from typing import Union

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictStr
from pydantic import ValidationError
from pydantic import validator

from superwise_api.client.models.google_model_version import GoogleModelVersion
from superwise_api.client.models.open_ai_model_version import OpenAIModelVersion

VERSION1_ANY_OF_SCHEMAS = ["GoogleModelVersion", "OpenAIModelVersion", "str"]


class Version1(BaseModel):
    """
    Version1
    """

    # data type: OpenAIModelVersion
    anyof_schema_1_validator: Optional[OpenAIModelVersion] = None
    # data type: GoogleModelVersion
    anyof_schema_2_validator: Optional[GoogleModelVersion] = None
    # data type: str
    anyof_schema_3_validator: Optional[StrictStr] = None
    if TYPE_CHECKING:
        actual_instance: Union[GoogleModelVersion, OpenAIModelVersion, str]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(VERSION1_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = Version1.construct()
        error_messages = []
        # validate data type: OpenAIModelVersion
        if not isinstance(v, OpenAIModelVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpenAIModelVersion`")
        else:
            return v

        # validate data type: GoogleModelVersion
        if not isinstance(v, GoogleModelVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleModelVersion`")
        else:
            return v

        # validate data type: str
        try:
            instance.anyof_schema_3_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in Version1 with anyOf schemas: GoogleModelVersion, OpenAIModelVersion, str. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Version1:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Version1:
        """Returns the object represented by the json string"""
        instance = Version1.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[OpenAIModelVersion] = None
        try:
            instance.actual_instance = OpenAIModelVersion.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[GoogleModelVersion] = None
        try:
            instance.actual_instance = GoogleModelVersion.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.anyof_schema_3_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_3_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into Version1 with anyOf schemas: GoogleModelVersion, OpenAIModelVersion, str. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
