# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import constr

from superwise_api.client.models.dashboard_item_query import DashboardItemQuery
from superwise_api.client.models.datasource import Datasource
from superwise_api.client.models.query_type import QueryType
from superwise_api.client.models.visualization_type import VisualizationType


class DashboardItemUpdate(BaseModel):
    """
    DashboardItemUpdate
    """

    name: Optional[constr(strict=True, max_length=50, min_length=1)] = None
    query_type: Optional[QueryType] = None
    datasource: Optional[Datasource] = None
    query: Optional[DashboardItemQuery] = None
    item_metadata: Optional[Any] = None
    visualization_type: Optional[VisualizationType] = None
    __properties = ["name", "query_type", "datasource", "query", "item_metadata", "visualization_type"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DashboardItemUpdate:
        """Create an instance of DashboardItemUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict["query"] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DashboardItemUpdate:
        """Create an instance of DashboardItemUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DashboardItemUpdate.parse_obj(obj)

        _obj = DashboardItemUpdate.parse_obj(
            {
                "name": obj.get("name"),
                "query_type": obj.get("query_type"),
                "datasource": obj.get("datasource"),
                "query": DashboardItemQuery.from_dict(obj.get("query")) if obj.get("query") is not None else None,
                "visualization_type": obj.get("visualization_type"),
            }
        )
        return _obj
