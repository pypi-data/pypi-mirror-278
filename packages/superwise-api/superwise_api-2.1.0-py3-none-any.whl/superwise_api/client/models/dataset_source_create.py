# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field

from superwise_api.client.models.ingest_type import IngestType


class DatasetSourceCreate(BaseModel):
    """
    DatasetSourceCreate
    """

    dataset_id: Optional[Any] = Field(...)
    source_id: Optional[Any] = Field(...)
    folder: Optional[Any] = None
    query: Optional[Any] = None
    created_at: Optional[Any] = None
    updated_at: Optional[Any] = None
    ingest_type: Optional[IngestType] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["dataset_id", "source_id", "folder", "query", "created_at", "updated_at", "ingest_type"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetSourceCreate:
        """Create an instance of DatasetSourceCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={"additional_properties"}, exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if dataset_id (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset_id is None and "dataset_id" in self.__fields_set__:
            _dict["dataset_id"] = None

        # set to None if source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.source_id is None and "source_id" in self.__fields_set__:
            _dict["source_id"] = None

        # set to None if folder (nullable) is None
        # and __fields_set__ contains the field
        if self.folder is None and "folder" in self.__fields_set__:
            _dict["folder"] = None

        # set to None if query (nullable) is None
        # and __fields_set__ contains the field
        if self.query is None and "query" in self.__fields_set__:
            _dict["query"] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict["created_at"] = None

        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict["updated_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetSourceCreate:
        """Create an instance of DatasetSourceCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetSourceCreate.parse_obj(obj)

        _obj = DatasetSourceCreate.parse_obj(
            {
                "dataset_id": obj.get("dataset_id"),
                "source_id": obj.get("source_id"),
                "folder": obj.get("folder"),
                "query": obj.get("query"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "ingest_type": obj.get("ingest_type"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
