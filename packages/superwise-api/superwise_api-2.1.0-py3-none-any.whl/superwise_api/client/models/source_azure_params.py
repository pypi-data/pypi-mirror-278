# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel
from pydantic import constr
from pydantic import Field
from pydantic import StrictStr
from pydantic import validator


class SourceAzureParams(BaseModel):
    """
    SourceAzureParams
    """

    event_hub_namespace_id: constr(strict=True) = Field(...)
    event_hub_name: StrictStr = Field(...)
    storage_account_id: constr(strict=True) = Field(...)
    __properties = ["event_hub_namespace_id", "event_hub_name", "storage_account_id"]

    @validator("event_hub_namespace_id")
    def event_hub_namespace_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(
            r"^\/subscriptions\/[a-z0-9-]+\/resourceGroups\/[\w.()-]+\/providers\/Microsoft\.EventHub\/namespaces\/[A-Za-z0-9-]{6,50}$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^\/subscriptions\/[a-z0-9-]+\/resourceGroups\/[\w.()-]+\/providers\/Microsoft\.EventHub\/namespaces\/[A-Za-z0-9-]{6,50}$/"
            )
        return value

    @validator("storage_account_id")
    def storage_account_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(
            r"^\/subscriptions\/[a-z0-9-]+\/resourceGroups\/[\w.()-]+\/providers\/Microsoft\.Storage\/storageAccounts\/[a-z0-9]{3,24}$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^\/subscriptions\/[a-z0-9-]+\/resourceGroups\/[\w.()-]+\/providers\/Microsoft\.Storage\/storageAccounts\/[a-z0-9]{3,24}$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SourceAzureParams:
        """Create an instance of SourceAzureParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SourceAzureParams:
        """Create an instance of SourceAzureParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SourceAzureParams.parse_obj(obj)

        _obj = SourceAzureParams.parse_obj(
            {
                "event_hub_namespace_id": obj.get("event_hub_namespace_id"),
                "event_hub_name": obj.get("event_hub_name"),
                "storage_account_id": obj.get("storage_account_id"),
            }
        )
        return _obj
