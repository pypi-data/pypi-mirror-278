# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field
from pydantic import StrictStr

from superwise_api.client.models.application_model import ApplicationModel
from superwise_api.client.models.prompt import Prompt
from superwise_api.client.models.tool_def_input import ToolDefInput


class ApplicationConfigPayload(BaseModel):
    """
    ApplicationConfigPayload
    """

    model: Optional[ApplicationModel] = None
    prompt: Optional[Prompt] = None
    tools: conlist(ToolDefInput) = Field(...)
    name: StrictStr = Field(...)
    __properties = ["model", "prompt", "tools", "name"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplicationConfigPayload:
        """Create an instance of ApplicationConfigPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=False)
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt
        if self.prompt:
            _dict["prompt"] = self.prompt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tools"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplicationConfigPayload:
        """Create an instance of ApplicationConfigPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApplicationConfigPayload.parse_obj(obj)

        _obj = ApplicationConfigPayload.parse_obj(
            {
                "model": ApplicationModel.from_dict(obj.get("model")) if obj.get("model") is not None else None,
                "prompt": Prompt.from_dict(obj.get("prompt")) if obj.get("prompt") is not None else None,
                "tools": [ToolDefInput.from_dict(_item) for _item in obj.get("tools")]
                if obj.get("tools") is not None
                else None,
                "name": obj.get("name"),
            }
        )
        return _obj
