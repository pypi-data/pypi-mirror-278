# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List
from typing import Optional
from typing import Union

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field
from pydantic import StrictBool
from pydantic import StrictFloat
from pydantic import StrictInt
from pydantic import StrictStr

from superwise_api.client.models.alert_on_status_direction import AlertOnStatusDirection
from superwise_api.client.models.policy_query import PolicyQuery
from superwise_api.client.models.policy_status import PolicyStatus
from superwise_api.client.models.threshold_settings import StaticThresholdSettings, MovingAverageThresholdSettings
from superwise_api.client.models.time_range_unit import TimeRangeUnit
from superwise_api.client.models.validation_result import ValidationResult


class PolicyResponse(BaseModel):
    """
    PolicyResponse
    """

    id: StrictStr = Field(...)
    name: StrictStr = Field(..., description="A descriptive name for this policy")
    created_by: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    last_evaluation: Optional[datetime] = None
    next_evaluation: datetime = Field(...)
    status: Optional[PolicyStatus] = None
    query: PolicyQuery = Field(...)
    cron_expression: StrictStr = Field(...)
    threshold_settings: Union[StaticThresholdSettings, MovingAverageThresholdSettings] = Field(
        discriminator="threshold_type"
    )
    destination_ids: Optional[conlist(StrictStr)] = None
    alert_on_status: AlertOnStatusDirection = Field(...)
    alert_on_policy_level: StrictBool = Field(...)
    tenant_id: StrictStr = Field(...)
    dataset_id: StrictStr = Field(...)
    time_range_field: StrictStr = Field(...)
    time_range_unit: TimeRangeUnit = Field(...)
    time_range_value: StrictInt = Field(...)
    status_reason: Optional[ValidationResult] = None
    __properties = [
        "id",
        "name",
        "created_by",
        "created_at",
        "updated_at",
        "last_evaluation",
        "next_evaluation",
        "status",
        "query",
        "cron_expression",
        "condition_above_value",
        "condition_below_value",
        "destination_ids",
        "alert_on_status",
        "alert_on_policy_level",
        "tenant_id",
        "dataset_id",
        "time_range_field",
        "time_range_unit",
        "time_range_value",
        "status_reason",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyResponse:
        """Create an instance of PolicyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict["query"] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_reason
        if self.status_reason:
            _dict["status_reason"] = self.status_reason.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyResponse:
        """Create an instance of PolicyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyResponse.parse_obj(obj)

        _obj = PolicyResponse.parse_obj(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "created_by": obj.get("created_by"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "last_evaluation": obj.get("last_evaluation"),
                "next_evaluation": obj.get("next_evaluation"),
                "status": obj.get("status"),
                "query": PolicyQuery.from_dict(obj.get("query")) if obj.get("query") is not None else None,
                "cron_expression": obj.get("cron_expression"),
                "condition_above_value": obj.get("condition_above_value"),
                "condition_below_value": obj.get("condition_below_value"),
                "destination_ids": obj.get("destination_ids"),
                "alert_on_status": obj.get("alert_on_status"),
                "alert_on_policy_level": obj.get("alert_on_policy_level"),
                "tenant_id": obj.get("tenant_id"),
                "dataset_id": obj.get("dataset_id"),
                "time_range_field": obj.get("time_range_field"),
                "time_range_unit": obj.get("time_range_unit"),
                "time_range_value": obj.get("time_range_value"),
                "status_reason": ValidationResult.from_dict(obj.get("status_reason"))
                if obj.get("status_reason") is not None
                else None,
            }
        )
        return _obj
