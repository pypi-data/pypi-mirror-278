# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field

from superwise_api.client.models.application_response import ApplicationResponse
from superwise_api.client.models.page import Page
from superwise_api.client.models.pages import Pages
from superwise_api.client.models.size import Size
from superwise_api.client.models.total import Total


class PageApplicationResponse(BaseModel):
    """
    PageApplicationResponse
    """

    items: conlist(ApplicationResponse) = Field(...)
    total: Total = Field(...)
    page: Page = Field(...)
    size: Size = Field(...)
    pages: Optional[Pages] = None
    __properties = ["items", "total", "page", "size", "pages"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PageApplicationResponse:
        """Create an instance of PageApplicationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict["items"] = _items
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict["total"] = self.total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page
        if self.page:
            _dict["page"] = self.page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict["size"] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pages
        if self.pages:
            _dict["pages"] = self.pages.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PageApplicationResponse:
        """Create an instance of PageApplicationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PageApplicationResponse.parse_obj(obj)

        _obj = PageApplicationResponse.parse_obj(
            {
                "items": [ApplicationResponse.from_dict(_item) for _item in obj.get("items")]
                if obj.get("items") is not None
                else None,
                "total": Total.from_dict(obj.get("total")) if obj.get("total") is not None else None,
                "page": Page.from_dict(obj.get("page")) if obj.get("page") is not None else None,
                "size": Size.from_dict(obj.get("size")) if obj.get("size") is not None else None,
                "pages": Pages.from_dict(obj.get("pages")) if obj.get("pages") is not None else None,
            }
        )
        return _obj
