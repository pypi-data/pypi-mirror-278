# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel
from pydantic import constr
from pydantic import Field
from pydantic import validator


class SourceS3Params(BaseModel):
    """
    SourceS3Params
    """

    bucket_arn: constr(strict=True) = Field(...)
    queue_arn: constr(strict=True) = Field(...)
    __properties = ["bucket_arn", "queue_arn"]

    @validator("bucket_arn")
    def bucket_arn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(
            r"^arn:aws(-cn|-us-gov)?:s3:([a-z]{2}(-gov)?-[a-z]+-\d)?:(\d{12})?:[0-9a-z][0-9a-z.-]{2,62}$", value
        ):
            raise ValueError(
                r"must validate the regular expression /^arn:aws(-cn|-us-gov)?:s3:([a-z]{2}(-gov)?-[a-z]+-\d)?:(\d{12})?:[0-9a-z][0-9a-z.-]{2,62}$/"
            )
        return value

    @validator("queue_arn")
    def queue_arn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^arn:aws(-cn|-us-gov)?:sqs:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:.+$", value):
            raise ValueError(
                r"must validate the regular expression /^arn:aws(-cn|-us-gov)?:sqs:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:.+$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SourceS3Params:
        """Create an instance of SourceS3Params from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SourceS3Params:
        """Create an instance of SourceS3Params from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SourceS3Params.parse_obj(obj)

        _obj = SourceS3Params.parse_obj({"bucket_arn": obj.get("bucket_arn"), "queue_arn": obj.get("queue_arn")})
        return _obj
