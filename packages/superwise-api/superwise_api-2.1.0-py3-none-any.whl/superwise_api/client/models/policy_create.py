# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Union

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field
from pydantic import StrictBool
from pydantic import StrictInt
from pydantic import StrictStr

from superwise_api.client.models.alert_on_status_direction import AlertOnStatusDirection
from superwise_api.client.models.policy_query import PolicyQuery
from superwise_api.client.models.threshold_settings import ThresholdTypes, StaticThresholdSettings, \
    MovingAverageThresholdSettings
from superwise_api.client.models.time_range_unit import TimeRangeUnit


class PolicyCreate(BaseModel):
    """
    PolicyCreate
    """

    name: StrictStr = Field(..., description="A descriptive name for this policy")
    query: PolicyQuery = Field(..., description="Cube.js query")
    cron_expression: StrictStr = Field(..., description="Cron expression for policy evaluation")
    threshold_settings: Union[StaticThresholdSettings, MovingAverageThresholdSettings] = Field(
        discriminator="threshold_type"
    )
    destination_ids: conlist(StrictStr) = Field(
        ..., description="List of communication channels to get notified through"
    )
    alert_on_status: AlertOnStatusDirection = Field(
        ..., description="Trigger policy action if the value is above/below"
    )
    alert_on_policy_level: StrictBool = Field(..., description="Trigger policy action on a single group/entire groups")
    dataset_id: StrictStr = Field(..., description="The dataset this policy is monitoring")
    time_range_field: StrictStr = Field(..., description="Time feature to scan")
    time_range_unit: TimeRangeUnit = Field(..., description="Time unit to scan")
    time_range_value: StrictInt = Field(..., description="Time value to scan")
    __properties = [
        "name",
        "query",
        "cron_expression",
        "threshold_settings",
        "destination_ids",
        "alert_on_status",
        "alert_on_policy_level",
        "dataset_id",
        "time_range_field",
        "time_range_unit",
        "time_range_value",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyCreate:
        """Create an instance of PolicyCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict["query"] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyCreate:
        """Create an instance of PolicyCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyCreate.parse_obj(obj)

        threshold_settings = obj.get("threshold_settings")
        if threshold_settings is not None:
            if threshold_settings.get("threshold_type") == ThresholdTypes.STATIC.value:
                _threshold_settings = StaticThresholdSettings.parse_obj(threshold_settings)
            elif threshold_settings.get("threshold_type") == ThresholdTypes.MOVING_AVERAGE.value:
                _threshold_settings = MovingAverageThresholdSettings.parse_obj(threshold_settings)
            else:
                raise ValueError("Invalid value for threshold_settings.threshold_type")
        else:
            _threshold_settings = None

        _obj = PolicyCreate.parse_obj(
            {
                "name": obj.get("name"),
                "query": PolicyQuery.from_dict(obj.get("query")) if obj.get("query") is not None else None,
                "cron_expression": obj.get("cron_expression"),
                "threshold_settings": _threshold_settings,
                "destination_ids": obj.get("destination_ids"),
                "alert_on_status": obj.get("alert_on_status"),
                "alert_on_policy_level": obj.get("alert_on_policy_level"),
                "dataset_id": obj.get("dataset_id"),
                "time_range_field": obj.get("time_range_field"),
                "time_range_unit": obj.get("time_range_unit"),
                "time_range_value": obj.get("time_range_value"),
            }
        )
        return _obj
