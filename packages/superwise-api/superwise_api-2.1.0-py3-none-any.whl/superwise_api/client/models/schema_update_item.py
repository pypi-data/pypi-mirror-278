# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel

from superwise_api.client.models.type import Type


class SchemaUpdateItem(BaseModel):
    """
    SchemaUpdateItem
    """

    name: Optional[Any] = None
    type: Optional[Type] = None
    default_value: Optional[Any] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "type", "default_value"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SchemaUpdateItem:
        """Create an instance of SchemaUpdateItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={"additional_properties"}, exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if default_value (nullable) is None
        # and __fields_set__ contains the field
        if self.default_value is None and "default_value" in self.__fields_set__:
            _dict["default_value"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SchemaUpdateItem:
        """Create an instance of SchemaUpdateItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SchemaUpdateItem.parse_obj(obj)

        _obj = SchemaUpdateItem.parse_obj(
            {"name": obj.get("name"), "type": obj.get("type"), "default_value": obj.get("default_value")}
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
