# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Dict
from typing import Optional

from pydantic import BaseModel
from pydantic import constr


class DestinationUpdateBase(BaseModel):
    """
    DestinationUpdateBase
    """

    name: Optional[constr(strict=True, max_length=300, min_length=1)] = None
    params: Optional[Dict[str, Any]] = None
    __properties = ["name", "params"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DestinationUpdateBase:
        """Create an instance of DestinationUpdateBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DestinationUpdateBase:
        """Create an instance of DestinationUpdateBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DestinationUpdateBase.parse_obj(obj)

        _obj = DestinationUpdateBase.parse_obj({"name": obj.get("name"), "params": obj.get("params")})
        return _obj
