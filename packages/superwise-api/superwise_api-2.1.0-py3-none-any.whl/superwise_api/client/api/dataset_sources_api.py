# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import io
import re  # noqa: F401
import warnings
from typing import Optional

from pydantic import conint
from pydantic import StrictStr
from pydantic import validate_arguments
from pydantic import ValidationError

from superwise_api.client.api_client import ApiClient
from superwise_api.client.api_response import ApiResponse
from superwise_api.client.exceptions import ApiTypeError
from superwise_api.client.exceptions import ApiValueError
from superwise_api.client.models.dataset_source_create import DatasetSourceCreate
from superwise_api.client.models.dataset_source_response import DatasetSourceResponse
from superwise_api.client.models.dataset_source_update import DatasetSourceUpdate
from superwise_api.client.models.ingest_type import IngestType
from superwise_api.client.models.page_dataset_source_response_with_source import PageDatasetSourceResponseWithSource


class DatasetSourcesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_dataset_source(
        self, dataset_source_create: DatasetSourceCreate, **kwargs
    ) -> DatasetSourceResponse:  # noqa: E501
        """Create Dataset Source  # noqa: E501

        Create a new DatasetSource.  - **dataset_id** (str): Required, ID of the dataset. The dataset must already exist. - **source_id** (UUID): Required, Unique Identifier(UUID) of the source data. The source must already exist. - **folder** (str or None): Optional, Path within the bucket to ingest data from.. - **query** (str or None): Optional, Query statement to retrieve data. - **created_at** (datetime or None): Optional, Timestamp when the data source was created. - **updated_at** (datetime or None): Optional, Timestamp when the data source was last updated. - **ingest_type** (IngestType): Optional, Type of data ingestion. Default is IngestType.INSERT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dataset_source(dataset_source_create, async_req=True)
        >>> result = thread.get()

        :param dataset_source_create: (required)
        :type dataset_source_create: DatasetSourceCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DatasetSourceResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_dataset_source_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_dataset_source_with_http_info(dataset_source_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_dataset_source_with_http_info(
        self, dataset_source_create: DatasetSourceCreate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Create Dataset Source  # noqa: E501

        Create a new DatasetSource.  - **dataset_id** (str): Required, ID of the dataset. The dataset must already exist. - **source_id** (UUID): Required, Unique Identifier(UUID) of the source data. The source must already exist. - **folder** (str or None): Optional, Path within the bucket to ingest data from.. - **query** (str or None): Optional, Query statement to retrieve data. - **created_at** (datetime or None): Optional, Timestamp when the data source was created. - **updated_at** (datetime or None): Optional, Timestamp when the data source was last updated. - **ingest_type** (IngestType): Optional, Type of data ingestion. Default is IngestType.INSERT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dataset_source_with_http_info(dataset_source_create, async_req=True)
        >>> result = thread.get()

        :param dataset_source_create: (required)
        :type dataset_source_create: DatasetSourceCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DatasetSourceResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["dataset_source_create"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_dataset_source" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["dataset_source_create"] is not None:
            _body_params = _params["dataset_source_create"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "201": "DatasetSourceResponse",
            "422": None,
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/dataset-sources",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_dataset_source(self, dataset_source_id: StrictStr, **kwargs) -> None:  # noqa: E501
        """Delete Dataset Source  # noqa: E501

        Delete a specific DatasetSource.  - **dataset_source_id**: ID of the dataset source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_source(dataset_source_id, async_req=True)
        >>> result = thread.get()

        :param dataset_source_id: (required)
        :type dataset_source_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_dataset_source_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_dataset_source_with_http_info(dataset_source_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_dataset_source_with_http_info(self, dataset_source_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Dataset Source  # noqa: E501

        Delete a specific DatasetSource.  - **dataset_source_id**: ID of the dataset source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_source_with_http_info(dataset_source_id, async_req=True)
        >>> result = thread.get()

        :param dataset_source_id: (required)
        :type dataset_source_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["dataset_source_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_dataset_source" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["dataset_source_id"] is not None:
            _path_params["dataset_source_id"] = _params["dataset_source_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/dataset-sources/{dataset_source_id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_dataset_source(self, dataset_source_id: StrictStr, **kwargs) -> DatasetSourceResponse:  # noqa: E501
        """Get Dataset Source  # noqa: E501

        Retrieve a Dataset Source based on the dataset_source_id.  - **dataset_source_id**: ID of the dataset source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_source(dataset_source_id, async_req=True)
        >>> result = thread.get()

        :param dataset_source_id: (required)
        :type dataset_source_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DatasetSourceResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_dataset_source_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_dataset_source_with_http_info(dataset_source_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_dataset_source_with_http_info(self, dataset_source_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Dataset Source  # noqa: E501

        Retrieve a Dataset Source based on the dataset_source_id.  - **dataset_source_id**: ID of the dataset source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_source_with_http_info(dataset_source_id, async_req=True)
        >>> result = thread.get()

        :param dataset_source_id: (required)
        :type dataset_source_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DatasetSourceResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["dataset_source_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_dataset_source" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["dataset_source_id"] is not None:
            _path_params["dataset_source_id"] = _params["dataset_source_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "DatasetSourceResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/dataset-sources/{dataset_source_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_dataset_sources(
        self,
        source_id: Optional[StrictStr] = None,
        folder: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        dataset_id: Optional[StrictStr] = None,
        created_by: Optional[StrictStr] = None,
        ingest_type: Optional[IngestType] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> PageDatasetSourceResponseWithSource:  # noqa: E501
        """Get Dataset Sources  # noqa: E501

        Retrieve all Dataset Sources based on the provided filters.  - **source_id**: ID of the source - **folder**: Path within the bucket to ingest data from - **id**: ID of the dataset source - **dataset_id**: ID of the dataset - **created_by**: Creator of the dataset source - **ingest_type**: Type of ingestion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_sources(source_id, folder, id, dataset_id, created_by, ingest_type, page, size, async_req=True)
        >>> result = thread.get()

        :param source_id:
        :type source_id: str
        :param folder:
        :type folder: str
        :param id:
        :type id: str
        :param dataset_id:
        :type dataset_id: str
        :param created_by:
        :type created_by: str
        :param ingest_type:
        :type ingest_type: IngestType
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageDatasetSourceResponseWithSource
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_dataset_sources_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_dataset_sources_with_http_info(
            source_id, folder, id, dataset_id, created_by, ingest_type, page, size, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_dataset_sources_with_http_info(
        self,
        source_id: Optional[StrictStr] = None,
        folder: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        dataset_id: Optional[StrictStr] = None,
        created_by: Optional[StrictStr] = None,
        ingest_type: Optional[IngestType] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=500, ge=1)] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Dataset Sources  # noqa: E501

        Retrieve all Dataset Sources based on the provided filters.  - **source_id**: ID of the source - **folder**: Path within the bucket to ingest data from - **id**: ID of the dataset source - **dataset_id**: ID of the dataset - **created_by**: Creator of the dataset source - **ingest_type**: Type of ingestion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_sources_with_http_info(source_id, folder, id, dataset_id, created_by, ingest_type, page, size, async_req=True)
        >>> result = thread.get()

        :param source_id:
        :type source_id: str
        :param folder:
        :type folder: str
        :param id:
        :type id: str
        :param dataset_id:
        :type dataset_id: str
        :param created_by:
        :type created_by: str
        :param ingest_type:
        :type ingest_type: IngestType
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageDatasetSourceResponseWithSource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["source_id", "folder", "id", "dataset_id", "created_by", "ingest_type", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_dataset_sources" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("source_id") is not None:  # noqa: E501
            _query_params.append(("source_id", _params["source_id"]))

        if _params.get("folder") is not None:  # noqa: E501
            _query_params.append(("folder", _params["folder"]))

        if _params.get("id") is not None:  # noqa: E501
            _query_params.append(("id", _params["id"]))

        if _params.get("dataset_id") is not None:  # noqa: E501
            _query_params.append(("dataset_id", _params["dataset_id"]))

        if _params.get("created_by") is not None:  # noqa: E501
            _query_params.append(("created_by", _params["created_by"]))

        if _params.get("ingest_type") is not None:  # noqa: E501
            _query_params.append(("ingest_type", _params["ingest_type"].value))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PageDatasetSourceResponseWithSource",
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/dataset-sources",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_dataset_source(
        self, dataset_source_id: StrictStr, dataset_source_update: DatasetSourceUpdate, **kwargs
    ) -> DatasetSourceResponse:  # noqa: E501
        """Update Dataset Source  # noqa: E501

        Update an existing DatasetSource.  - **id** (str): Optional, ID of the dataset source. - **dataset_id** (str): Optional, ID of the dataset. The dataset must already exist. - **source_id** (UUID): Optional, Unique Identifier(UUID) of the source data. The source must already exist. - **folder** (str or None): Optional, Path within the bucket to ingest data from. - **query** (str or None): Optional, Query statement to retrieve data. - **ingest_type** (IngestType): Optional, Type of data ingestion. Default is IngestType.INSERT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset_source(dataset_source_id, dataset_source_update, async_req=True)
        >>> result = thread.get()

        :param dataset_source_id: (required)
        :type dataset_source_id: str
        :param dataset_source_update: (required)
        :type dataset_source_update: DatasetSourceUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DatasetSourceResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_dataset_source_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_dataset_source_with_http_info(
            dataset_source_id, dataset_source_update, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_dataset_source_with_http_info(
        self, dataset_source_id: StrictStr, dataset_source_update: DatasetSourceUpdate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Update Dataset Source  # noqa: E501

        Update an existing DatasetSource.  - **id** (str): Optional, ID of the dataset source. - **dataset_id** (str): Optional, ID of the dataset. The dataset must already exist. - **source_id** (UUID): Optional, Unique Identifier(UUID) of the source data. The source must already exist. - **folder** (str or None): Optional, Path within the bucket to ingest data from. - **query** (str or None): Optional, Query statement to retrieve data. - **ingest_type** (IngestType): Optional, Type of data ingestion. Default is IngestType.INSERT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset_source_with_http_info(dataset_source_id, dataset_source_update, async_req=True)
        >>> result = thread.get()

        :param dataset_source_id: (required)
        :type dataset_source_id: str
        :param dataset_source_update: (required)
        :type dataset_source_update: DatasetSourceUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DatasetSourceResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["dataset_source_id", "dataset_source_update"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method update_dataset_source" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["dataset_source_id"] is not None:
            _path_params["dataset_source_id"] = _params["dataset_source_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["dataset_source_update"] is not None:
            _body_params = _params["dataset_source_update"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "DatasetSourceResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/dataset-sources/{dataset_source_id}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
