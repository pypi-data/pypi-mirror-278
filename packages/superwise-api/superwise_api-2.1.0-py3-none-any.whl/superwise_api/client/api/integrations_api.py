# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import io
import re  # noqa: F401
import warnings
from typing import Optional

from pydantic import conint
from pydantic import StrictBool
from pydantic import StrictStr
from pydantic import validate_arguments
from pydantic import ValidationError

from superwise_api.client.api_client import ApiClient
from superwise_api.client.api_response import ApiResponse
from superwise_api.client.exceptions import ApiTypeError
from superwise_api.client.exceptions import ApiValueError
from superwise_api.client.models.integration_response import IntegrationResponse
from superwise_api.client.models.integration_type import IntegrationType
from superwise_api.client.models.page_integration_response import PageIntegrationResponse


class IntegrationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def delete_integration(
        self, integration_id: StrictStr, delete_destinations: Optional[StrictBool] = None, **kwargs
    ) -> None:  # noqa: E501
        """Delete Integration By Id  # noqa: E501

        Delete a specific integration by ID  - **integration_id** (UUID): The unique identifier of the integration. - **delete_destinations** (bool): Whether or not to delete destinations associated with the integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_integration(integration_id, delete_destinations, async_req=True)
        >>> result = thread.get()

        :param integration_id: (required)
        :type integration_id: str
        :param delete_destinations:
        :type delete_destinations: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_integration_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_integration_with_http_info(integration_id, delete_destinations, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_integration_with_http_info(
        self, integration_id: StrictStr, delete_destinations: Optional[StrictBool] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Delete Integration By Id  # noqa: E501

        Delete a specific integration by ID  - **integration_id** (UUID): The unique identifier of the integration. - **delete_destinations** (bool): Whether or not to delete destinations associated with the integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_integration_with_http_info(integration_id, delete_destinations, async_req=True)
        >>> result = thread.get()

        :param integration_id: (required)
        :type integration_id: str
        :param delete_destinations:
        :type delete_destinations: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["integration_id", "delete_destinations"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_integration" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["integration_id"] is not None:
            _path_params["integration_id"] = _params["integration_id"]

        # process the query parameters
        _query_params = []
        if _params.get("delete_destinations") is not None:  # noqa: E501
            _query_params.append(("delete_destinations", _params["delete_destinations"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/integrations/{integration_id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_integration(self, integration_id: StrictStr, **kwargs) -> IntegrationResponse:  # noqa: E501
        """Get Integration By Id  # noqa: E501

        Get a specific integration by ID  - **integration_id** (UUID): The unique identifier of the integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_integration(integration_id, async_req=True)
        >>> result = thread.get()

        :param integration_id: (required)
        :type integration_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IntegrationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_integration_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_integration_with_http_info(integration_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_integration_with_http_info(self, integration_id: StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Integration By Id  # noqa: E501

        Get a specific integration by ID  - **integration_id** (UUID): The unique identifier of the integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_integration_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param integration_id: (required)
        :type integration_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IntegrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["integration_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_integration" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["integration_id"] is not None:
            _path_params["integration_id"] = _params["integration_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "IntegrationResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/integrations/{integration_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_integrations(
        self,
        integration_type: Optional[IntegrationType] = None,
        created_by: Optional[StrictStr] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        **kwargs
    ) -> PageIntegrationResponse:  # noqa: E501
        """Get Integrations  # noqa: E501

        Get all available integrations  - **integration_type** (IntegrationType): Optional filter by integration type - **created_by** (str): Optional filter by user ID who created the integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_integrations(integration_type, created_by, page, size, async_req=True)
        >>> result = thread.get()

        :param integration_type:
        :type integration_type: IntegrationType
        :param created_by:
        :type created_by: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageIntegrationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_integrations_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_integrations_with_http_info(integration_type, created_by, page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_integrations_with_http_info(
        self,
        integration_type: Optional[IntegrationType] = None,
        created_by: Optional[StrictStr] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Integrations  # noqa: E501

        Get all available integrations  - **integration_type** (IntegrationType): Optional filter by integration type - **created_by** (str): Optional filter by user ID who created the integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_integrations_with_http_info(integration_type, created_by, page, size, async_req=True)
        >>> result = thread.get()

        :param integration_type:
        :type integration_type: IntegrationType
        :param created_by:
        :type created_by: str
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageIntegrationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["integration_type", "created_by", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_integrations" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("integration_type") is not None:  # noqa: E501
            _query_params.append(("integration_type", _params["integration_type"].value))

        if _params.get("created_by") is not None:  # noqa: E501
            _query_params.append(("created_by", _params["created_by"]))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PageIntegrationResponse",
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/integrations",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
