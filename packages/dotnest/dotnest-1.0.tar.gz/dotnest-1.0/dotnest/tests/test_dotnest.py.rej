--- tests/test_dotnest.py
+++ tests/test_dotnest.py
@@ -22,7 +27,7 @@ def test_nb2an_dotnest():
     except Exception:
         assert False, "failed to load module"
 
-    basic_data = [1,2,3]
+    basic_data = [1, 2, 3]
     dn = nb2an.dotnest.DotNest(basic_data)
     assert dn.data == basic_data, "failed to have initial data value"
 
@@ -34,45 +39,45 @@ def test_nb2an_dotnest_access():
     import nb2an.dotnest
 
     dn = nb2an.dotnest.DotNest(copy.deepcopy(data))
-    assert dn.get(['subdict', 'arrrr', 0]) == "there"
-    assert dn.get(['list', 1, 'name']) == "element2"
+    assert dn.get(["subdict", "arrrr", 0]) == "there"
+    assert dn.get(["list", 1, "name"]) == "element2"
 
-    dn.set(['list', 1, 'name'], "new element")
-    assert dn.get(['list', 1, 'name']) == "new element"
+    dn.set(["list", 1, "name"], "new element")
+    assert dn.get(["list", 1, "name"]) == "new element"
 
-    dn.set(['list', 1, 'name'], [1, 2, 3])
-    assert dn.get(['list', 1, 'name', 2]) == 3
+    dn.set(["list", 1, "name"], [1, 2, 3])
+    assert dn.get(["list", 1, "name", 2]) == 3
 
 
 def test_nb2an_dotnest_test_str_to_int():
     import nb2an.dotnest
 
     dn = nb2an.dotnest.DotNest(copy.deepcopy(data))
-    assert dn.get(['subdict', 'arrrr', '0']) == "there"
+    assert dn.get(["subdict", "arrrr", "0"]) == "there"
 
 
 def test_nb2an_dotnest_str_to_list():
     import nb2an.dotnest
 
     dn = nb2an.dotnest.DotNest(copy.deepcopy(data))
-    assert dn.parse_keys("a.b.c") == ['a', 'b', 'c']
+    assert dn.parse_keys("a.b.c") == ["a", "b", "c"]
     # .1 could be a dict string or int for a list:
     # TODO: .1 could be int for a dict too...
-    assert dn.parse_keys("a.1.c") == ['a', '1', 'c']
+    assert dn.parse_keys("a.1.c") == ["a", "1", "c"]
 
 
 def test_nb2an_dotnest_usedotted():
     import nb2an.dotnest
 
     dn = nb2an.dotnest.DotNest(copy.deepcopy(data))
-    assert dn.get('subdict.arrrr.0') == "there"
-    assert dn.get('list.1.name') == "element2"
+    assert dn.get("subdict.arrrr.0") == "there"
+    assert dn.get("list.1.name") == "element2"
 
-    dn.set('list.1.name', "new element")
-    assert dn.get('list.1.name') == "new element"
+    dn.set("list.1.name", "new element")
+    assert dn.get("list.1.name") == "new element"
 
-    dn.set('list.1.name', [1, 2, 3])
-    assert dn.get('list.1.name.2') == 3
+    dn.set("list.1.name", [1, 2, 3])
+    assert dn.get("list.1.name.2") == 3
 
 
 def test_nb2an_dotnest_equals():
