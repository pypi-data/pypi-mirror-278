import aiohttp
import asyncio
import os

from loguru import logger

class UploadToDalas():
    def __init__(self, api_key=None) -> None:
        
        self.upload_url:str="https://api.uploadgroup.site"
        self.chunk_size:int=5* 1024 * 1024

        self.pannel_url = "https://api.dalas.pw"
        self.api_key:str = api_key
        self.version = '1.0.0'
    async def version_test(self):
        """–°–ª—É–∂–µ–±–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ `UploadToDalas`
        """  
        url = "https://pypi.org/pypi/uploadtodalas/json"
        try:
            async with aiohttp.ClientSession() as session: 
                async with session.get(url) as response:
                    version = (await response.json())['info']['version']
                    if version != self.version:
                        logger.error(f"–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —É—Å—Ç–∞—Ä–µ–≤—à—É—é –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞ uploadtodalas {self.version}, –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {version}")
                        logger.warning(f"–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É:\nWindows: `pip install --upgrade uploadtodalas`\nLinux: `pip3 install --upgrade uploadtodalas --break-system-packages`")
                        return False
                    logger.success(f"–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞ uploadtodalas {self.version}")
            return True
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏: {e}')
            return True


    async def test_site(self, url):
        """–°–ª—É–∂–µ–±–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ `UploadToDalas`
        """    
        try:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ {url}")
            async with aiohttp.ClientSession() as session:
                    
                    async with session.get(url+"/docs") as response:
                        if response.status !=200:
                            logger.warning(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                            logger.error(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞ Dalas , –∏ —Å–æ–æ–±—â–∏–µ—Ç–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –∫–æ–¥ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ {response.status}")
                            return False
                        logger.success("–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                        logger.info(f"–ü–æ—Å–µ—Ç–∏—Ç–µ {url+'/docs'}, –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
                        return True
        except Exception as e:
            logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            logger.error(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞ Dalas , –∏ —Å–æ–æ–±—â–∏–µ—Ç–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False


    async def upload_file_chunk(self,url, chunk, name, chunk_number, total_chunks):
        """–°–ª—É–∂–µ–±–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ `UploadToDalas`
        """        
        try:
            c=0
            status_code = 400
            while c <5:
                data = aiohttp.FormData()
                data.add_field('file', chunk, filename=name, content_type='application/octet-stream')
                data.add_field('name', name)
                data.add_field('chunk', str(chunk_number))
                data.add_field('chunks', str(total_chunks))

                async with aiohttp.ClientSession() as session:
                        async with session.post(url, data=data) as response:
                            status_code=response.status
                            if status_code ==200:
                                logger.info(f"Chunk: {chunk_number+1}/{total_chunks} successfully sent, file: {name}")
                                return await response.json()
                await asyncio.sleep(1)
                c+=1
                logger.warning(f"upload attempts {c}/5")

            logger.error(f"Cant send chunk, check internet connection and contact support of project DALAS")
        except Exception as e:
            logger.error(f"Error while uploading chunk: {chunk_number}/{total_chunks}, file: {name}\n{e}")
        
    
    async def AsyncUploadToDalas(self, file_path:str, seller_id:int, shedul_in_hours:int=0):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Dalas.

        :`file_path`: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :`seller_id`: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞.(–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –±–æ—Ç–µ üåê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å-->–í–∞—à ID: 1111)
        :`shedul_in_hours`: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∞—Å–∞—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –æ—Ç–ª–µ–≥–∏ —Å–µ–π—á–∞—Å –∞ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ª–µ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0).
        """
        try:
            if not await self.test_site(url=self.upload_url):
                return
            if not await self.version_test():
                return
            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.")
                return

            file_size = os.path.getsize(file_path)
            total_chunks = (file_size // self.chunk_size) + (1 if file_size % self.chunk_size else 0)
            chunk_number = 0
            logger.success(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}")
            logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {total_chunks if total_chunks!=0 else 1} —á–∞–Ω–∫–æ–≤, —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ {self.chunk_size/(1024 * 1024)} MB.")
            with open(file_path, 'rb') as f:
                while True:
                    chunk = f.read(self.chunk_size)
                    if not chunk:
                        break

                    url = f"{self.upload_url}/upload/{seller_id}_None/{shedul_in_hours}"
                    response = await self.upload_file_chunk(url, chunk, os.path.basename(file_path), chunk_number, total_chunks)
                    chunk_number += 1
                    # logger.info(response) 

                    if chunk_number == total_chunks:
                        # logger.success(f"File: {file_path} successfully sent")
                        logger.success(f"–§–∞–π–ª: {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ")
                        break

        except Exception as e:
            logger.error(f"Error while uploading file: {file_path}\n{e}")

    def SyncUploadToDalas(self, file_path: str, seller_id: int, shedul_in_hours: int = 0):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Dalas, –≤—ã–∑—ã–≤–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ AsyncUploadToDalas.

        :`file_path`: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :`seller_id`: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞.(–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –±–æ—Ç–µ üåê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å-->–í–∞—à ID: 1111)
        :`shedul_in_hours`: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∞—Å–∞—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –æ—Ç–ª–µ–≥–∏ —Å–µ–π—á–∞—Å –∞ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ª–µ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0).
        """
        try:
            asyncio.run(self.AsyncUploadToDalas(file_path=file_path, seller_id=seller_id, shedul_in_hours=shedul_in_hours))
        except Exception as e:
            logger.error(f"An error occurred: {e}")

    async def PannelAsyncGetId(self, telegram_id:int=0, seller_id:int=0)->int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `int`: Seller id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, `False` :bool - –ø—Ä–∏ –æ—à–∏–±–∫–µ, `None` - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–ø–∏ –∫–ª—é—á, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–ø–∏ –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `AsyncUploadToDalas` –∏–ª–∏ `SyncUploadToDalas`.

        –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –∏–º–µ–µ—Ç—Å—è), –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.

        –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–µ—Ä–µ–¥–∞–≤ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∏–¥, —á—Ç–æ –≤–µ—Å—å–º–∞ —É–¥–æ–±–Ω–æ.
        
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç\–ø–æ–ª—É—á–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Dalas.

        –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–ª–∏ seller_id(–∏–¥ –≤ –±–æ—Ç–µ) –∏–ª–∏ telegram_id(–∏–¥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º)

        :`telegram_id`: int  –∏–¥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
        :`seller_id`: int –∏–¥ –≤ –±–æ—Ç–µ(–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏).
        """
        try:
            if telegram_id >0 and seller_id >0:
                logger.error(f"–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–ª–∏ seller_id(–∏–¥ –≤ –±–æ—Ç–µ) –∏–ª–∏ telegram_id(–∏–¥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º)")
                return False
            if telegram_id ==0 and seller_id ==0:
                logger.error(f"–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–ª–∏ seller_id(–∏–¥ –≤ –±–æ—Ç–µ) –∏–ª–∏ telegram_id(–∏–¥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º)")
                return False
            async with aiohttp.ClientSession() as session:
                    
                    async with session.post(self.pannel_url+f"/check_id/{self.api_key}/{telegram_id}/{seller_id}") as response:
                        if response.status ==400: 
                            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–ø–∏ –∫–ª—é—á\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞ Dalas.")
                            return False
                        if response.status == 404:
                            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å {'telegram'if telegram_id>0 else 'seller'}_id —Ä–∞–≤–Ω—ã–º {telegram_id if telegram_id>0 else seller_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                            return None      
                        if response.status ==500: 
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞ Dalas.")
                            return False        
                        if response.status == 200:
                            id_in_bot = int(await response.text())
                            # logger.debug(id_in_bot)
                            return id_in_bot

                        logger.error(f"–ù–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞ Dalas , –∏ —Å–æ–æ–±—â–∏–µ—Ç–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –∫–æ–¥ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ {response.status}, {await response.text()}")   
                        return False                     
        except Exception as e:
            logger.error(f"An error occurred: {e}")

    async def PannelAsyncUpload(self, file_path:str, seller_id:int, shedul_in_hours:int=0, strict=True):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π, –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–ø–∏ –∫–ª—é—á, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–ø–∏ –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `AsyncUploadToDalas` –∏–ª–∏ `SyncUploadToDalas`.
        
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Dalas.

        :`file_path`: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :`seller_id`: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞.(–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ `PannelAsyncGetId`)
        :`shedul_in_hours`: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∞—Å–∞—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –æ—Ç–ª–µ–≥–∏ —Å–µ–π—á–∞—Å –∞ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ª–µ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0).
        :`strict`: –í–∞–ª–∏–¥–∞—Ü–∏—è seller_id, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
        """  
        try:
            if not await self.test_site(url=self.pannel_url):
                return
            if self.api_key is None:
                logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–ø–∏ –∫–ª—é—á, –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞\n–µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–ø–∏ –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `AsyncUploadToDalas` –∏–ª–∏ `SyncUploadToDalas`.")
                return
            if strict:
                logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ seller_id: {seller_id}")
                if not await self.PannelAsyncGetId(seller_id=seller_id):
                    logger.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π seller_id –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –≤—ã—à–µ.")
                    return False
                if not await self.version_test():
                    return
            file_size = os.path.getsize(file_path)
            total_chunks = (file_size // self.chunk_size) + (1 if file_size % self.chunk_size else 0)
            chunk_number = 0
            logger.success(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}")
            logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {total_chunks if total_chunks!=0 else 1} —á–∞–Ω–∫–æ–≤, —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ {self.chunk_size/(1024 * 1024)} MB.")
            with open(file_path, 'rb') as f:
                while True:
                    chunk = f.read(self.chunk_size)
                    if not chunk:
                        break
             

                    url = f"{self.pannel_url}/upload/{self.api_key}/{seller_id}/none/{shedul_in_hours}"
                    response = await self.upload_file_chunk(url, chunk, os.path.basename(file_path), chunk_number, total_chunks)
                    chunk_number += 1
                    

                    if chunk_number == total_chunks:
                        # logger.success(f"File: {file_path} successfully sent")
                        logger.info(response) 
                        logger.success(f"–§–∞–π–ª: {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ")
                        break

        except Exception as e:
            logger.error(f"Error while uploading file: {file_path}\n{e}")
    

    async def PannelAsyncPayOff(self, seller_id:int, strict=True):
        """
        –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã.
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–ø–∏ –∫–ª—é—á, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–ø–∏ –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `AsyncUploadToDalas` –∏–ª–∏ `SyncUploadToDalas`.
        
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –≤ Dalas.


        :`seller_id`: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞.(–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ `PannelAsyncGetId`)
        :`strict`: –í–∞–ª–∏–¥–∞—Ü–∏—è seller_id, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
        """  
        try:
            if not await self.test_site(url=self.pannel_url):
                return
            if self.api_key is None:
                logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–ø–∏ –∫–ª—é—á, –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞\n–µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–ø–∏ –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `AsyncUploadToDalas` –∏–ª–∏ `SyncUploadToDalas`.")
                return
            if strict:
                logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ seller_id: {seller_id}")
                if not await self.PannelAsyncGetId(seller_id=seller_id):
                    logger.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π seller_id –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –≤—ã—à–µ.")
                    return False
                if not await self.version_test():
                    return

            url = f"{self.pannel_url}/payoff/{self.api_key}/{seller_id}"
            async with aiohttp.ClientSession() as session: 
                async with session.post(url) as response:
                    response = await response.text()
            logger.info(response) 

        except Exception as e:
            logger.error(f"Error : {e}")
