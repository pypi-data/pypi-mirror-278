[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"



[project]
name = "fasthep_logging"
authors = [
    { name = "Luke Kreczko", email = "kreczko@cern.ch" },
]
maintainers = [
    { name = "The FAST-HEP admins", email = "fast-hep@cern.ch" },
]

description = "Enhanced logging for the FAST-HEP toolkit"
readme = "README.md"

requires-python = ">=3.9"

classifiers = [
    "License :: OSI Approved :: BSD License",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 1 - Planning",
]

dynamic = ["version"]

dependencies = [
    "rich >=10.12.0",
]

[project.optional-dependencies]
test = [
    "pytest >=6",
]
dev = [
    "pytest >=6",
]
docs = [
    "Sphinx>=4.0",
     "myst_parser>=0.13",
    "sphinx-book-theme>=0.1.0",
    "sphinx_copybutton",
]

[project.urls]
homepage = "https://github.com/FAST-HEP/fasthep-logging"
"Bug Tracker" = "https://github.com/FAST-HEP/fasthep-logging/issues"
Discussions = "https://github.com/FAST-HEP/fasthep-logging/discussions"
Changelog = "https://github.com/FAST-HEP/fasthep-logging/releases"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/fasthep_logging/_version.py"
envs.default.dependencies = [
  "pytest",
  "pytest-cov",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
testpaths = [
    "tests",
]


[tool.mypy]
files = "src"
python_version = "3.8"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["rich.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["fasthep_logging.*"]
implicit_reexport = true
ignore_missing_imports = true

[tool.coverage]
run.source = ["fasthep_flow"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]


[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["fasthep_flow._compat.typing"]

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.10"
ignore-paths= ["src/fasthep_logging/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "wrong-import-position",
]
