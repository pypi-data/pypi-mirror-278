# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .email_for_update import EmailForUpdate
from .job_data_cost_center import JobDataCostCenter
from .object_field_data import ObjectFieldData


class OfferInfoUpdate(object):
    _types = {
        "onboarding_date": str,
        "ats_application_id": str,
        "onboarding_location_id": str,
        "onboarding_address_id": str,
        "office_location_id": str,
        "office_address_id": str,
        "employment_type": str,
        "onboarding_method": str,
        "work_emails": List[EmailForUpdate],
        "cost_center_rates": List[JobDataCostCenter],
        "custom_fields": List[ObjectFieldData],
    }

    def __init__(self, d=None):
        self.onboarding_date: Optional[str] = None
        self.ats_application_id: Optional[str] = None
        self.onboarding_location_id: Optional[str] = None
        self.onboarding_address_id: Optional[str] = None
        self.office_location_id: Optional[str] = None
        self.office_address_id: Optional[str] = None
        self.employment_type: Optional[str] = None
        self.onboarding_method: Optional[str] = None
        self.work_emails: Optional[List[EmailForUpdate]] = None
        self.cost_center_rates: Optional[List[JobDataCostCenter]] = None
        self.custom_fields: Optional[List[ObjectFieldData]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "OfferInfoUpdateBuilder":
        return OfferInfoUpdateBuilder()


class OfferInfoUpdateBuilder(object):
    def __init__(self) -> None:
        self._offer_info_update = OfferInfoUpdate()

    def onboarding_date(self, onboarding_date: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.onboarding_date = onboarding_date
        return self

    def ats_application_id(self, ats_application_id: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.ats_application_id = ats_application_id
        return self

    def onboarding_location_id(self, onboarding_location_id: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.onboarding_location_id = onboarding_location_id
        return self

    def onboarding_address_id(self, onboarding_address_id: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.onboarding_address_id = onboarding_address_id
        return self

    def office_location_id(self, office_location_id: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.office_location_id = office_location_id
        return self

    def office_address_id(self, office_address_id: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.office_address_id = office_address_id
        return self

    def employment_type(self, employment_type: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.employment_type = employment_type
        return self

    def onboarding_method(self, onboarding_method: str) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.onboarding_method = onboarding_method
        return self

    def work_emails(self, work_emails: List[EmailForUpdate]) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.work_emails = work_emails
        return self

    def cost_center_rates(self, cost_center_rates: List[JobDataCostCenter]) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.cost_center_rates = cost_center_rates
        return self

    def custom_fields(self, custom_fields: List[ObjectFieldData]) -> "OfferInfoUpdateBuilder":
        self._offer_info_update.custom_fields = custom_fields
        return self

    def build(self) -> "OfferInfoUpdate":
        return self._offer_info_update
