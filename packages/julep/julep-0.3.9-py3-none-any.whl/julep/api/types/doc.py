# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .doc_content import DocContent
from .doc_metadata import DocMetadata

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Doc(pydantic.BaseModel):
    title: str = pydantic.Field(
        description="Title describing what this bit of information contains"
    )
    content: DocContent = pydantic.Field(description="Information content")
    id: str = pydantic.Field(description="ID of doc")
    created_at: dt.datetime = pydantic.Field(description="Doc created at")
    metadata: typing.Optional[DocMetadata] = pydantic.Field(
        description="optional metadata"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
