# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .memory_entities_item import MemoryEntitiesItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Memory(pydantic.BaseModel):
    agent_id: str = pydantic.Field(description="ID of the agent")
    user_id: str = pydantic.Field(description="ID of the user")
    content: str = pydantic.Field(description="Content of the memory")
    created_at: dt.datetime = pydantic.Field(
        description="Memory created at (RFC-3339 format)"
    )
    last_accessed_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="Memory last accessed at (RFC-3339 format)"
    )
    timestamp: typing.Optional[dt.datetime] = pydantic.Field(
        description="Memory happened at (RFC-3339 format)"
    )
    sentiment: typing.Optional[float] = pydantic.Field(
        description="Sentiment (valence) of the memory on a scale of -1 to 1"
    )
    id: str = pydantic.Field(description="Memory id (UUID)")
    entities: typing.List[MemoryEntitiesItem] = pydantic.Field(
        description="List of entities mentioned in the memory"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
