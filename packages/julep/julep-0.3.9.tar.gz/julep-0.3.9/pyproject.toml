[tool.poetry]
name = "julep"
version = "0.3.9"
description = "Julep is a platform for creating agents with long-term memory"
authors = ["Julep Developers <developers@julep.ai>"]
license = "ISC"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9,<3.14"
httpx = ">=0.20.0,<1.0.0"
pydantic = ">=2.0.1,<3.0.0"
environs = ">=9.0.0,<11.0.0"
beartype = ">=0.14.0,<1.0.0"
openai = ">=1.0.1,<2.0.0"
typing-extensions = ">=4.0.0,<5.0.0"


[tool.poetry.group.dev.dependencies]
pytype = "2024.1.5"
black = "^24.4.0"
ward = "^0.68.0b0"
ruff = "^0.1.13"
poethepoet = "^0.25.1"
ipython = "<8.13"
pyright = "^1.1.348"
handsdown = "^2.1.0"
jupyterlab = "^4.1.0"
pycozo = {extras = ["embedded", "pandas", "requests"], version = "^0.7.6"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
format = "black ."
lint = "ruff julep/**/*.py tests/**/*.py --fix --unsafe-fixes"
typecheck = "pytype --config=pytype.toml"
check = [
    "format",
    "lint",
    "typecheck",
]
start_prism.shell = "prism mock ./tests/mock_openapi.yaml -p 8080 -v fatal 1> /dev/null &"
kill_prism.shell = "kill $(pgrep -f 'prism .*')"
test = [
    "check",
    "start_prism",
    { cmd = "echo 'Waiting for prism to start up'" },
    { cmd = "sleep 1" },
    { cmd = "ward" },
    "kill_prism",
]
generate_docstrings = "gpt4docstrings -k $OPENAI_API_KEY -v 1 -w -p -s -n -C -e api/ -m gpt-4-1106-preview julep/"
doc = "handsdown julep --exclude julep/api/core --exclude julep/api/types --exclude julep/api/environment.py --exclude julep/env.py --exclude julep/managers/base.py --exclude julep/managers/types.py --exclude julep/managers/utils.py --cleanup -n 'Julep Python SDK' --toc-depth 2 -o ../../docs/python-sdk-docs"
