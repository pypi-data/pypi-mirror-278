# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .chat_ml_image_content_part_image_url_detail import (
    ChatMlImageContentPartImageUrlDetail,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ChatMlImageContentPartImageUrl(pydantic.BaseModel):
    """
    Image content part, can be a URL or a base64-encoded image
    """

    url: str = pydantic.Field(
        description="URL or base64 data url (e.g. `data:image/jpeg;base64,<the base64 encoded image>`)"
    )
    detail: typing.Optional[ChatMlImageContentPartImageUrlDetail] = pydantic.Field(
        description=(
            "image detail to feed into the model can be low \n" " high \n" " auto\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
