# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .suggestion_target import SuggestionTarget

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Suggestion(pydantic.BaseModel):
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="Suggestion created at (RFC-3339 format)"
    )
    target: SuggestionTarget = pydantic.Field(
        description="Whether the suggestion is for the `agent` or a `user`"
    )
    content: str = pydantic.Field(description="The content of the suggestion")
    message_id: str = pydantic.Field(description="The message that produced it")
    session_id: str = pydantic.Field(description="Session this suggestion belongs to")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
