# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .job_status_state import JobStatusState

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class JobStatus(pydantic.BaseModel):
    name: str = pydantic.Field(description="Name of the job")
    reason: typing.Optional[str] = pydantic.Field(
        description="Reason for current state"
    )
    created_at: dt.datetime = pydantic.Field(
        description="Job created at (RFC-3339 format)"
    )
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="Job updated at (RFC-3339 format)"
    )
    id: str = pydantic.Field(description="Job id (UUID)")
    has_progress: typing.Optional[bool] = pydantic.Field(
        description="Whether this Job supports progress updates"
    )
    progress: typing.Optional[float] = pydantic.Field(description="Progress percentage")
    state: JobStatusState = pydantic.Field(
        description="Current state (one of: pending, in_progress, retrying, succeeded, aborted, failed)"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
