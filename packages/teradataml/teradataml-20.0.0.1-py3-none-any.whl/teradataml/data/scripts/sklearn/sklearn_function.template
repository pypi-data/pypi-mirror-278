import sys, json
import pickle, base64, importlib, numpy as np
from collections import OrderedDict

func_name = "<func_name>"
module_name = "<module_name>"
params = json.loads('<params>')

DELIMITER = '\t'

def convert_to_type(val, typee):
    if typee == 'int':
        return int(val) if val != "" else np.nan
    if typee == 'float':
        if isinstance(val, str):
            val = val.replace(' ', '')
        return float(val) if val != "" else np.nan
    if typee == 'bool':
        return eval(val) if val != "" else None
    return str(val) if val != "" else None

def splitter(strr, delim=",", convert_to="str"):
    """
    Split the string based on delimiter and convert to the type specified.
    """
    if strr == "None":
        return []
    return [convert_to_type(i, convert_to) for i in strr.split(delim)]

# Arguments to the Script.
if len(sys.argv) != 4:
    # 4 arguments command line arguments should be passed to this file.
    # 1: file to be run
    # 2. Comma separated indices of partition columns.
    # 3. Comma separated types of all the data columns.
    # 4. Data columns information separted by "--" where each data column information is in the form
    #    "<arg_name>-<comma separated data indices>-<comma separated data types>".
    sys.exit("4 arguments command line arguments should be passed: file to be run,"
             " comma separated indices of partition columns, comma separated types of all columns,"
             " data columns information separated by '--' where each data column information is"
             " in the form '<arg_name>-<comma separated data indices>-<comma separated data types>'.")

db = sys.argv[0].split("/")[1]
data_partition_column_indices = splitter(sys.argv[1], convert_to="int") # indices are integers.
data_column_types = splitter(sys.argv[2], delim="--")

data_partition_column_types = [data_column_types[idx] for idx in data_partition_column_indices]

# Data related arguments information of indices and types.
data_args_indices_types = OrderedDict()

# Data related arguments values - prepare dictionary and populate data later.
data_args_values = {}

for data_arg in sys.argv[3].split("--"):
    arg_name, indices, types = data_arg.split("-")
    indices = splitter(indices, convert_to="int")
    types = splitter(types)

    data_args_indices_types[arg_name] = {"indices": indices, "types": types}
    data_args_values[arg_name] = [] # Keeping empty for each data arg name and populate data later.

data_partition_column_values = []
data_present = False

# Read data - columns information is passed as command line argument and stored in
# data_args_indices_types dictionary. 
while 1:
    try:
        line = input()
        if line == '':  # Exit if user provides blank line
            break
        else:
            data_present = True
            values = line.split(DELIMITER)
            if not data_partition_column_values:
                # Partition column values is same for all rows. Hence, only read once.
                for i, val in enumerate(data_partition_column_indices):
                    data_partition_column_values.append(
                        convert_to_type(values[val], typee=data_partition_column_types[i])
                        )
            
            # Prepare data dictionary containing only arguments related to data.
            for arg_name in data_args_values:
                data_indices = data_args_indices_types[arg_name]["indices"]
                types = data_args_indices_types[arg_name]["types"]
                cur_row = []
                for idx, data_idx in enumerate(data_indices):
                    cur_row.append(convert_to_type(values[data_idx], types[idx]))
                data_args_values[arg_name].append(cur_row)
    except EOFError:  # Exit if reached EOF or CTRL-D
        break

if not data_present:
    sys.exit(0)

# Update data as numpy arrays.
for arg_name in data_args_values:
    np_values = np.array(data_args_values[arg_name])
    data_args_values[arg_name] = np_values

# Combine all arguments.
all_args = {**data_args_values, **params}

module_ = importlib.import_module(module_name)
sklearn_model = getattr(module_, func_name)(**all_args)

print(*(data_partition_column_values + [base64.b64encode(pickle.dumps(sklearn_model))]), sep=DELIMITER)
