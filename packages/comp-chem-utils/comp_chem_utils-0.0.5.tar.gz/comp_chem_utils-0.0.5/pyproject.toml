[tool.poetry]
name = "comp-chem-utils"
version = "0.0.5"
description = "Utilities for computational chemistry."
authors = [
    "Ugochukwu Nwosu <ugognw@gmail.com>",
    "Tiago Joao Ferreira Goncalves <tiagojoaog@gmail.com>"
]
license = "MIT"
readme = "README.rst"
repository = "https://gitlab.com/ugognw/python-comp-chem-utils"
documentation = "https://python-comp-chem-utils.readthedocs.io/"
keywords = ['computational chemistry', 'catalysis', 'comp-chem-utils']
packages = [
    { include = "ccu", from = "src" }
]
classifiers = [
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "Operating System :: Unix",
        "Operating System :: POSIX",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy",
]

[tool.poetry.scripts]
ccu = 'ccu.cli.main:main'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
click = "*"
numpy = ">=1.24.2"
ase = ">=3.22.1"
scipy = ">=1.10.1"
pymatgen = ">=2023.9.2"
Pillow = ">=10.1"

ruff = "0.4.8"
[tool.poetry.group.nox.dependencies]
nox-poetry = "*"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-datadir = "*"
pytest-xdist = "*"

[tool.poetry.group.type_check.dependencies]
mypy = "*"

[tool.poetry.group.lint-format.dependencies]
ruff = ">=0.4.8"

[tool.poetry.group.vcs.dependencies]
pre-commit = "^2.20.0"
bump2version = "^1.0.1"
gitchangelog = "^3.0.4"

[tool.poetry.group.docs.dependencies]
esbonio = "*"
sphinx = "^7.0.1"
furo = "*"
sphinx_click = ">=5.0.1"
sphinxcontrib-apidoc = { git = "https://github.com/sphinx-contrib/apidoc.git" }
sphinx-autobuild = ">=2024.04.16"
sphinx-copybutton = "*"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "--strict-markers",
    "--doctest-modules",
    "--doctest-glob=*.rst",
    "--tb=short"
]
filterwarnings = [
    "error",
    "ignore::matplotlib._api.deprecation.MatplotlibDeprecationWarning",
    "ignore:invalid escape sequence:DeprecationWarning"
]
norecursedirs = "migrations"
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py"
]
testpaths = "tests"
markers = [
    "rotation_angle: specify the angle to be used for a Rotation fixture"
]

[tool.coverage.paths]
source =[
   'src',
   '*/site-packages'
]

[tool.coverage.run]
command_line = 'pytest'
branch = true
source = [
    'ccu',
    'tests'
]
parallel = true

[tool.rstcheck]
ignore_directives = [
    "automodule",
    "click"
]
ignore_substitutions = [
    "release",
]
ignore_messages = [
    'Duplicate implicit target name: "added".',
    'Duplicate implicit target name: "changed".',
    'Duplicate implicit target name: "fixed".',
    'Duplicate implicit target name: "removed".',
    'Duplicate implicit target name: "unreleased".',
    'Duplicate explicit target name: "keep a changelog"',
    'No role entry for "gitref" in module "docutils.parsers.rst.languages.en',
    'Unknown interpreted text role "gitref".',
]

[tool.ruff]
line-length = 79
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79
exclude = ["tests"]

[tool.ruff.lint]
ignore = [
    "D203", # pydocstyle one-blank-line-before-class
    "D213", # pydocstyle multi-line-summary-second-line
    "D300", # pydocstyle triple-single-quotes
    "D406", # pydocstyle new-line-after-section-name
    "D407", # pydocstyle dashed-underline-after-section
    "E111", # pycodestyle indentation-with-invalid-multiple
    "E114", # pycodestyle indentation-with-invalid-multiple-comment
    "E117", # pycodestyle over-indented
    "E501", # pycodestyle line-too-long
    "PLR0913", # pylint too-many-arguments
    "Q000", # flake8-quotes bad-quotes-inline-string
    "Q001", # flake8-quotes bad-quotes-multiline-string
    "Q002", # flake8-quotes bad-quotes-docstring
    "Q003", # flake8-quotes avoidable-escaped-quote
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "W191", # pycodestyle tab-indentation
]
select = [
    "ARG", # flake8-unused-arguments
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe complexity
    "COM818", # flake8-commas trailing-comma-on-bare-tuple
    "D", # pydocstyle
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "YTT", # flake8-2020
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"noxfile.py" = ["EXE002", "D"]
"__main__.py" = ["D100"]
"tests/**" = ["D", "PLR2004"]
"conf.py" = [
    "A001",
    "ARG001",
    "D",
    "PLR2004"
]

[tool.ruff.lint.pydocstyle]
convention = "google"
