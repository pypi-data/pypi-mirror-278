# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: k_public.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class RequestTypes(betterproto.Enum):
    VERSION = 0
    not_for_public_use818dddb6_7ff3_41ea_9afa_a211c16fcdb3not_for_public_use818dddb6_7ff3_41ea_9afa_a211c16fcdb3 = (
        1
    )
    not_for_public_use652db145_a694_4ec7_b037_3e09301bd49bnot_for_public_use652db145_a694_4ec7_b037_3e09301bd49b = (
        2
    )
    COB_DRIVER_STATE = 3
    COB_DRIVER_VERSION = 4
    COB_DRIVER_SERIAL_NUMBER = 5
    SERIAL_NUMBER = 6
    POWER_STATE = 7
    SEPERATE_LAMP_HEAD_IMAGE_VERSION = 8
    DEVICE_STATS = 9
    FAN_DATA = 10
    DEVICE_TEMPERATURES = 11
    CURRENT_LIGHT_OUTPUT = 26
    LAMP_HEAD_IMAGE_INFO = 27
    DEVICE_ID = 28
    DEVICE_HW_CODE = 29
    BATTERY = 30
    POWER_SUPPLY = 31
    CURRENT_MODE = 32
    LIGHT_SETTINGS = 33


class RgbColorSpace(betterproto.Enum):
    LEDS_ON_LIGHT = 0
    S_RGB = 1
    ADOBE_1988 = 2
    ADOBE_WIDE = 3
    PRO_PHOTO = 4
    DCI_P3 = 5
    REC_2020 = 6


class CommandType(betterproto.Enum):
    not_for_public_use509e5258_74a1_48fe_bd1f_f5fa5fcecb86not_for_public_use509e5258_74a1_48fe_bd1f_f5fa5fcecb86 = (
        0
    )
    not_for_public_use6526da6d_b01d_44bf_8398_04fa1b3ea0c4not_for_public_use6526da6d_b01d_44bf_8398_04fa1b3ea0c4 = (
        1
    )
    not_for_public_use7ca40c4d_071b_4604_bf86_21af62495eb9not_for_public_use7ca40c4d_071b_4604_bf86_21af62495eb9 = (
        2
    )
    RESET_MCU = 3
    not_for_public_usee53b3dad_2426_447b_b7a8_e59ff5003cddnot_for_public_usee53b3dad_2426_447b_b7a8_e59ff5003cdd = (
        4
    )
    SAVE_MODE_PARAMETERS_TO_FLASH = 5
    LOAD_MODE_PARAMETERS_FROM_FLASH = 6
    CLEAR_MODE_PARAMETERS_FROM_FLASH = 7
    TURN_OFF_BTLE_ADVERTISING = 8
    TURN_ON_BTLE_ADVERTISING = 9
    FLASH_LIGHT_FOR_IDENTIFICATION = 10
    DRIVER_IGNORE_CONTROLLER = 11
    RESET_DEVICE_STATS = 12
    DFU_NOTFICATION_RESET = 13
    ENABLE_BOOSTER = 14
    DISABLE_BOOSTER = 15
    ENABLE_CHARGE_PORT = 16
    DISABLE_CHARGE_PORT = 17
    FACTORY_RESET = 18
    CRMX_UNLINK = 19


class EmitterOutputType(betterproto.Enum):
    PWM_OUTPUT = 0
    DAC_OUTPUT = 1


class BatteryPosition(betterproto.Enum):
    FRONT = 0
    REAR = 1


class GelBrandCategory(betterproto.Enum):
    ROSCO_CALCOLOR = 0
    ROSCO_CINELUX = 1
    ROSCO_COLOR_CORRECTION = 2
    LEE_0_SERIES = 3
    LEE_100_SERIES = 4
    LEE_200_AND_300_SERIES = 5
    LEE_500_SERIES = 6
    LEE_700_SERIES = 7
    LEE_COLOR_CORRECTION = 8


class FanControllerMode(betterproto.Enum):
    MANUAL = 0
    FAN_SILENT = 1
    FAN_CURVE_QUIET = 2
    FAN_CURVE_REGULAR = 3
    FAN_CURVE_HIGH = 4


class McuMgrMessageTypes(betterproto.Enum):
    SWAP_IMAGE = 0
    CONFIRM_IMAGE = 1
    ERASE_EXTERNAL_FLASH_IMAGE_0_SLOT1 = 2
    ERASE_EXTERNAL_FLASH_IMAGE_1_SLOT1 = 3


class EffectLoopType(betterproto.Enum):
    NO_LOOP = 0
    NORMAL_LOOP = 1
    BACK_AND_FORTH = 2


class SirenColorCombination(betterproto.Enum):
    RED_AND_BLUE = 0
    BLUE = 1
    BLUE_AND_WHITE = 2
    RED_BLUE_AND_WHITE = 3
    RED_AND_WHITE = 4
    RED = 5
    AMBER = 6


class PulseType(betterproto.Enum):
    SINUSOIDAL = 0
    LOGARITHMIC = 1
    EXPONENTIAL = 2
    TRIANGLE = 3


class ColorType(betterproto.Enum):
    CCT = 0
    RGB = 1
    HSI = 2
    XY = 3


class LightEffectType(betterproto.Enum):
    NONE = 0
    FIRE = 1
    CCT_CHASE = 2
    COLOR_CHASE = 3
    PULSE = 4
    STROBE = 5
    LIGHTNING = 6
    DIMMING = 7
    LightEffectType_count = 8


class LightEffectState(betterproto.Enum):
    PLAY = 0
    STOP = 1


class EffectNavigationState(betterproto.Enum):
    CHOOSE_EFFECT_SCREEN = 0
    EFFECT_SCREEN = 1
    EffectNavigationState_count = 2


class PbDmxMode(betterproto.Enum):
    SLAVE_MODE = 0
    MASTER_MODE = 1
    PbDMXMode_count = 2


class PbDmxDropoutMode(betterproto.Enum):
    DMX_DROPOUT_MODE_REMAIN_ON = 0
    DMX_DROPOUT_MODE_LIGHT_OFF = 1
    DMX_DROPOUT_MODE_LIGHT_OFF_N_SEC = 2
    PbDMXDropoutMode_count = 3


class PbDmxConnection(betterproto.Enum):
    NO_CONNECTION = 0
    WIRED_DMX_CONNECTION = 1
    LUMEN_DMX_CONNECTION = 2
    ARTNET_SACN_CONNECTION = 3
    ARTNET_CONNECTION = 4
    SACN_CONNECTION = 5
    PbDMXConnection_count = 6


class PbLumenMode(betterproto.Enum):
    RX_MODE = 0
    TX_MODE = 1
    PbLumenMode_count = 2


class PbLumenRadioState(betterproto.Enum):
    RADIO_OFF = 0
    RADIO_ON = 1
    PbLumenRadioState_count = 2


class PbArtNetSacnState(betterproto.Enum):
    OFF = 0
    ARTNET = 1
    SACN = 2
    ARTNET_AND_SACN = 3
    PbArtNetSacnState_count = 4


class PbEthernetIpMode(betterproto.Enum):
    DHCP = 0
    STATIC = 1
    ARTNET_2XXX = 2
    ARTNET_10XXX = 3
    PbEthernetIPMode_count = 4


class PbChargeOnDcSetting(betterproto.Enum):
    ChargeOnDC_OFF = 0
    ChargeOnDC_ON = 1
    PbChargeOnDcSetting_count = 2


class PbDisplayIdleMode(betterproto.Enum):
    ALWAYS_ON = 0
    IDLE_DIM = 1
    PbDisplayIdleMode_count = 2


class CubicSplineMessageCubicSplineFactorId(betterproto.Enum):
    SPLINE = 0
    C1 = 1
    C2 = 2
    C3 = 3
    C4 = 4


class IntensityMessageLightOutputType(betterproto.Enum):
    STABLE = 0
    MAXIMUM = 1


class PlayBoostMessagePlayPowerMode(betterproto.Enum):
    NORMAL = 0
    BOOST = 1


class FireEffectParamsFireType(betterproto.Enum):
    CANDLE = 0
    CAMP_FIRE = 1
    BON_FIRE = 2


class FireEffectParamsWindType(betterproto.Enum):
    NO_WIND = 0
    BREEZE = 1
    WINDY = 2
    STORMY = 3


class BleTestingMessageBleTestRequest(betterproto.Enum):
    start_scan = 0
    stop_scan = 1
    rssi = 2
    disconnect_all = 3


@dataclass(eq=False, repr=False)
class RequestMessage(betterproto.Message):
    request_type: Optional["RequestTypes"] = betterproto.enum_field(
        1, optional=True, group="_requestType"
    )


@dataclass(eq=False, repr=False)
class DeviceIdMessage(betterproto.Message):
    name: Optional[str] = betterproto.string_field(1, optional=True, group="_name")


@dataclass(eq=False, repr=False)
class CommandMessage(betterproto.Message):
    command: Optional["CommandType"] = betterproto.enum_field(
        1, optional=True, group="_command"
    )
    passwd: Optional[int] = betterproto.uint32_field(2, optional=True, group="_passwd")


@dataclass(eq=False, repr=False)
class DeviceStatsMessage(betterproto.Message):
    device_hours: Optional[float] = betterproto.float_field(
        1, optional=True, group="_deviceHours"
    )
    lamp_hours: Optional[float] = betterproto.float_field(
        2, optional=True, group="_lampHours"
    )
    power_cycles: Optional[int] = betterproto.uint32_field(
        3, optional=True, group="_powerCycles"
    )


@dataclass(eq=False, repr=False)
class EmitterOutputMessage(betterproto.Message):
    output_type: Optional["EmitterOutputType"] = betterproto.enum_field(
        1, optional=True, group="_outputType"
    )


@dataclass(eq=False, repr=False)
class BatteryMessage(betterproto.Message):
    position: Optional["BatteryPosition"] = betterproto.enum_field(
        1, optional=True, group="_position"
    )
    remaining_runtime_in_minutes: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_remainingRuntimeInMinutes"
    )
    remaining_capacity_pct: Optional[float] = betterproto.float_field(
        3, optional=True, group="_remainingCapacityPct"
    )
    voltage: Optional[float] = betterproto.float_field(
        4, optional=True, group="_voltage"
    )
    is_connected: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_isConnected"
    )
    is_smart: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_isSmart"
    )
    read_voltage: Optional[float] = betterproto.float_field(
        7, optional=True, group="_read_voltage"
    )
    current_load_m_a: Optional[float] = betterproto.float_field(
        8, optional=True, group="_currentLoad_mA"
    )
    time_since_last_pull_ms: Optional[int] = betterproto.int32_field(
        9, optional=True, group="_timeSinceLastPull_ms"
    )


@dataclass(eq=False, repr=False)
class PowerSupplyMessage(betterproto.Message):
    voltage: Optional[float] = betterproto.float_field(
        1, optional=True, group="_voltage"
    )
    is_connected: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_isConnected"
    )


@dataclass(eq=False, repr=False)
class Epos300PowerStateMessage(betterproto.Message):
    battery: "BatteryMessage" = betterproto.message_field(
        1, group="active_power_source"
    )
    power_supply: "PowerSupplyMessage" = betterproto.message_field(
        2, group="active_power_source"
    )
    max_power_draw: Optional[float] = betterproto.float_field(
        3, optional=True, group="_maxPowerDraw"
    )
    booster_enabled: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_boosterEnabled"
    )
    booster_power_good: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_boosterPowerGood"
    )
    charge_port_enabled: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_chargePortEnabled"
    )


@dataclass(eq=False, repr=False)
class PlayPowerStateMessage(betterproto.Message):
    battery: Optional["BatteryMessage"] = betterproto.message_field(
        1, optional=True, group="_battery"
    )
    max_power_draw: Optional[float] = betterproto.float_field(
        2, optional=True, group="_maxPowerDraw"
    )
    is_charging: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_isCharging"
    )


@dataclass(eq=False, repr=False)
class Epos600PowerStateMessage(betterproto.Message):
    psu_input: Optional["PowerSupplyMessage"] = betterproto.message_field(
        1, optional=True, group="_psuInput"
    )
    psu_enabled: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_psuEnabled"
    )
    psu_ok: Optional[bool] = betterproto.bool_field(3, optional=True, group="_psuOK")
    aux_input: Optional["PowerSupplyMessage"] = betterproto.message_field(
        4, optional=True, group="_auxInput"
    )
    max_power_draw: Optional[float] = betterproto.float_field(
        5, optional=True, group="_maxPowerDraw"
    )
    vbus_output: Optional["PowerSupplyMessage"] = betterproto.message_field(
        6, optional=True, group="_vbusOutput"
    )
    aux_stat: Optional[bool] = betterproto.bool_field(
        7, optional=True, group="_aux_stat"
    )
    pd_usb_attached: Optional[bool] = betterproto.bool_field(
        8, optional=True, group="_pd_usb_attached"
    )
    pd_contract_negotiated: Optional[bool] = betterproto.bool_field(
        9, optional=True, group="_pd_contract_negotiated"
    )
    pd_contract_voltage: Optional[float] = betterproto.float_field(
        10, optional=True, group="_pd_contract_voltage"
    )
    pd_contract_current: Optional[float] = betterproto.float_field(
        11, optional=True, group="_pd_contract_current"
    )


@dataclass(eq=False, repr=False)
class PowerStateMessage(betterproto.Message):
    epos300_power_state_message: "Epos300PowerStateMessage" = betterproto.message_field(
        1, group="message_type"
    )
    play_power_state_message: "PlayPowerStateMessage" = betterproto.message_field(
        2, group="message_type"
    )
    epos600_power_state_message: "Epos600PowerStateMessage" = betterproto.message_field(
        3, group="message_type"
    )


@dataclass(eq=False, repr=False)
class Epos300ControllerTemperaturesMessage(betterproto.Message):
    ui_pcb_temperature: Optional[float] = betterproto.float_field(
        1, optional=True, group="_ui_pcb_temperature"
    )
    power_pcb_temperature: Optional[float] = betterproto.float_field(
        2, optional=True, group="_power_pcb_temperature"
    )


@dataclass(eq=False, repr=False)
class Epos600ControllerTemperaturesMessage(betterproto.Message):
    ui_pcb_temperature: Optional[float] = betterproto.float_field(
        1, optional=True, group="_ui_pcb_temperature"
    )
    power_pcb_temperature: Optional[float] = betterproto.float_field(
        2, optional=True, group="_power_pcb_temperature"
    )


@dataclass(eq=False, repr=False)
class Epos300LampheadTemperaturesMessage(betterproto.Message):
    emitter_temperature: Optional[float] = betterproto.float_field(
        1, optional=True, group="_emitter_temperature"
    )
    pcb_temperature: Optional[float] = betterproto.float_field(
        2, optional=True, group="_pcb_temperature"
    )


@dataclass(eq=False, repr=False)
class Epos600LampheadTemperaturesMessage(betterproto.Message):
    emitter_temperature: Optional[float] = betterproto.float_field(
        1, optional=True, group="_emitter_temperature"
    )
    pcb_temperature: Optional[float] = betterproto.float_field(
        2, optional=True, group="_pcb_temperature"
    )


@dataclass(eq=False, repr=False)
class PlayTemperaturesMessage(betterproto.Message):
    emitter_temperature: Optional[float] = betterproto.float_field(
        1, optional=True, group="_emitterTemperature"
    )
    driver_transistor_temperature: Optional[float] = betterproto.float_field(
        2, optional=True, group="_driverTransistorTemperature"
    )
    battery_temperature: Optional[float] = betterproto.float_field(
        3, optional=True, group="_batteryTemperature"
    )


@dataclass(eq=False, repr=False)
class DeviceTemperaturesMessage(betterproto.Message):
    epos300_controller_temperatures_message: "Epos300ControllerTemperaturesMessage" = (
        betterproto.message_field(1, group="message_type")
    )
    play_temperatures_message: "PlayTemperaturesMessage" = betterproto.message_field(
        2, group="message_type"
    )
    epos300_lamphead_temperatures_message: "Epos300LampheadTemperaturesMessage" = (
        betterproto.message_field(3, group="message_type")
    )
    epos600_lamphead_temperatures_message: "Epos600LampheadTemperaturesMessage" = (
        betterproto.message_field(4, group="message_type")
    )
    epos600_controller_temperatures_message: "Epos600ControllerTemperaturesMessage" = (
        betterproto.message_field(5, group="message_type")
    )


@dataclass(eq=False, repr=False)
class SerialNumberMessage(betterproto.Message):
    data: Optional[bytes] = betterproto.bytes_field(1, optional=True, group="_data")


@dataclass(eq=False, repr=False)
class CubicSplineMessage(betterproto.Message):
    cubic_spline_factor_id: Optional[
        "CubicSplineMessageCubicSplineFactorId"
    ] = betterproto.enum_field(1, optional=True, group="_cubicSplineFactorId")
    offset: Optional[int] = betterproto.uint32_field(2, optional=True, group="_offset")
    data: List[float] = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class ArrayMessage(betterproto.Message):
    offset: Optional[int] = betterproto.uint32_field(1, optional=True, group="_offset")
    data: List[float] = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class VersionMessage(betterproto.Message):
    major: Optional[int] = betterproto.uint32_field(1, optional=True, group="_major")
    minor: Optional[int] = betterproto.uint32_field(2, optional=True, group="_minor")
    revision: Optional[int] = betterproto.uint32_field(
        3, optional=True, group="_revision"
    )
    build: Optional[int] = betterproto.uint32_field(4, optional=True, group="_build")


@dataclass(eq=False, repr=False)
class ImageInfoMessage(betterproto.Message):
    image_exists: Optional[bool] = betterproto.bool_field(
        1, optional=True, group="_imageExists"
    )
    image_slot: Optional[int] = betterproto.int32_field(
        2, optional=True, group="_imageSlot"
    )
    version: Optional["VersionMessage"] = betterproto.message_field(
        3, optional=True, group="_version"
    )
    hash: Optional[bytes] = betterproto.bytes_field(4, optional=True, group="_hash")
    is_pending: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_isPending"
    )
    is_active: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_isActive"
    )
    is_confirmed: Optional[bool] = betterproto.bool_field(
        7, optional=True, group="_isConfirmed"
    )


@dataclass(eq=False, repr=False)
class DriverStateMessage(betterproto.Message):
    pcb_temperature_c: Optional[float] = betterproto.float_field(
        1, optional=True, group="_pcb_temperature_c"
    )
    emitter_temperature_c: Optional[float] = betterproto.float_field(
        2, optional=True, group="_emitter_temperature_c"
    )
    is_emitter_enabled: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_isEmitterEnabled"
    )
    is_emitter_overheated: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_isEmitterOverheated"
    )
    session_id: Optional[int] = betterproto.int32_field(
        5, optional=True, group="_sessionId"
    )
    is_connected: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_isConnected"
    )
    input_voltage: Optional[float] = betterproto.float_field(
        7, optional=True, group="_input_voltage"
    )


@dataclass(eq=False, repr=False)
class IntensityMessage(betterproto.Message):
    intensity: Optional[float] = betterproto.float_field(
        1, optional=True, group="_intensity"
    )
    light_output_type: Optional[
        "IntensityMessageLightOutputType"
    ] = betterproto.enum_field(2, optional=True, group="_lightOutputType")
    update_light_output: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_updateLightOutput"
    )
    smooth_intensity: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_smoothIntensity"
    )
    smooth_intensity_duration_ms: Optional[int] = betterproto.int32_field(
        5, optional=True, group="_smoothIntensityDurationMs"
    )


@dataclass(eq=False, repr=False)
class PlayBoostMessage(betterproto.Message):
    power_mode: Optional["PlayBoostMessagePlayPowerMode"] = betterproto.enum_field(
        1, optional=True, group="_powerMode"
    )


@dataclass(eq=False, repr=False)
class FlashEmitterMessage(betterproto.Message):
    intensity: Optional[float] = betterproto.float_field(
        1, optional=True, group="_intensity"
    )
    delay_before_applying_flash_ms: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_delayBeforeApplyingFlashMs"
    )
    duration_of_light_on: Optional[int] = betterproto.uint32_field(
        3, optional=True, group="_durationOfLightOn"
    )
    x: Optional[float] = betterproto.float_field(4, optional=True, group="_x")
    y: Optional[float] = betterproto.float_field(5, optional=True, group="_y")


@dataclass(eq=False, repr=False)
class CctMessage(betterproto.Message):
    cct: Optional[int] = betterproto.uint32_field(1, optional=True, group="_cct")
    tint: Optional[float] = betterproto.float_field(2, optional=True, group="_tint")


@dataclass(eq=False, repr=False)
class RgbMessage(betterproto.Message):
    red: Optional[float] = betterproto.float_field(1, optional=True, group="_red")
    green: Optional[float] = betterproto.float_field(2, optional=True, group="_green")
    blue: Optional[float] = betterproto.float_field(3, optional=True, group="_blue")
    color_space: Optional["RgbColorSpace"] = betterproto.enum_field(
        4, optional=True, group="_color_space"
    )
    white_point: Optional[int] = betterproto.uint32_field(
        5, optional=True, group="_white_point"
    )


@dataclass(eq=False, repr=False)
class HsiMessage(betterproto.Message):
    hue: Optional[float] = betterproto.float_field(1, optional=True, group="_hue")
    saturation: Optional[float] = betterproto.float_field(
        2, optional=True, group="_saturation"
    )
    intensity: Optional[float] = betterproto.float_field(
        3, optional=True, group="_intensity"
    )
    color_space: Optional["RgbColorSpace"] = betterproto.enum_field(
        4, optional=True, group="_color_space"
    )
    white_point: Optional[int] = betterproto.uint32_field(
        5, optional=True, group="_white_point"
    )


@dataclass(eq=False, repr=False)
class XyMessage(betterproto.Message):
    x: Optional[float] = betterproto.float_field(1, optional=True, group="_x")
    y: Optional[float] = betterproto.float_field(2, optional=True, group="_y")


@dataclass(eq=False, repr=False)
class RgbaclMessage(betterproto.Message):
    red: Optional[float] = betterproto.float_field(1, optional=True, group="_red")
    green: Optional[float] = betterproto.float_field(2, optional=True, group="_green")
    blue: Optional[float] = betterproto.float_field(3, optional=True, group="_blue")
    amber: Optional[float] = betterproto.float_field(4, optional=True, group="_amber")
    cyan: Optional[float] = betterproto.float_field(5, optional=True, group="_cyan")
    lime: Optional[float] = betterproto.float_field(6, optional=True, group="_lime")


@dataclass(eq=False, repr=False)
class GelFileMessage(betterproto.Message):
    brand_name: Optional[str] = betterproto.string_field(
        1, optional=True, group="_brandName"
    )
    category_name: Optional[str] = betterproto.string_field(
        2, optional=True, group="_categoryName"
    )
    gel_name: Optional[str] = betterproto.string_field(
        3, optional=True, group="_gelName"
    )
    gel_swatch_number: Optional[str] = betterproto.string_field(
        4, optional=True, group="_gelSwatchNumber"
    )
    index_in_category: Optional[int] = betterproto.uint32_field(
        5, optional=True, group="_indexInCategory"
    )
    lin_interp_ccts: List[float] = betterproto.float_field(6)
    lin_interp_x_coeffs: List[float] = betterproto.float_field(7)
    lin_interp_y_coeffs: List[float] = betterproto.float_field(8)
    display_rgb_red: Optional[int] = betterproto.uint32_field(
        9, optional=True, group="_displayRGBRed"
    )
    display_rgb_green: Optional[int] = betterproto.uint32_field(
        10, optional=True, group="_displayRGBGreen"
    )
    display_rgb_blue: Optional[int] = betterproto.uint32_field(
        11, optional=True, group="_displayRGBBlue"
    )


@dataclass(eq=False, repr=False)
class GelStateMessage(betterproto.Message):
    brand_name: Optional[str] = betterproto.string_field(
        1, optional=True, group="_brandName"
    )
    category_name: Optional[str] = betterproto.string_field(
        2, optional=True, group="_categoryName"
    )
    gel_file_name: Optional[str] = betterproto.string_field(
        3, optional=True, group="_gelFileName"
    )
    gel_index: Optional[int] = betterproto.uint32_field(
        4, optional=True, group="_gel_index"
    )
    category_page: Optional[int] = betterproto.uint32_field(
        5, optional=True, group="_category_page"
    )
    cct: Optional[int] = betterproto.uint32_field(6, optional=True, group="_cct")


@dataclass(eq=False, repr=False)
class GelSetMessage(betterproto.Message):
    gel_brand_category: Optional["GelBrandCategory"] = betterproto.enum_field(
        1, optional=True, group="_gelBrandCategory"
    )
    gel_index: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_gelIndex"
    )
    cct: Optional[int] = betterproto.uint32_field(3, optional=True, group="_cct")


@dataclass(eq=False, repr=False)
class CrossfadeCcthsiMessage(betterproto.Message):
    crossfade: Optional[float] = betterproto.float_field(
        1, optional=True, group="_crossfade"
    )
    cct: Optional["CctMessage"] = betterproto.message_field(
        2, optional=True, group="_cct"
    )
    hsi: Optional["HsiMessage"] = betterproto.message_field(
        3, optional=True, group="_hsi"
    )


@dataclass(eq=False, repr=False)
class CrossfadeCctrgbMessage(betterproto.Message):
    crossfade: Optional[float] = betterproto.float_field(
        1, optional=True, group="_crossfade"
    )
    cct: Optional["CctMessage"] = betterproto.message_field(
        2, optional=True, group="_cct"
    )
    rgb: Optional["RgbMessage"] = betterproto.message_field(
        3, optional=True, group="_rgb"
    )


@dataclass(eq=False, repr=False)
class CctAndRgbMessage(betterproto.Message):
    cct: Optional["CctMessage"] = betterproto.message_field(
        1, optional=True, group="_cct"
    )
    cct_intensity: Optional[float] = betterproto.float_field(
        2, optional=True, group="_cctIntensity"
    )
    red: Optional[float] = betterproto.float_field(3, optional=True, group="_red")
    green: Optional[float] = betterproto.float_field(4, optional=True, group="_green")
    blue: Optional[float] = betterproto.float_field(5, optional=True, group="_blue")


@dataclass(eq=False, repr=False)
class SetEmitterChannelsMessage(betterproto.Message):
    output_value: List[float] = betterproto.float_field(1)
    verify_outputs: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_verifyOutputs"
    )


@dataclass(eq=False, repr=False)
class FanMessage(betterproto.Message):
    id: Optional[int] = betterproto.int32_field(1, optional=True, group="_id")
    is_on: Optional[bool] = betterproto.bool_field(2, optional=True, group="_isOn")
    speed_percent: Optional[float] = betterproto.float_field(
        3, optional=True, group="_speed_percent"
    )
    speed_rpm: Optional[int] = betterproto.int32_field(
        4, optional=True, group="_speed_rpm"
    )
    min_rpm: Optional[int] = betterproto.int32_field(5, optional=True, group="_min_rpm")
    max_rpm: Optional[int] = betterproto.int32_field(6, optional=True, group="_max_rpm")


@dataclass(eq=False, repr=False)
class FanControllerMessage(betterproto.Message):
    mode: Optional["FanControllerMode"] = betterproto.enum_field(
        1, optional=True, group="_mode"
    )
    manual_fan_duty_cycle: Optional[float] = betterproto.float_field(
        2, optional=True, group="_manualFanDutyCycle"
    )


@dataclass(eq=False, repr=False)
class UploadFirmwareChunkMessage(betterproto.Message):
    address: Optional[int] = betterproto.uint32_field(
        1, optional=True, group="_address"
    )
    number_of_bytes: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_number_of_bytes"
    )
    data: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class McuMgrMessage(betterproto.Message):
    message_type: Optional["McuMgrMessageTypes"] = betterproto.enum_field(
        1, optional=True, group="_messageType"
    )


@dataclass(eq=False, repr=False)
class MaxWattDrawMessage(betterproto.Message):
    maximum_watt_draw: Optional[float] = betterproto.float_field(
        1, optional=True, group="_maximumWattDraw"
    )


@dataclass(eq=False, repr=False)
class CurrentLightOutputMessage(betterproto.Message):
    max_y: Optional[float] = betterproto.float_field(1, optional=True, group="_maxY")
    current_absolute_outputs: List[float] = betterproto.float_field(2)
    current_relative_outputs: List[float] = betterproto.float_field(3)
    x: Optional[float] = betterproto.float_field(4, optional=True, group="_x")
    y: Optional[float] = betterproto.float_field(5, optional=True, group="_y")
    intensity_message: Optional["IntensityMessage"] = betterproto.message_field(
        6, optional=True, group="_intensityMessage"
    )
    current_emitter_temperature: Optional[float] = betterproto.float_field(
        7, optional=True, group="_currentEmitterTemperature"
    )
    current_max_watt_draw_message: Optional[
        "MaxWattDrawMessage"
    ] = betterproto.message_field(8, optional=True, group="_currentMaxWattDrawMessage")
    estimated_watt_draw: Optional[float] = betterproto.float_field(
        10, optional=True, group="_estimatedWattDraw"
    )


@dataclass(eq=False, repr=False)
class FireEffectParams(betterproto.Message):
    fire_type: Optional["FireEffectParamsFireType"] = betterproto.enum_field(
        1, optional=True, group="_fireType"
    )
    wind_type: Optional["FireEffectParamsWindType"] = betterproto.enum_field(
        2, optional=True, group="_windType"
    )


@dataclass(eq=False, repr=False)
class CctChaseEffectParams(betterproto.Message):
    cct_start: Optional["CctMessage"] = betterproto.message_field(
        1, optional=True, group="_cctStart"
    )
    cct_stop: Optional["CctMessage"] = betterproto.message_field(
        2, optional=True, group="_cctStop"
    )
    duration_minutes: Optional[float] = betterproto.float_field(
        3, optional=True, group="_durationMinutes"
    )
    duration_seconds: Optional[float] = betterproto.float_field(
        4, optional=True, group="_durationSeconds"
    )
    loop_type: Optional["EffectLoopType"] = betterproto.enum_field(
        5, optional=True, group="_loopType"
    )


@dataclass(eq=False, repr=False)
class ColorChaseEffectParams(betterproto.Message):
    hue1: Optional[float] = betterproto.float_field(1, optional=True, group="_hue1")
    hue2: Optional[float] = betterproto.float_field(2, optional=True, group="_hue2")
    saturation: Optional[float] = betterproto.float_field(
        3, optional=True, group="_saturation"
    )
    intensity: Optional[float] = betterproto.float_field(
        4, optional=True, group="_intensity"
    )
    color_space: Optional["RgbColorSpace"] = betterproto.enum_field(
        5, optional=True, group="_color_space"
    )
    white_point: Optional[int] = betterproto.uint32_field(
        6, optional=True, group="_white_point"
    )
    duration_minutes: Optional[float] = betterproto.float_field(
        7, optional=True, group="_durationMinutes"
    )
    duration_seconds: Optional[float] = betterproto.float_field(
        8, optional=True, group="_durationSeconds"
    )
    loop_type: Optional["EffectLoopType"] = betterproto.enum_field(
        9, optional=True, group="_loopType"
    )


@dataclass(eq=False, repr=False)
class SirenEffectParams(betterproto.Message):
    color_combo: Optional["SirenColorCombination"] = betterproto.enum_field(
        1, optional=True, group="_colorCombo"
    )
    nr_of_flashes_per_color: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_nrOfFlashesPerColor"
    )
    flash_duration: Optional[int] = betterproto.uint32_field(
        3, optional=True, group="_flashDuration"
    )
    speed: Optional[int] = betterproto.uint32_field(4, optional=True, group="_speed")


@dataclass(eq=False, repr=False)
class MultiColorMessage(betterproto.Message):
    selected_color_type: Optional["ColorType"] = betterproto.enum_field(
        1, optional=True, group="_selectedColorType"
    )
    cct: Optional["CctMessage"] = betterproto.message_field(
        2, optional=True, group="_cct"
    )
    rgb: Optional["RgbMessage"] = betterproto.message_field(
        3, optional=True, group="_rgb"
    )
    hsi: Optional["HsiMessage"] = betterproto.message_field(
        4, optional=True, group="_hsi"
    )
    xy: Optional["XyMessage"] = betterproto.message_field(5, optional=True, group="_xy")


@dataclass(eq=False, repr=False)
class PulseEffectParams(betterproto.Message):
    color: Optional["MultiColorMessage"] = betterproto.message_field(
        1, optional=True, group="_color"
    )
    pulses_per_minute: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_pulsesPerMinute"
    )
    pulse_type: Optional["PulseType"] = betterproto.enum_field(
        3, optional=True, group="_pulseType"
    )


@dataclass(eq=False, repr=False)
class StrobeEffectParams(betterproto.Message):
    color: Optional["MultiColorMessage"] = betterproto.message_field(
        1, optional=True, group="_color"
    )
    strobes_per_minute: Optional[int] = betterproto.uint32_field(
        2, optional=True, group="_strobesPerMinute"
    )
    flash_duration: Optional[int] = betterproto.uint32_field(
        3, optional=True, group="_flashDuration"
    )


@dataclass(eq=False, repr=False)
class DimmingEffectParams(betterproto.Message):
    color: Optional["MultiColorMessage"] = betterproto.message_field(
        1, optional=True, group="_color"
    )
    starting_intensity: Optional[float] = betterproto.float_field(
        2, optional=True, group="_startingIntensity"
    )
    stopping_intensity: Optional[float] = betterproto.float_field(
        3, optional=True, group="_stoppingIntensity"
    )
    dimming_curve: Optional["PulseType"] = betterproto.enum_field(
        4, optional=True, group="_dimmingCurve"
    )
    idle_at_starting_intensity_seconds: Optional[float] = betterproto.float_field(
        5, optional=True, group="_idleAtStartingIntensitySeconds"
    )
    dimming_duration_minutes: Optional[float] = betterproto.float_field(
        6, optional=True, group="_dimmingDurationMinutes"
    )
    dimming_duration_seconds: Optional[float] = betterproto.float_field(
        7, optional=True, group="_dimmingDurationSeconds"
    )
    loop_type: Optional["EffectLoopType"] = betterproto.enum_field(
        8, optional=True, group="_loopType"
    )


@dataclass(eq=False, repr=False)
class LightningEffectParams(betterproto.Message):
    color: Optional["MultiColorMessage"] = betterproto.message_field(
        1, optional=True, group="_color"
    )
    color_deviation: Optional[float] = betterproto.float_field(
        2, optional=True, group="_colorDeviation"
    )
    storm_intensity: Optional[float] = betterproto.float_field(
        3, optional=True, group="_stormIntensity"
    )


@dataclass(eq=False, repr=False)
class LightEffectParamMessage(betterproto.Message):
    fire_params: "FireEffectParams" = betterproto.message_field(1, group="param_type")
    cct_chase_params: "CctChaseEffectParams" = betterproto.message_field(
        2, group="param_type"
    )
    color_chase_params: "ColorChaseEffectParams" = betterproto.message_field(
        3, group="param_type"
    )
    siren_params: "SirenEffectParams" = betterproto.message_field(4, group="param_type")
    pulse_params: "PulseEffectParams" = betterproto.message_field(5, group="param_type")
    strobe_params: "StrobeEffectParams" = betterproto.message_field(
        6, group="param_type"
    )
    lightning_params: "LightningEffectParams" = betterproto.message_field(
        7, group="param_type"
    )
    dimming_params: "DimmingEffectParams" = betterproto.message_field(
        8, group="param_type"
    )


@dataclass(eq=False, repr=False)
class LightEffectMessage(betterproto.Message):
    light_effect: Optional["LightEffectType"] = betterproto.enum_field(
        1, optional=True, group="_lightEffect"
    )
    control_state: Optional["LightEffectState"] = betterproto.enum_field(
        2, optional=True, group="_controlState"
    )
    params: Optional["LightEffectParamMessage"] = betterproto.message_field(
        3, optional=True, group="_params"
    )


@dataclass(eq=False, repr=False)
class LightEffectModeStateMessage(betterproto.Message):
    navigation_state: Optional["EffectNavigationState"] = betterproto.enum_field(
        1, optional=True, group="_navigationState"
    )
    selected_effect: Optional["LightEffectType"] = betterproto.enum_field(
        2, optional=True, group="_selectedEffect"
    )
    control_state: Optional["LightEffectState"] = betterproto.enum_field(
        3, optional=True, group="_controlState"
    )
    fire_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        7, optional=True, group="_fireEffectSelectedVariable"
    )
    cct_chase_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        8, optional=True, group="_cctChaseEffectSelectedVariable"
    )
    color_chase_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        9, optional=True, group="_colorChaseEffectSelectedVariable"
    )
    siren_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        10, optional=True, group="_sirenEffectSelectedVariable"
    )
    pulse_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        11, optional=True, group="_pulseEffectSelectedVariable"
    )
    strobe_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        12, optional=True, group="_strobeEffectSelectedVariable"
    )
    lightning_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        13, optional=True, group="_lightningEffectSelectedVariable"
    )
    dimming_effect_selected_variable: Optional[int] = betterproto.uint32_field(
        14, optional=True, group="_dimmingEffectSelectedVariable"
    )


@dataclass(eq=False, repr=False)
class DeviceHwCodeMessage(betterproto.Message):
    hardware_code: Optional[int] = betterproto.uint32_field(
        1, optional=True, group="_hardwareCode"
    )
    hardware_code_analog: Optional[float] = betterproto.float_field(
        2, optional=True, group="_hardwareCodeAnalog"
    )


@dataclass(eq=False, repr=False)
class NackMessage(betterproto.Message):
    nack_hack_id: Optional[int] = betterproto.uint32_field(
        1, optional=True, group="_nackHackId"
    )
    reason: Optional[int] = betterproto.int32_field(2, optional=True, group="_reason")


@dataclass(eq=False, repr=False)
class BleTestingMessage(betterproto.Message):
    ble_test_request: Optional[
        "BleTestingMessageBleTestRequest"
    ] = betterproto.enum_field(1, optional=True, group="_bleTestRequest")
    device_serial_number: Optional["SerialNumberMessage"] = betterproto.message_field(
        2, optional=True, group="_deviceSerialNumber"
    )
    result_rssi: Optional[int] = betterproto.int32_field(
        3, optional=True, group="_result_rssi"
    )


@dataclass(eq=False, repr=False)
class DriverMessage(betterproto.Message):
    relay_to_lamp_head: Optional[bool] = betterproto.bool_field(
        150, optional=True, group="_relayToLampHead"
    )
    expects_response: Optional[bool] = betterproto.bool_field(
        151, optional=True, group="_expectsResponse"
    )
    intensity_config: Optional["IntensityMessage"] = betterproto.message_field(
        1, optional=True, group="_intensityConfig"
    )
    request: "RequestMessage" = betterproto.message_field(2, group="message_type")
    cct: "CctMessage" = betterproto.message_field(3, group="message_type")
    rgb: "RgbMessage" = betterproto.message_field(4, group="message_type")
    hsi: "HsiMessage" = betterproto.message_field(5, group="message_type")
    xy: "XyMessage" = betterproto.message_field(6, group="message_type")
    gel: "GelSetMessage" = betterproto.message_field(7, group="message_type")
    effect: "LightEffectMessage" = betterproto.message_field(8, group="message_type")
    crossfade_ccthsi: "CrossfadeCcthsiMessage" = betterproto.message_field(
        9, group="message_type"
    )
    crossfade_cctrgb: "CrossfadeCctrgbMessage" = betterproto.message_field(
        10, group="message_type"
    )
    cct_and_rgb: "CctAndRgbMessage" = betterproto.message_field(
        11, group="message_type"
    )
    rgbacl: "RgbaclMessage" = betterproto.message_field(12, group="message_type")
    command_message: "CommandMessage" = betterproto.message_field(
        15, group="message_type"
    )
    set_emitter_channels: "SetEmitterChannelsMessage" = betterproto.message_field(
        16, group="message_type"
    )
    firmware_chunk: "UploadFirmwareChunkMessage" = betterproto.message_field(
        25, group="message_type"
    )
    mcu_mgr: "McuMgrMessage" = betterproto.message_field(26, group="message_type")
    max_watt_draw_message: "MaxWattDrawMessage" = betterproto.message_field(
        28, group="message_type"
    )
    fan_message: "FanMessage" = betterproto.message_field(35, group="message_type")
    fan_controller_message: "FanControllerMessage" = betterproto.message_field(
        36, group="message_type"
    )
    flash_emitter_message: "FlashEmitterMessage" = betterproto.message_field(
        37, group="message_type"
    )
    emitter_output_message: "EmitterOutputMessage" = betterproto.message_field(
        38, group="message_type"
    )
    play_boost_message: "PlayBoostMessage" = betterproto.message_field(
        39, group="message_type"
    )
    light_settings_message: "LightSettingsMessage" = betterproto.message_field(
        40, group="message_type"
    )
    ble_testing_message: "BleTestingMessage" = betterproto.message_field(
        104, group="message_type"
    )


@dataclass(eq=False, repr=False)
class LightSettingsMessage(betterproto.Message):
    dmx_address: Optional[int] = betterproto.int32_field(
        1, optional=True, group="_dmx_address"
    )
    dmx_mode: Optional["PbDmxMode"] = betterproto.enum_field(
        2, optional=True, group="_dmx_mode"
    )
    dmx_profile: Optional[int] = betterproto.int32_field(
        3, optional=True, group="_dmx_profile"
    )
    dmx_dropout_mode: Optional["PbDmxDropoutMode"] = betterproto.enum_field(
        4, optional=True, group="_dmx_dropout_mode"
    )
    dmx_dropout_time_s: Optional[int] = betterproto.int32_field(
        5, optional=True, group="_dmx_dropout_time_s"
    )
    crmx_enabled: Optional[bool] = betterproto.bool_field(
        10, optional=True, group="_crmx_enabled"
    )
    crmx_tx_power: Optional[int] = betterproto.int32_field(
        11, optional=True, group="_crmx_tx_power"
    )
    artnet_sacn_state: Optional["PbArtNetSacnState"] = betterproto.enum_field(
        25, optional=True, group="_artnet_sacn_state"
    )
    artnet_net: Optional[int] = betterproto.int32_field(
        26, optional=True, group="_artnet_net"
    )
    artnet_subnet: Optional[int] = betterproto.int32_field(
        27, optional=True, group="_artnet_subnet"
    )
    artnet_universe: Optional[int] = betterproto.int32_field(
        28, optional=True, group="_artnet_universe"
    )
    sacn_universe: Optional[int] = betterproto.int32_field(
        29, optional=True, group="_sacn_universe"
    )
    ethernet_ip_mode: Optional["PbEthernetIpMode"] = betterproto.enum_field(
        30, optional=True, group="_ethernet_ip_mode"
    )
    ethernet_ip_address: Optional[int] = betterproto.uint32_field(
        31, optional=True, group="_ethernet_ip_address"
    )
    ethernet_ip_subnet_mask: Optional[int] = betterproto.uint32_field(
        32, optional=True, group="_ethernet_ip_subnet_mask"
    )
    btle_max_connections: Optional[int] = betterproto.int32_field(
        40, optional=True, group="_btle_max_connections"
    )
    charge_on_dc: Optional["PbChargeOnDcSetting"] = betterproto.enum_field(
        50, optional=True, group="_charge_on_dc"
    )
    fan_mode: Optional["FanControllerMode"] = betterproto.enum_field(
        60, optional=True, group="_fan_mode"
    )
