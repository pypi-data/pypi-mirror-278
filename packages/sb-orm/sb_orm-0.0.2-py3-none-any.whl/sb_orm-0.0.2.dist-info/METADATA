Metadata-Version: 2.1
Name: sb_orm
Version: 0.0.2
Summary: A python stupid mysql orm
Author-email: idcim <rogermmg@gmail.com>
Project-URL: Homepage, https://github.com/idcim/sb_orm
Project-URL: Bug Tracker, https://github.com/idcim/sb_orm/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE

# SB_ORM

`sb_orm` 是一个简单灵活的 Python 库，使用 SQLAlchemy ORM 与 MySQL 数据库进行交互。它提供了一个易于使用的接口，用于执行常见的数据库操作，例如 `SELECT`、`INSERT`、`UPDATE` 和 `DELETE`。

## 特性

- 为常见的数据库操作简化了查询接口。
- 支持条件查询、排序和限制结果。
- 数据库会话管理采用单例模式。
- 使用 SQLAlchemy ORM 进行可靠的数据库交互。

## 安装

你可以使用 `pip` 从 PyPI 安装 `sb_orm`：

```bash
pip install sb_orm
```

## 使用
### 配置
首先，需要配置数据库连接的环境变量(.env)。确保以下变量已设置：
```
DB_USER: 数据库用户名
DB_PASSWORD: 数据库密码
DB_HOST: 数据库主机 (例如 localhost)
DB_NAME: 数据库名称
DB_PREFIX: (可选) 表名前缀
```
### 基本操作
初始化数据库会话
```python
from sb_orm import DatabaseSession

db_session = DatabaseSession()
```
### 查询数据
```python
query = db_session.db('your_table_name').where({'column_name': 'value'}).order_by('id', descending=True).limit(10)
results = query.select()
print(results)
```

### 插入数据
```python
data = {'column1': 'value1', 'column2': 'value2'}
db_session.db('your_table_name').insert(data)

```
### 更新数据
```python
query = db_session.db('your_table_name').where({'id': 1})
data = {'column1': 'new_value'}
query.update(data)

```
### 删除数据
```python
query = db_session.db('your_table_name').where({'id': 1})
query.delete()
```
## 贡献
欢迎贡献！请 fork 仓库并提交 pull request 以进行任何改进或错误修复。

## 联系
如有任何问题或疑问，请在 GitHub https://github.com/idcim/sb_orm 仓库 上打开 issue。
