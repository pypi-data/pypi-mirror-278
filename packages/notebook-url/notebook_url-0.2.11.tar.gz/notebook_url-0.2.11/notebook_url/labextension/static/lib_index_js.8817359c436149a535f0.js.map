{"version":3,"file":"lib_index_js.8817359c436149a535f0.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAsC;AACiC;AAED;AACrB;AAEc;AACM;AACpB;AAEjD,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AAE9C,sDAAsD;AACtD,sDAAsD;AACtD,SAAS,uBAAuB,CAAC,aAA4B;IACzD,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7E,MAAM,iBAAiB,GAAG,oEAAsC,CAAC,eAAe,CAAC,CAAC;IAClF,MAAM,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,aAAa,iBAAiB,EAAE,CAAC;IAEpG,2DAAS,CAAC,YAAY,CAAC,MAAM,CAAC;IAC9B,KAAK,CAAC,yBAAyB,CAAC,CAAC;AACrC,CAAC;AAED,yDAAyD;AACzD,SAAS,yBAAyB;IAC9B,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,MAAM,iBAAiB,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,iBAAiB,EAAE;QACnB,MAAM,mBAAmB,GAAG,wEAA0C,CAAC,iBAAiB,CAAC,CAAC;QAC1F,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;KAC1C;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,mDAAmD;AACnD,MAAM,wBAAwB;IAC1B,SAAS,CAAC,KAAoB;QAC1B,MAAM,MAAM,GAAG,IAAI,+DAAa,CAAC;YAC7B,SAAS,EAAE,WAAW;YACtB,KAAK,EAAE,aAAa;YACpB,OAAO,EAAE,GAAG,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC;YAC7C,OAAO,EAAE,oDAAoD;SAChE,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO,IAAI,kEAAkB,CAAC,GAAG,EAAE;YAC/B,MAAM,CAAC,OAAO,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAED,MAAM,SAAS,GAAgC;IAC3C,EAAE,EAAE,qBAAqB;IACzB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,kEAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,iEAAe,EAAE,2DAAS,EAAE,yEAAgB,CAAC;IACxD,QAAQ,EAAE,CAAC,GAAoB,EAAE,OAAyB,EAAE,OAA+B,EAAE,IAAsB,EAAE,eAAwC,EAAE,EAAE;QAC7J,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC;QAE5B,yBAAyB;QACzB,MAAM,eAAe,GAAG,IAAI,wBAAwB,EAAE,CAAC;QACvD,WAAW,CAAC,kBAAkB,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QAE5D,6CAA6C;QAC7C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;YACnB,MAAM,cAAc,GAAG,yBAAyB,EAAE,CAAC;YACnD,IAAI,cAAc,IAAI,OAAO,CAAC,aAAa,EAAE;gBACzC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;aAChE;YAED,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAC1C,MAAM,OAAO,GAAG,yBAAyB,EAAE,CAAC;gBAC5C,IAAI,OAAO,EAAE;oBACT,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;iBACzC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,6CAA6C;QAC7C,IAAI,OAAO,EAAE;YACT,MAAM,QAAQ,GAAG,qBAAqB,CAAC;YACvC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;SACzD;QAED,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;SAC9D;IACL,CAAC;CACJ,CAAC;AAEF,iEAAe,SAAS,EAAC","sources":["webpack://notebook-url/./src/index.ts"],"sourcesContent":["import * as LZString from 'lz-string';\nimport { NotebookPanel, INotebookTracker } from '@jupyterlab/notebook';\nimport { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';\nimport { ToolbarButton, ICommandPalette } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IDisposable, DisposableDelegate } from '@lumino/disposable';\nimport { Clipboard } from '@jupyterlab/apputils';\n\nconsole.log('notebook_to_url_ext is loaded!');\n\n// Compress the notebook text and set as URL parameter\n// Compress the notebook text and set as URL parameter\nfunction compressNotebookContent(notebookPanel: NotebookPanel): void {\n    const notebookContent = JSON.stringify(notebookPanel.context.model.toJSON());\n    const compressedContent = LZString.compressToEncodedURIComponent(notebookContent);\n    const newUrl = `${window.location.origin}${window.location.pathname}#notebook=${compressedContent}`;\n\n    Clipboard.copyToSystem(newUrl)\n    alert('URL copied to clipboard');\n}\n\n// Decompress the URL parameter and load notebook content\nfunction decompressNotebookContent(): any | null {\n    const urlParams = new URLSearchParams(window.location.hash.slice(1));\n    const compressedContent = urlParams.get('notebook');\n    if (compressedContent) {\n        const decompressedContent = LZString.decompressFromEncodedURIComponent(compressedContent);\n        return JSON.parse(decompressedContent);\n    }\n    return null;\n}\n\n// Add \"Save to URL\" button to the notebook toolbar\nclass SaveToUrlButtonExtension implements DocumentRegistry.IWidgetExtension<NotebookPanel, any> {\n    createNew(panel: NotebookPanel): IDisposable {\n        const button = new ToolbarButton({\n            className: 'saveToUrl',\n            label: 'Save to URL',\n            onClick: () => compressNotebookContent(panel),\n            tooltip: 'Save notebook content to URL and copy to clipboard'\n        });\n\n        panel.toolbar.insertAfter('cellType', 'saveToUrl', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n\nconst extension: JupyterFrontEndPlugin<void> = {\n    id: 'notebook_to_url_ext',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ICommandPalette, IMainMenu, ISettingRegistry],\n    activate: (app: JupyterFrontEnd, tracker: INotebookTracker, palette: ICommandPalette | null, menu: IMainMenu | null, settingRegistry: ISettingRegistry | null) => {\n        console.log('Activating notebook_to_url_ext', app, tracker);\n\n        const { docRegistry } = app;\n\n        // Add the toolbar button\n        const buttonExtension = new SaveToUrlButtonExtension();\n        docRegistry.addWidgetExtension('Notebook', buttonExtension);\n\n        // Handle restoring notebook content from URL\n        app.restored.then(() => {\n            const initialContent = decompressNotebookContent();\n            if (initialContent && tracker.currentWidget) {\n                tracker.currentWidget.context.model.fromJSON(initialContent);\n            }\n\n            tracker.widgetAdded.connect((sender, panel) => {\n                const content = decompressNotebookContent();\n                if (content) {\n                    panel.context.model.fromJSON(content);\n                }\n            });\n        });\n\n        // Optional: Add commands to palette and menu\n        if (palette) {\n            const category = 'Notebook Operations';\n            palette.addItem({ command: 'save-to-url', category });\n        }\n\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: 'save-to-url' }], 1000);\n        }\n    }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}