 // Auto generated code by ssc_gen
// WARNING: Any manual changes made to this file will be lost when this
// is run again. Do not edit this file unless you know what you are doing.

import 'dart:core';
import 'baseStruct.dart';

/// fetch add patches and urls from <a> tag
///
/// [
///   "item",
///   "..."
/// ]
class Urls extends BaseParser {
  Urls(rawDocument) : super(rawDocument);
  Urls.fromDocument(document) : super.fromDocument(document);
  Urls.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    List<dynamic> items = [];
    for (var el in mPartDocument(selector)) {
      items.add(xxParseItem(el));
    }
    return items;
  }

  xxParseItem(el) {
    var val = mAttr(el, 'href');
    return val;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, 'a');
    return val;
  }
}

///
///
/// [
///   {
///     "name": "String",
///     "image_url": "String",
///     "url": "String",
///     "rating": "String",
///     "price": "String"
///   },
///   "..."
/// ]
class Books extends BaseParser {
  Books(rawDocument) : super(rawDocument);
  Books.fromDocument(document) : super.fromDocument(document);
  Books.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    List<Map<String, dynamic>> items = [];
    for (var el in mPartDocument(selector)) {
      Map<String, dynamic> tmpItem = {};
      tmpItem["name"] = xxParseName(el);
      tmpItem["image_url"] = xxParseImageUrl(el);
      tmpItem["url"] = xxParseUrl(el);
      tmpItem["rating"] = xxParseRating(el);
      tmpItem["price"] = xxParsePrice(el);
      items.add(tmpItem);
    }
    return items;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, '.col-lg-3');
    return val;
  }

  xxParseName(el) {
    var val = mCss(el, '.thumbnail');
    var val1 = mAttr(val, 'alt');
    return val1;
  }

  xxParseImageUrl(el) {
    var val = mCss(el, '.thumbnail');
    var val1 = mAttr(val, 'src');
    return val1;
  }

  xxParseUrl(el) {
    var val = mCss(el, '.image_container > a');
    var val1 = mAttr(val, 'href');
    return val1;
  }

  xxParseRating(el) {
    var val = mCss(el, '.star-rating');
    var val1 = mAttr(val, 'class');
    var val2 = mStrLTrim(val1, 'star\\-rating ');
    return val2;
  }

  xxParsePrice(el) {
    try {
      var val = mCss(el, '.price_color');
      var val1 = mAttrText(val);
      var val2 = mReMatch(val1, '\\d+', group: 1);
      return val2;
    } catch (e) {
      return '0';
    }
  }
}

///
///
/// {
///   "title": "String",
///   "urls": [
///     "item",
///     "..."
///   ],
///   "books": [
///     {
///       "name": "String",
///       "image_url": "String",
///       "url": "String",
///       "rating": "String",
///       "price": "String"
///     },
///     "..."
///   ]
/// }
class CataloguePage extends BaseParser {
  CataloguePage(rawDocument) : super(rawDocument);
  CataloguePage.fromDocument(document) : super.fromDocument(document);
  CataloguePage.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    Map<String, dynamic> items = {};

    items["title"] = xxParseTitle(selector);
    items["urls"] = xxParseUrls(selector);
    items["books"] = xxParseBooks(selector);
    return items;
  }

  @override
  mPreValidate(el) {
    var val = mCss(el, 'title');
    var val1 = mAttrText(val);
    var val2 = mAssertReMatch(val1, 'Books to Scrape', '');
    return null;
  }

  xxParseTitle(el) {
    var val = mCss(el, 'title');
    var val1 = mAttrText(val);
    return val1;
  }

  xxParseUrls(el) {
    var val = Urls.fromDocument(el).parse();
    return val;
  }

  xxParseBooks(el) {
    var val = Books.fromDocument(el).parse();
    return val;
  }
}
