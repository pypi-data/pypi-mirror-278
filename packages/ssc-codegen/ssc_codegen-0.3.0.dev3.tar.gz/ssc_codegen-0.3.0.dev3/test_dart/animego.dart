// Auto generated code by ssc_gen
// WARNING: Any manual changes made to this file will be lost when this
// is run again. Do not edit this file unless you know what you are doing.

import 'dart:core';
import 'baseStruct.dart';

/// Get all available ongoings from the main page
///
///     GET https://animego.org
///
///
/// [
///   {
///     "url": "String",
///     "title": "String",
///     "thumbnail": "String",
///     "episode": "String",
///     "dub": "String"
///   },
///   "..."
/// ]
class OngoingView extends BaseParser {
  OngoingView(rawDocument) : super(rawDocument);
  OngoingView.fromDocument(document) : super.fromDocument(document);
  OngoingView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    List<Map<String, dynamic>> items = [];
    for (var el in mPartDocument(selector)) {
      Map<String, dynamic> tmpItem = {};
      tmpItem["url"] = xxParseUrl(el);
      tmpItem["title"] = xxParseTitle(el);
      tmpItem["thumbnail"] = xxParseThumbnail(el);
      tmpItem["episode"] = xxParseEpisode(el);
      tmpItem["dub"] = xxParseDub(el);
      items.add(tmpItem);
    }
    return items;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, '.border-bottom-0.cursor-pointer');
    return val;
  }

  xxParseUrl(el) {
    var val = mAttr(el, 'onclick');
    var val1 = mStrLTrim(val, 'location\\.href=');
    var val2 = mStrTrim(val1, "'");
    var val3 = mStrFormat(val2, 'https://animego.org{{}}');
    return val3;
  }

  xxParseTitle(el) {
    var val = mCss(el, '.last-update-title');
    var val1 = mAttrText(val);
    return val1;
  }

  xxParseThumbnail(el) {
    var val = mCss(el, '.lazy');
    var val1 = mAttr(val, 'style');
    var val2 = mStrLTrim(val1, 'background\\-image: url\\(');
    var val3 = mStrRTrim(val2, '\\);');
    return val3;
  }

  xxParseEpisode(el) {
    var val = mCss(el, '.text-truncate');
    var val1 = mAttrText(val);
    var val2 = mReMatch(val1, r"(\d+)\s");
    return val2;
  }

  xxParseDub(el) {
    var val = mCss(el, '.text-gray-dark-6');
    var val1 = mAttrText(val);
    var val2 = mStrReplace(val1, ')', '');
    var val3 = mStrReplace(val2, '(', '');
    return val3;
  }
}

/// Get all search results by query
///
///     GET https://animego.org/search/anime
///     q={QUERY}
///
///     EXAMPLE:
///
///         GET https://animego.org/search/anime?q=LAIN
///
///
/// [
///   {
///     "title": "String",
///     "thumbnail": "String",
///     "url": "String"
///   },
///   "..."
/// ]
class SearchView extends BaseParser {
  SearchView(rawDocument) : super(rawDocument);
  SearchView.fromDocument(document) : super.fromDocument(document);
  SearchView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    List<Map<String, dynamic>> items = [];
    for (var el in mPartDocument(selector)) {
      Map<String, dynamic> tmpItem = {};
      tmpItem["title"] = xxParseTitle(el);
      tmpItem["thumbnail"] = xxParseThumbnail(el);
      tmpItem["url"] = xxParseUrl(el);
      items.add(tmpItem);
    }
    return items;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, '.row > .col-ul-2');
    return val;
  }

  xxParseTitle(el) {
    var val = mCss(el, '.text-truncate a');
    var val1 = mAttr(val, 'title');
    return val1;
  }

  xxParseThumbnail(el) {
    var val = mCss(el, '.lazy');
    var val1 = mAttr(val, 'data-original');
    return val1;
  }

  xxParseUrl(el) {
    var val = mCss(el, '.text-truncate a');
    var val1 = mAttr(val, 'href');
    return val1;
  }
}

/// Anime page information. anime path contains in SearchView.url or Ongoing.urk
///
///     GET https://animego.org/anime/<ANIME_PATH>
///
///     EXAMPLE:
///
///         GET https://animego.org/anime/eksperimenty-leyn-1114
///
///
/// {
///   "title": "String",
///   "description": "String",
///   "thumbnail": "String",
///   "id": "String",
///   "raw_json": "String"
/// }
class AnimeView extends BaseParser {
  AnimeView(rawDocument) : super(rawDocument);
  AnimeView.fromDocument(document) : super.fromDocument(document);
  AnimeView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    Map<String, dynamic> items = {};

    items["title"] = xxParseTitle(selector);
    items["description"] = xxParseDescription(selector);
    items["thumbnail"] = xxParseThumbnail(selector);
    items["id"] = xxParseId(selector);
    items["raw_json"] = xxParseRawJson(selector);
    return items;
  }

  xxParseTitle(el) {
    var val = mCss(el, '.anime-title h1');
    var val1 = mAttrText(val);
    return val1;
  }

  xxParseDescription(el) {
    var val = mCssAll(el, '.description');
    var val1 = mAttrTextAll(val);
    var val2 = mArrJoin(val1, ' ');
    return val2;
  }

  xxParseThumbnail(el) {
    var val = mCss(el, '#content img');
    var val1 = mAttr(val, 'src');
    return val1;
  }

  xxParseId(el) {
    var val = mCss(el, '.br-2 .my-list-anime');
    var val1 = mAttr(val, 'id');
    var val2 = mStrLTrim(val1, 'my\\-list\\-');
    return val2;
  }

  xxParseRawJson(el) {
    var val = mCss(el, "script[type='application/ld+json']");
    var val1 = mAttrText(val);
    return val1;
  }
}

/// Representation dubbers in {'dubber_id': 'dubber_name'}
///
///     Prepare:
///       1. get id from Anime object
///       2. GET 'https://animego.org/anime/{Anime.id}/player?_allow=true'
///       3. extract html from json by ['content'] key
///       4. OPTIONAL: unescape HTML
///
///     EXAMPLE:
///         GET https://animego.org/anime/anime/1114//player?_allow=true
///
///
/// {
///   "K": "V",
///   "...": "..."
/// }
class AnimegoPlayerDubbersView extends BaseParser {
  AnimegoPlayerDubbersView(rawDocument) : super(rawDocument);
  AnimegoPlayerDubbersView.fromDocument(document)
      : super.fromDocument(document);
  AnimegoPlayerDubbersView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    Map<String, dynamic> items = {};
    for (var el in mPartDocument(selector)) {
      items[xxParseKey(el)] = xxParseValue(el);
    }
    return items;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, '#video-dubbing .mb-1');
    return val;
  }

  xxParseKey(el) {
    var val = mAttr(el, 'data-dubbing');
    return val;
  }

  xxParseValue(el) {
    var val = mCss(el, 'span');
    var val1 = mAttrText(val);
    var val2 = mReSub(val1, r"^\s+", '');
    var val3 = mReSub(val2, r"\s+$", '');
    return val3;
  }
}

/// Representation episodes
///
///     Prepare:
///       1. get id from Anime object
///       2. GET 'https://animego.org/anime/{Anime.id}/player?_allow=true'
///       3. extract html from json by ['content'] key
///       4. OPTIONAL: unescape HTML
///
///     EXAMPLE:
///         GET https://animego.org/anime/anime/1114//player?_allow=true
///
///
/// [
///   {
///     "num": "String",
///     "title": "String",
///     "id": "String"
///   },
///   "..."
/// ]
class AnimegoPlayerEpisodeView extends BaseParser {
  AnimegoPlayerEpisodeView(rawDocument) : super(rawDocument);
  AnimegoPlayerEpisodeView.fromDocument(document)
      : super.fromDocument(document);
  AnimegoPlayerEpisodeView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    List<Map<String, dynamic>> items = [];
    for (var el in mPartDocument(selector)) {
      Map<String, dynamic> tmpItem = {};
      tmpItem["num"] = xxParseNum(el);
      tmpItem["title"] = xxParseTitle(el);
      tmpItem["id"] = xxParseId(el);
      items.add(tmpItem);
    }
    return items;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, '#video-carousel .mb-0');
    return val;
  }

  xxParseNum(el) {
    var val = mAttr(el, 'data-episode');
    return val;
  }

  xxParseTitle(el) {
    var val = mAttr(el, 'data-episode-title');
    return val;
  }

  xxParseId(el) {
    var val = mAttr(el, 'data-id');
    return val;
  }
}

/// representation dubbers and episodes
///
///     Prepare:
///       1. get id from Anime object
///       2. GET 'https://animego.org/anime/{Anime.id}/player?_allow=true'
///       3. extract html from json by ['content'] key
///       4. OPTIONAL: unescape HTML
///
///     EXAMPLE:
///         GET https://animego.org/anime/anime/1114//player?_allow=true
///
///
/// {
///   "dubbers": {
///     "{<dubber_id>": "<dubber_name>}",
///     "id_2": "..."
///   },
///   "episodes": [
///     {
///       "num": "String",
///       "title": "String",
///       "id": "String"
///     },
///     "..."
///   ]
/// }
class AnimegoPlayerView extends BaseParser {
  AnimegoPlayerView(rawDocument) : super(rawDocument);
  AnimegoPlayerView.fromDocument(document) : super.fromDocument(document);
  AnimegoPlayerView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    Map<String, dynamic> items = {};

    items["dubbers"] = xxParseDubbers(selector);
    items["episodes"] = xxParseEpisodes(selector);
    return items;
  }

  @override
  mPreValidate(el) {
    var val = mAssertCss(el, '#video-dubbing .mb-1', '');
    var val1 = mAssertCss(val, '#video-carousel .mb-0', '');
    return null;
  }

  xxParseDubbers(el) {
    var val = AnimegoPlayerDubbersView.fromDocument(el).parse();
    return val;
  }

  xxParseEpisodes(el) {
    var val = AnimegoPlayerEpisodeView.fromDocument(el).parse();
    return val;
  }
}

/// representation videos
///
///     Prepare:
///       1. get num and id from Episode
///
///       2.
///
///       GET https://animego.org/anime/series
///       dubbing=2&provider=24&episode={Episode.num}id={Episode.id}
///
///       3. extract html from json by ["content"] key
///
///       4. OPTIONAL: unescape document
///
///     EXAMPLE:
///
///         GET https://animego.org/anime/series?dubbing=2&provider=24&episode=2&id=15837
///
///
/// [
///   {
///     "title": "String",
///     "url": "String",
///     "data_provider": "String",
///     "data_provide_dubbing": "String"
///   },
///   "..."
/// ]
class SourceView extends BaseParser {
  SourceView(rawDocument) : super(rawDocument);
  SourceView.fromDocument(document) : super.fromDocument(document);
  SourceView.fromElement(element) : super.fromElement(element);

  @override
  mRunParse() {
    List<Map<String, dynamic>> items = [];
    for (var el in mPartDocument(selector)) {
      Map<String, dynamic> tmpItem = {};
      tmpItem["title"] = xxParseTitle(el);
      tmpItem["url"] = xxParseUrl(el);
      tmpItem["data_provider"] = xxParseDataProvider(el);
      tmpItem["data_provide_dubbing"] = xxParseDataProvideDubbing(el);
      items.add(tmpItem);
    }
    return items;
  }

  @override
  mPartDocument(el) {
    var val = mCssAll(el, '#video-players > span');
    return val;
  }

  xxParseTitle(el) {
    var val = mAttrText(el);
    return val;
  }

  xxParseUrl(el) {
    var val = mAttr(el, 'data-player');
    var val1 = mStrFormat(val, 'https:{{}}');
    return val1;
  }

  xxParseDataProvider(el) {
    var val = mAttr(el, 'data-provider');
    return val;
  }

  xxParseDataProvideDubbing(el) {
    var val = mAttr(el, 'data-provide-dubbing');
    return val;
  }
}
