# coding: utf-8

"""
    Workspace Data Service

    This page lists current APIs. As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wds_client.configuration import Configuration


class BackupRestoreRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'requesting_workspace_id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'requesting_workspace_id': 'requestingWorkspaceId',
        'description': 'description'
    }

    def __init__(self, requesting_workspace_id=None, description=None, local_vars_configuration=None):  # noqa: E501
        """BackupRestoreRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._requesting_workspace_id = None
        self._description = None
        self.discriminator = None

        if requesting_workspace_id is not None:
            self.requesting_workspace_id = requesting_workspace_id
        if description is not None:
            self.description = description

    @property
    def requesting_workspace_id(self):
        """Gets the requesting_workspace_id of this BackupRestoreRequest.  # noqa: E501

        workspace requesting the backup. Optional; defaults to the workspace in which this WDS is running.  # noqa: E501

        :return: The requesting_workspace_id of this BackupRestoreRequest.  # noqa: E501
        :rtype: str
        """
        return self._requesting_workspace_id

    @requesting_workspace_id.setter
    def requesting_workspace_id(self, requesting_workspace_id):
        """Sets the requesting_workspace_id of this BackupRestoreRequest.

        workspace requesting the backup. Optional; defaults to the workspace in which this WDS is running.  # noqa: E501

        :param requesting_workspace_id: The requesting_workspace_id of this BackupRestoreRequest.  # noqa: E501
        :type: str
        """

        self._requesting_workspace_id = requesting_workspace_id

    @property
    def description(self):
        """Gets the description of this BackupRestoreRequest.  # noqa: E501

        User-friendly description to associate with this backup. Optional.  # noqa: E501

        :return: The description of this BackupRestoreRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupRestoreRequest.

        User-friendly description to associate with this backup. Optional.  # noqa: E501

        :param description: The description of this BackupRestoreRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupRestoreRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupRestoreRequest):
            return True

        return self.to_dict() != other.to_dict()
