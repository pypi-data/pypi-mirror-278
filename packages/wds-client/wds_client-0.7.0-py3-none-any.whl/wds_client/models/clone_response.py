# coding: utf-8

"""
    Workspace Data Service

    This page lists current APIs. As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wds_client.configuration import Configuration


class CloneResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sourceworkspaceid': 'str',
        'clonestatus': 'str'
    }

    attribute_map = {
        'sourceworkspaceid': 'sourceworkspaceid',
        'clonestatus': 'clonestatus'
    }

    def __init__(self, sourceworkspaceid=None, clonestatus=None, local_vars_configuration=None):  # noqa: E501
        """CloneResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sourceworkspaceid = None
        self._clonestatus = None
        self.discriminator = None

        if sourceworkspaceid is not None:
            self.sourceworkspaceid = sourceworkspaceid
        if clonestatus is not None:
            self.clonestatus = clonestatus

    @property
    def sourceworkspaceid(self):
        """Gets the sourceworkspaceid of this CloneResponse.  # noqa: E501

        workspace which initiated the clone  # noqa: E501

        :return: The sourceworkspaceid of this CloneResponse.  # noqa: E501
        :rtype: str
        """
        return self._sourceworkspaceid

    @sourceworkspaceid.setter
    def sourceworkspaceid(self, sourceworkspaceid):
        """Sets the sourceworkspaceid of this CloneResponse.

        workspace which initiated the clone  # noqa: E501

        :param sourceworkspaceid: The sourceworkspaceid of this CloneResponse.  # noqa: E501
        :type: str
        """

        self._sourceworkspaceid = sourceworkspaceid

    @property
    def clonestatus(self):
        """Gets the clonestatus of this CloneResponse.  # noqa: E501

        description of this clone status  # noqa: E501

        :return: The clonestatus of this CloneResponse.  # noqa: E501
        :rtype: str
        """
        return self._clonestatus

    @clonestatus.setter
    def clonestatus(self, clonestatus):
        """Sets the clonestatus of this CloneResponse.

        description of this clone status  # noqa: E501

        :param clonestatus: The clonestatus of this CloneResponse.  # noqa: E501
        :type: str
        """

        self._clonestatus = clonestatus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloneResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloneResponse):
            return True

        return self.to_dict() != other.to_dict()
