# coding: utf-8

"""
    Workspace Data Service

    This page lists current APIs. As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wds_client.configuration import Configuration


class VersionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app': 'App',
        'git': 'Git',
        'build': 'Build'
    }

    attribute_map = {
        'app': 'app',
        'git': 'git',
        'build': 'build'
    }

    def __init__(self, app=None, git=None, build=None, local_vars_configuration=None):  # noqa: E501
        """VersionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app = None
        self._git = None
        self._build = None
        self.discriminator = None

        if app is not None:
            self.app = app
        if git is not None:
            self.git = git
        if build is not None:
            self.build = build

    @property
    def app(self):
        """Gets the app of this VersionResponse.  # noqa: E501


        :return: The app of this VersionResponse.  # noqa: E501
        :rtype: App
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this VersionResponse.


        :param app: The app of this VersionResponse.  # noqa: E501
        :type: App
        """

        self._app = app

    @property
    def git(self):
        """Gets the git of this VersionResponse.  # noqa: E501


        :return: The git of this VersionResponse.  # noqa: E501
        :rtype: Git
        """
        return self._git

    @git.setter
    def git(self, git):
        """Sets the git of this VersionResponse.


        :param git: The git of this VersionResponse.  # noqa: E501
        :type: Git
        """

        self._git = git

    @property
    def build(self):
        """Gets the build of this VersionResponse.  # noqa: E501


        :return: The build of this VersionResponse.  # noqa: E501
        :rtype: Build
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this VersionResponse.


        :param build: The build of this VersionResponse.  # noqa: E501
        :type: Build
        """

        self._build = build

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionResponse):
            return True

        return self.to_dict() != other.to_dict()
