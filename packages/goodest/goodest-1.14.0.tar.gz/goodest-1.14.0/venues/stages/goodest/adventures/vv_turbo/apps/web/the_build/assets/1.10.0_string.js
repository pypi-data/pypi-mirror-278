import{L as u,M as I,N as h,O as d,P as N,e as s}from"./1.10.0_index.js";var x=/\s/;function $(r){for(var t=r.length;t--&&x.test(r.charAt(t)););return t}var b=$,v=b,p=/^\s+/;function E(r){return r&&r.slice(0,v(r)+1).replace(p,"")}var F=E,O=F,o=u,_=I,f=0/0,S=/^[-+]0x[0-9a-f]+$/i,T=/^0b[01]+$/i,M=/^0o[0-7]+$/i,w=parseInt;function A(r){if(typeof r=="number")return r;if(_(r))return f;if(o(r)){var t=typeof r.valueOf=="function"?r.valueOf():r;r=o(t)?t+"":t}if(typeof r!="string")return r===0?r:+r;r=O(r);var e=T.test(r);return e||M.test(r)?w(r.slice(2),e?2:8):S.test(r)?f:+r}var m=A,R=m,a=1/0,j=17976931348623157e292;function B(r){if(!r)return r===0?r:0;if(r=R(r),r===a||r===-a){var t=r<0?-1:1;return t*j}return r===r?r:0}var y=B,P=y;function l(r){var t=P(r),e=t%1;return t===t?e?t-e:t:0}var C=l,D=h,G=C,H=m,c=d,L=D.isFinite,W=Math.min;function X(r){var t=Math[r];return function(e,n){if(e=H(e),n=n==null?0:W(G(n),292),n&&L(e)){var i=(c(e)+"e").split("e"),g=t(i[0]+"e"+(+i[1]+n));return i=(c(g)+"e").split("e"),+(i[0]+"e"+(+i[1]-n))}return t(e)}}var Y=X,k=Y,z=k("round"),J=z;const K=N(J),U=function(r){try{if(r==="")return"";var t=K(r,2);if(isNaN(t))return"";if(t=t.toString(),t=="0")return"0.00";if(t.indexOf(".")==-1)return t+".00";var e=t.split(".");return e[1].length==1?t+"0":t}catch(n){console.error(n)}return""};function V(){try{let r;if(arguments.length===3?r=s(arguments[0],arguments[1],arguments[2]):arguments.length===2?r=s(arguments[0],arguments[1],""):arguments.length===1&&(r=arguments[0]),typeof r=="string")return r;throw console.log(arguments),new Error("A string could not be furnished from the preceeding arguments.")}catch(r){console.warn(r)}return""}export{V as f,U as r};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
