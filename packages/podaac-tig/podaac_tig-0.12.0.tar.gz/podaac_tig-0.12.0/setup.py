# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['podaac',
 'podaac.lambda_handler',
 'podaac.lambda_handler.cumulus_cli_handler',
 'podaac.tig']

package_data = \
{'': ['*']}

install_requires = \
['click>=8.1.7,<9.0.0',
 'cumulus-process>=1.3.0,<2.0.0',
 'imageio>=2.34.0,<3.0.0',
 'matplotlib>=3.8.3,<4.0.0',
 'netCDF4>=1.6.5,<2.0.0',
 'numpy>=1.26.4,<2.0.0',
 'pygeogrids>=0.5.0,<0.6.0',
 'requests>=2.31.0,<3.0.0',
 'scipy>=1.12.0,<2.0.0',
 'xarray>=2024.2.0,<2025.0.0']

entry_points = \
{'console_scripts': ['generate_hitide_config = '
                     'podaac.tig.generate_hitide_config:generate_hitide_config_command',
                     'tig = podaac.tig.cli:main']}

setup_kwargs = {
    'name': 'podaac-tig',
    'version': '0.12.0',
    'description': 'Tool for Image Generation (TIG)',
    'long_description': '# TIG - Tool for Image Generation\n\n# Table of contents\n\n- [Overview](#overview)\n- [Install poetry](#install-poetry-python-dependency-manager)\n- [Build](#build)\n- [How to load and use tig module](#how-to-load-and-use-tig-module)\n  - [tig Input](#tig-input)\n  - [tig Output](#tig-output)\n- [CLI Commands](#cli-commands)\n\n## Overview\n   tig is built to be used within Cumulus ecosystem.  It is depending on cumulus CMA ([Cumulus Documentation](https://nasa.github.io/cumulus)).\n   Please refer to the [Usage](#usage) section for inputs and outputs. TIG itself is a lambda function which runs on top of CMA as its lambda layer.\n\n## Install poetry (python dependency manager)\n   Install poetry following the directions here: https://python-poetry.org/docs/#installation\n\n   - Be sure to install poetry in an isolated environment from the rest of your system.\n   - Be sure to use with a python version less than 3.12\n\n## Build\n* Jenkins pipeline template is applied to this project.\n* development is based on poetry python environment.  \n  * poetry run pytest   // to run unit test\n  * poetry install      // to install all dependencies defined in toml file\n  * poetry shell        //to enter the poetry shell\n  * poetry build        // to build the wheel\n\n\nUnit Test can be run using the command\n```shell script\npoetry run pytest\n```\n\n## CLI Commands\n- [Generate Thumbnails](#generate-thumbnails)\n- [Generate Config File](#generate-config-file)\n- [Run Tig](#run-tig)\n\n### Generate Thumbnails\nUse cli helper script to generate thumbnails for each collection (NOTE: This automatically generates the config file and runs tig)\n```\nGo to dir `podaac/tig` and look at generate_thumbnails.sh script.  Follow directions at top to setup.\n```\n\n### Generate Config File\nUse cli to create a tig configuration for collections \n```\ngenerate_hitide_config --granule <granule_file> -dataset-id <collection short name> --include-image-variables <csv file image variables> --longitude <lon variable> --latitude <lat variable> --time <time variable> --footprint_strategy <footprint strategy>\n```\n\ngranule: a sample granule file to generate the configuration for\ndatset-id: collection short name \ninclude-image-variables: csv file of with image variable names and min max setting for each variable\nlongitude: longitude variable include the group if they\'re in group defaults to longitude\nlatitude: latitude variable include the group if they\'re in a group defaults to latitude\ntime: time variable include the group if they\'re in a group defaults to time\nfootprint_strategy: strategy to generate footprint will default to None options should be ["periodic", "linestring", "polar", "swot_linestring", "polarsides", "smap"]\n\n### Run Tig\nUse cli to test thumbnail image generation for a granule with configuration file and palettes\n\n```\ntig --input_file <granule> --output_dir <output_dir> --config_file <config_file> --palette_dir <palette_dir>\n```\n\nUse cli to create a tig configuration for collections \n```\ngenerate_hitide_config --granule <granule_file> -dataset-id <collection short name> --include-image-variables <csv file image variables> --longitude <lon variable> --latitude <lat variable> --time <time variable> --footprint_strategy <footprint strategy>\n```\n\ngranule: a sample granule file to generate the configuration for\ndatset-id: collection short name \ninclude-image-variables: csv file of with image variable names and min max setting for each variable\nlongitude: longitude variable include the group if they\'re in group defaults to longitude\nlatitude: latitude variable include the group if they\'re in a group defaults to latitude\ntime: time variable include the group if they\'re in a group defaults to time\nfootprint_strategy: strategy to generate footprint will default to None options should be ["periodic", "linestring", "polar", "swot_linestring", "polarsides", "smap"]\n\n### Regression Test\n\n** IN DEVELOPMENT **\n\nCurrently there is a regression test in the regression_test folder to run please use this command\n\nNote palettes folder needs to be downloaded and included in the regression_test folder\nWere not clearing out any data after test future improvement to make it an option to clear or retain data\nas granules take awhile to download\n\n```\npytest regression.py\n```\n\n### CSV Columns\n\nvariable: name of variable\nmin: min value for variable\nmax: max value for variable\npalette (optional): the palette to be used for the variable\nfill_missing (optional): if the generated images have missing pixel in images most likely resolution is to big, either lower resolution or we can fill in the pixels with surrounding pixel\nppd (optional): resolution of the variable, must be an integer\n\n\n## How to load and use tig module\nProject using tig can include/use the tig as following:\n```shell script\n    module "tig_module" {\n      source = "https://cae-artifactory.jpl.nasa.gov/artifactory/general/gov/nasa/podaac/cumulus/tig-terraform/tig-terraform-0.3.0.zip"\n      // Lambda variables\n      prefix = var.prefix\n      image = var.tig_image\n      role = module.cumulus.lambda_processing_role_arn\n      cmr_environment = var.cmr_environment\n      subnet_ids = var.subnet_ids\n      security_group_ids = [aws_security_group.no_ingress_all_egress.id]\n      task_logs_retention_in_days = var.task_logs_retention_in_days\n      config_url = "https://hitide.podaac.earthdatacloud.nasa.gov/dataset-configs"\n      palette_url = "https://hitide.podaac.earthdatacloud.nasa.gov/palettes"\n      memory_size = var.tig_memory_size\n}\n\n```\nand the module input variables explained as below.\n\n| field name | type | default | values | description\n| ---------- | ---- | ------- | ------ | -----------\n| prefix | string | (required) | | A prefix string of lambda function. Ex. prefix = "sample" , created lambda : sample-tig\n| region | string | (required) | | AWS region where tig lambda is running upon.  Ex. us-west-2\n| cmr_environment | string | (required) | | dev, sit, ops\n| config_bucket | string | (required) | | bucket where dataset config resides\n| config_dir | string | (required) | | directory where dataset config file resides. dataset-config file follows the collection_shortname.cfg pattern. Ex. MODIS_A-JPL-L2P-v2019.0.cfg\n| tig_output_bucket | string | (required) | | bucket where tig file is created and written\n| tig_output_dir | string | (required) | | output directory of created tig(fp) file. file will be created as s3://tig_output_bucket/tig_output_dir/collection_short_name/granule_id.png. ex. s3://my-cumulus-internaldataset-tig/ MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.png\n| lambda_role | string | (required) | | aws user role to run tig lambda\n| layers | list(string) | (required) | | list of layers\' arn where tig runs upon.\n| security_group_ids | list(string) | (required) | | security group ids\n| subnet_ids | list(string) | (required) | | subnet ids where tig runs within\n|config_url | string | | | the url of where to retrieve configurations\n|palette_url | string | | | the url of where to retrieve palettes\n\nECS input variables optional\n\n| field name | type | default | values | description\n| ---------- | ---- | ------- | ------ | -----------\n|tig_ecs | bool | false | | boolean to deploy ecs task\n|cluster_arn | string | | | cumulus cluster arn\n|desired_count | number | 1 | | number of ecs tig task to run\n|log_destination_arn | string | | | A shared AWS:Log:Destination that receives logs in log_groups\n|ecs_cpu | number | 700 | |cpu unit to allocate to a tig task\n|ecs_memory_reservation | number | 1024 | | memory unit to allocate to tig task\n\n\nFargate input variables optional\n\n| field name | type | default | values | description\n| ---------- | ---- | ------- | ------ | -----------\n|tig_fargate | bool | false | | boolean to deploy fargate task\n|fargate_memory | number | 2048 | | amount of memory to allocate for a single fargate task\n|fargate_cpu | number | 1024 | | amount of cpu to allocate for a single fargate task\n|fargate_desired_count | number | 1 | | desired count of how many fargate task\n|fargate_min_capacity | number | 1 | | minimum number of fargate task when scaling\n|fargate_max_capacity | number | 1 | | maximum number of fargate task when scaling\n|scale_dimensions | map(string) | null | | cloudwatch dimensions to scale on\n|scale_up_cooldown | number | 60 | | seconds before able to scaling up again\n|scale_down_cooldown | number | 120 | | seconds before able to scaling down again\n|comparison_operator_scale_up | string | GreaterThanOrEqualToThreshold | | The arithmetic operation to use when comparing the specified Statistic and Threshold\n|evaluation_periods_scale_up | number | 1 | | The number of periods over which data is compared to the specified threshold\n|metric_name_scale_up | string | CPUUtilization | | name of the metric\n|namespace_scale_up | string | AWS/ECS | | namespace for the alarm\'s associated metric\n|period_scale_up | number | 60 | | period in seconds over which the specified statistic is applied\n|statistic_scale_up | string | Average | | statistic to apply to the metric\n|threshold_scale_up | number | 50 | | threshold for statistic to compare against to trigger step\n|scale_up_step_adjustment | list | | | step adjustment to make when scaling up fargate\n|comparison_operator_scale_down | string \n|evaluation_periods_scale_down | number | 1 | | The number of periods over which data is compared to the specified threshold\n|metric_name_scale_down | string | CPUUtilization | | name of the metric\n|namespace_scale_down | string | AWS/ECS | | namespace for the alarm\'s associated metric\n|period_scale_down | number | 60 | | period in seconds over which the specified statistic is applied\n|statistic_scale_down | string | Average | | statistic to apply to the metric\n|threshold_scale_down | number | 50 | | threshold for statistic to compare against to trigger step\n|scale_down_step_adjustment | list | | | step adjustment to make when scaling down fargate\n|fargate_iam_role | string | | | iam arn role for fargate\n\nmodule output variables\n\n| field name | type | default | values | description\n| ---------- | ---- | ------- | ------ | -----------\n| tig_function_name | string | (required) | | The name of deployed tig lambda function\n| tig_task_arn | string | (required) | | tig lambda aws arn\n\n### tig Input\n   Cumulus message with granules payload.  Example below\n```json\n{\n  "granules": [\n    {\n      "files": [\n        {\n          "filename": "s3://bucket/file/with/checksum.dat",\n          "checksumType": "md5",\n          "checksum": "asdfdsa"\n        },\n        {\n          "filename": "s3://bucket/file/without/checksum.dat",\n        }\n      ]\n    }\n  ]\n}\n```\n\n### tig Output\n   * A tig file will be created under configured tig_output_bucket and tig-output-dir.  filename as granuleId.png. Ex. s3://my-cumulus-internaldataset-tig/ MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.png\n   * A file object will be appended to the files[] of processed granule. Example:\n```json\n{\n  "granules": [\n    {\n      "granuleId": "20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0",\n      "dataType": "MODIS_A-JPL-L2P-v2019.0",\n      "sync_granule_duration": 2603,\n      "files": [\n        {\n          "bucket": "my-protected",\n          "path": "MODIS_A-JPL-L2P-v2019.0/2020/001",\n          "filename": "s3://my-protected/MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc",\n          "size": 18232098,\n          "name": "20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc",\n          "checksumType": "md5",\n          "checksum": "aa5204f125ae83847b3b80fa2e571b00",\n          "type": "data",\n          "url_path": "{cmrMetadata.CollectionReference.ShortName}",\n          "filepath": "MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc",\n          "duplicate_found": true\n        },\n        {\n          "bucket": "my-public",\n          "path": "MODIS_A-JPL-L2P-v2019.0/2020/001",\n          "filename": "s3://my-public/MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc.md5",\n          "size": 98,\n          "name": "20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc.md5",\n          "type": "metadata",\n          "url_path": "{cmrMetadata.CollectionReference.ShortName}",\n          "filepath": "MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc.md5",\n          "duplicate_found": true\n        },\n        {\n          "bucket": "my-public",\n          "filename": "s3://my-public/MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.cmr.json",\n          "size": 1617,\n          "name": "20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.cmr.json",\n          "type": "metadata",\n          "url_path": "{cmrMetadata.CollectionReference.ShortName}",\n          "filepath": "MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.cmr.json",\n          "etag": "\\"3e5b9259c5ee7eae5fe71467f151498b\\""\n        },\n        {\n          "bucket": "my-internal",\n          "filename": "s3://my-internal/dataset-tig/MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.png",\n          "filepath": "dataset-tig/MODIS_A-JPL-L2P-v2019.0/20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.png",\n          "size": 452,\n          "name": "20200101000000-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.png",\n          "type": "metadata"\n        }\n      ],\n}\n',
    'author': 'podaac-tva',
    'author_email': 'podaac-tva@jpl.nasa.gov',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.jpl.nasa.gov/podaac/tig',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<3.13',
}


setup(**setup_kwargs)
