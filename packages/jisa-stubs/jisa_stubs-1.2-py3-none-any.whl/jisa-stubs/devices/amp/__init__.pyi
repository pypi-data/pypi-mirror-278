
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jisa.addresses
import jisa.control
import jisa.devices.interfaces
import jisa.enums
import jisa.visa
import typing



class SR560(jisa.visa.VISADevice, jisa.devices.interfaces.VPreAmp):
    def __init__(self, address: jisa.addresses.Address): ...
    def getCoupling(self) -> jisa.enums.Coupling: ...
    @staticmethod
    def getDescription() -> str: ...
    def getFilterHighFrequency(self) -> float: ...
    def getFilterLowFrequency(self) -> float: ...
    def getFilterMode(self) -> jisa.enums.Filter: ...
    def getFilterRollOff(self) -> float: ...
    def getGain(self) -> float: ...
    def getIDN(self) -> str: ...
    def getInput(self) -> jisa.enums.Input: ...
    def setCoupling(self, coupling: jisa.enums.Coupling) -> None: ...
    def setFilterHighFrequency(self, double: float) -> None: ...
    def setFilterLowFrequency(self, double: float) -> None: ...
    def setFilterMode(self, filter: jisa.enums.Filter) -> None: ...
    def setFilterRollOff(self, double: float) -> None: ...
    def setGain(self, double: float) -> None: ...
    def setInput(self, input: jisa.enums.Input) -> None: ...

class SR810(jisa.visa.VISADevice, jisa.devices.interfaces.DPIPALockIn, jisa.devices.interfaces.LineFilter, jisa.devices.interfaces.LineFilter2X):
    def __init__(self, address: jisa.addresses.Address): ...
    def autoOffsetAmplitude(self) -> None: ...
    def autoOffsetX(self) -> None: ...
    def autoOffsetY(self) -> None: ...
    @typing.overload
    def autoRange(self) -> None: ...
    @typing.overload
    def autoRange(self, double: float, double2: float, long: int) -> None: ...
    def getAll(self) -> 'SR810.DataPacket': ...
    def getCoupling(self) -> jisa.enums.Coupling: ...
    def getCurrentInputGain(self) -> float: ...
    @staticmethod
    def getDescription() -> str: ...
    def getExpansion(self) -> float: ...
    def getExternalTriggerMode(self) -> jisa.devices.interfaces.LockIn.TrigMode: ...
    def getFilterRollOff(self) -> float: ...
    def getFrequency(self) -> float: ...
    def getFrequencyRange(self) -> float: ...
    def getLockedAmplitude(self) -> float: ...
    def getLockedPhase(self) -> float: ...
    def getLockedX(self) -> float: ...
    def getLockedY(self) -> float: ...
    def getOffset(self) -> float: ...
    def getRange(self) -> float: ...
    def getRefAmplitude(self) -> float: ...
    def getRefMode(self) -> jisa.devices.interfaces.LockIn.RefMode: ...
    def getRefPhase(self) -> float: ...
    def getTimeConst(self) -> 'SR810.TimeConst': ...
    def getTimeConstant(self) -> float: ...
    def is2xLineFilterEnabled(self) -> bool: ...
    def isCurrentInputEnabled(self) -> bool: ...
    def isDifferentialInput(self) -> bool: ...
    def isLineFilterEnabled(self) -> bool: ...
    def isShieldGrounded(self) -> bool: ...
    def isSyncFilterEnabled(self) -> bool: ...
    def set2xLineFilterEnabled(self, boolean: bool) -> None: ...
    def setCoupling(self, coupling: jisa.enums.Coupling) -> None: ...
    def setCurrentInputEnabled(self, boolean: bool) -> None: ...
    def setCurrentInputGain(self, double: float) -> None: ...
    def setDifferentialInput(self, boolean: bool) -> None: ...
    def setExpansion(self, double: float) -> None: ...
    def setExternalTriggerMode(self, trigMode: jisa.devices.interfaces.LockIn.TrigMode) -> None: ...
    def setFilterRollOff(self, double: float) -> None: ...
    def setFrequencyRange(self, double: float) -> None: ...
    def setLineFilterEnabled(self, boolean: bool) -> None: ...
    def setOffset(self, double: float) -> None: ...
    def setOffsetExpansion(self, double: float, double2: float) -> None: ...
    def setOscAmplitude(self, double: float) -> None: ...
    def setOscFrequency(self, double: float) -> None: ...
    def setOscPhase(self, double: float) -> None: ...
    def setRange(self, double: float) -> None: ...
    def setRefMode(self, refMode: jisa.devices.interfaces.LockIn.RefMode) -> None: ...
    def setShieldGrounded(self, boolean: bool) -> None: ...
    def setSyncFilterEnabled(self, boolean: bool) -> None: ...
    @typing.overload
    def setTimeConstant(self, double: float) -> None: ...
    @typing.overload
    def setTimeConstant(self, timeConst: 'SR810.TimeConst') -> None: ...
    class DataPacket:
        x: float = ...
        y: float = ...
        r: float = ...
        t: float = ...
        f: float = ...
        @typing.overload
        def __init__(self, sR810: 'SR810', double: float, double2: float, double3: float, double4: float, double5: float): ...
        @typing.overload
        def __init__(self, sR810: 'SR810', string: str): ...
    class RefMode(java.lang.Enum['SR810.RefMode'], jisa.control.Nameable):
        EXTERNAL: typing.ClassVar['SR810.RefMode'] = ...
        INTERNAL: typing.ClassVar['SR810.RefMode'] = ...
        def getName(self) -> str: ...
        def getRefMode(self) -> jisa.devices.interfaces.LockIn.RefMode: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SR810.RefMode': ...
        @staticmethod
        def values() -> typing.MutableSequence['SR810.RefMode']: ...
    class TimeConst(java.lang.Enum['SR810.TimeConst'], jisa.control.Nameable):
        T_10us: typing.ClassVar['SR810.TimeConst'] = ...
        T_30us: typing.ClassVar['SR810.TimeConst'] = ...
        T_100us: typing.ClassVar['SR810.TimeConst'] = ...
        T_300us: typing.ClassVar['SR810.TimeConst'] = ...
        T_1ms: typing.ClassVar['SR810.TimeConst'] = ...
        T_3ms: typing.ClassVar['SR810.TimeConst'] = ...
        T_10ms: typing.ClassVar['SR810.TimeConst'] = ...
        T_30ms: typing.ClassVar['SR810.TimeConst'] = ...
        T_100ms: typing.ClassVar['SR810.TimeConst'] = ...
        T_300ms: typing.ClassVar['SR810.TimeConst'] = ...
        T_1s: typing.ClassVar['SR810.TimeConst'] = ...
        T_3s: typing.ClassVar['SR810.TimeConst'] = ...
        T_10s: typing.ClassVar['SR810.TimeConst'] = ...
        T_30s: typing.ClassVar['SR810.TimeConst'] = ...
        T_100s: typing.ClassVar['SR810.TimeConst'] = ...
        T_300s: typing.ClassVar['SR810.TimeConst'] = ...
        T_1ks: typing.ClassVar['SR810.TimeConst'] = ...
        T_3ks: typing.ClassVar['SR810.TimeConst'] = ...
        T_10ks: typing.ClassVar['SR810.TimeConst'] = ...
        T_30ks: typing.ClassVar['SR810.TimeConst'] = ...
        def getName(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SR810.TimeConst': ...
        @staticmethod
        def values() -> typing.MutableSequence['SR810.TimeConst']: ...

class SR830(jisa.visa.VISADevice, jisa.devices.interfaces.DPIPALockIn, jisa.devices.interfaces.LineFilter, jisa.devices.interfaces.LineFilter2X):
    def __init__(self, address: jisa.addresses.Address): ...
    def autoOffsetAmplitude(self) -> None: ...
    def autoOffsetX(self) -> None: ...
    def autoOffsetY(self) -> None: ...
    @typing.overload
    def autoRange(self) -> None: ...
    @typing.overload
    def autoRange(self, double: float, double2: float, long: int) -> None: ...
    def getAll(self) -> 'SR830.DataPacket': ...
    def getCoupling(self) -> jisa.enums.Coupling: ...
    def getCurrentInputGain(self) -> float: ...
    @staticmethod
    def getDescription() -> str: ...
    def getExpansion(self) -> float: ...
    def getExternalTriggerMode(self) -> jisa.devices.interfaces.LockIn.TrigMode: ...
    def getFilterRollOff(self) -> float: ...
    def getFrequency(self) -> float: ...
    def getFrequencyRange(self) -> float: ...
    def getLockedAmplitude(self) -> float: ...
    def getLockedPhase(self) -> float: ...
    def getLockedX(self) -> float: ...
    def getLockedY(self) -> float: ...
    def getOffset(self) -> float: ...
    def getRange(self) -> float: ...
    def getRefAmplitude(self) -> float: ...
    def getRefMode(self) -> jisa.devices.interfaces.LockIn.RefMode: ...
    def getRefPhase(self) -> float: ...
    def getTimeConst(self) -> 'SR830.TimeConst': ...
    def getTimeConstant(self) -> float: ...
    def is2xLineFilterEnabled(self) -> bool: ...
    def isCurrentInputEnabled(self) -> bool: ...
    def isDifferentialInput(self) -> bool: ...
    def isLineFilterEnabled(self) -> bool: ...
    def isShieldGrounded(self) -> bool: ...
    def isSyncFilterEnabled(self) -> bool: ...
    def set2xLineFilterEnabled(self, boolean: bool) -> None: ...
    def setCoupling(self, coupling: jisa.enums.Coupling) -> None: ...
    def setCurrentInputEnabled(self, boolean: bool) -> None: ...
    def setCurrentInputGain(self, double: float) -> None: ...
    def setDifferentialInput(self, boolean: bool) -> None: ...
    def setExpansion(self, double: float) -> None: ...
    def setExternalTriggerMode(self, trigMode: jisa.devices.interfaces.LockIn.TrigMode) -> None: ...
    def setFilterRollOff(self, double: float) -> None: ...
    def setFrequencyRange(self, double: float) -> None: ...
    def setLineFilterEnabled(self, boolean: bool) -> None: ...
    def setOffset(self, double: float) -> None: ...
    def setOffsetExpansion(self, double: float, double2: float) -> None: ...
    def setOscAmplitude(self, double: float) -> None: ...
    def setOscFrequency(self, double: float) -> None: ...
    def setOscPhase(self, double: float) -> None: ...
    def setRange(self, double: float) -> None: ...
    def setRefMode(self, refMode: jisa.devices.interfaces.LockIn.RefMode) -> None: ...
    def setShieldGrounded(self, boolean: bool) -> None: ...
    def setSyncFilterEnabled(self, boolean: bool) -> None: ...
    @typing.overload
    def setTimeConstant(self, double: float) -> None: ...
    @typing.overload
    def setTimeConstant(self, timeConst: 'SR830.TimeConst') -> None: ...
    class DataPacket:
        x: float = ...
        y: float = ...
        r: float = ...
        t: float = ...
        f: float = ...
        @typing.overload
        def __init__(self, sR830: 'SR830', double: float, double2: float, double3: float, double4: float, double5: float): ...
        @typing.overload
        def __init__(self, sR830: 'SR830', string: str): ...
    class RefMode(java.lang.Enum['SR830.RefMode'], jisa.control.Nameable):
        EXTERNAL: typing.ClassVar['SR830.RefMode'] = ...
        INTERNAL: typing.ClassVar['SR830.RefMode'] = ...
        def getName(self) -> str: ...
        def getRefMode(self) -> jisa.devices.interfaces.LockIn.RefMode: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SR830.RefMode': ...
        @staticmethod
        def values() -> typing.MutableSequence['SR830.RefMode']: ...
    class TimeConst(java.lang.Enum['SR830.TimeConst'], jisa.control.Nameable):
        T_10us: typing.ClassVar['SR830.TimeConst'] = ...
        T_30us: typing.ClassVar['SR830.TimeConst'] = ...
        T_100us: typing.ClassVar['SR830.TimeConst'] = ...
        T_300us: typing.ClassVar['SR830.TimeConst'] = ...
        T_1ms: typing.ClassVar['SR830.TimeConst'] = ...
        T_3ms: typing.ClassVar['SR830.TimeConst'] = ...
        T_10ms: typing.ClassVar['SR830.TimeConst'] = ...
        T_30ms: typing.ClassVar['SR830.TimeConst'] = ...
        T_100ms: typing.ClassVar['SR830.TimeConst'] = ...
        T_300ms: typing.ClassVar['SR830.TimeConst'] = ...
        T_1s: typing.ClassVar['SR830.TimeConst'] = ...
        T_3s: typing.ClassVar['SR830.TimeConst'] = ...
        T_10s: typing.ClassVar['SR830.TimeConst'] = ...
        T_30s: typing.ClassVar['SR830.TimeConst'] = ...
        T_100s: typing.ClassVar['SR830.TimeConst'] = ...
        T_300s: typing.ClassVar['SR830.TimeConst'] = ...
        T_1ks: typing.ClassVar['SR830.TimeConst'] = ...
        T_3ks: typing.ClassVar['SR830.TimeConst'] = ...
        T_10ks: typing.ClassVar['SR830.TimeConst'] = ...
        T_30ks: typing.ClassVar['SR830.TimeConst'] = ...
        def getName(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SR830.TimeConst': ...
        @staticmethod
        def values() -> typing.MutableSequence['SR830.TimeConst']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.devices.amp")``.

    SR560: typing.Type[SR560]
    SR810: typing.Type[SR810]
    SR830: typing.Type[SR830]
