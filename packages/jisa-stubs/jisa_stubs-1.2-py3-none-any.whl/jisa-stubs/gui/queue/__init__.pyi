
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import javafx.scene
import javafx.scene.layout
import jisa.experiment.queue
import jisa.gui
import typing



_ActionDisplay__T = typing.TypeVar('_ActionDisplay__T', bound=jisa.experiment.queue.Action)  # <T>
class ActionDisplay(javafx.scene.layout.StackPane, typing.Generic[_ActionDisplay__T]):
    SELECTED: typing.ClassVar[javafx.scene.layout.Background] = ...
    NORMAL: typing.ClassVar[javafx.scene.layout.Background] = ...
    HOVER: typing.ClassVar[javafx.scene.layout.Background] = ...
    def __init__(self, t: _ActionDisplay__T): ...
    def addRunningListener(self, listener: typing.Union[jisa.experiment.queue.Listener['ActionDisplay'[typing.Any]], typing.Callable[['ActionDisplay'[typing.Any]], None]]) -> jisa.experiment.queue.Listener['ActionDisplay'[typing.Any]]: ...
    def getAction(self) -> _ActionDisplay__T: ...
    def isSelected(self) -> bool: ...
    def removeRunningListener(self, listener: typing.Union[jisa.experiment.queue.Listener['ActionDisplay'[typing.Any]], typing.Callable[['ActionDisplay'[typing.Any]], None]]) -> None: ...
    def removeRunningListeners(self, collection: typing.Union[java.util.Collection[typing.Union[jisa.experiment.queue.Listener['ActionDisplay'[typing.Any]], typing.Callable[['ActionDisplay'[typing.Any]], None]]], typing.Sequence[typing.Union[jisa.experiment.queue.Listener['ActionDisplay'[typing.Any]], typing.Callable[['ActionDisplay'[typing.Any]], None]]], typing.Set[typing.Union[jisa.experiment.queue.Listener['ActionDisplay'[typing.Any]], typing.Callable[['ActionDisplay'[typing.Any]], None]]]]) -> None: ...
    def setSelected(self, boolean: bool) -> None: ...
    def setShowAll(self, boolean: bool) -> None: ...
    def triggerRunningListeners(self, actionDisplay: 'ActionDisplay'[typing.Any]) -> None: ...

class ActionQueueDisplay(jisa.gui.JFXElement):
    def __init__(self, string: str, actionQueue: jisa.experiment.queue.ActionQueue): ...
    def getSelectedActions(self) -> java.util.List[jisa.experiment.queue.Action]: ...
    def getSelectedIndices(self) -> java.util.List[int]: ...
    def scrollToAction(self, action: jisa.experiment.queue.Action[typing.Any]) -> None: ...
    def scrollToNode(self, node: javafx.scene.Node) -> None: ...
    def setExpanded(self, boolean: bool) -> None: ...
    @typing.overload
    def setSelectedActions(self, collection: typing.Union[java.util.Collection[jisa.experiment.queue.Action], typing.Sequence[jisa.experiment.queue.Action], typing.Set[jisa.experiment.queue.Action]]) -> None: ...
    @typing.overload
    def setSelectedActions(self, *action: jisa.experiment.queue.Action) -> None: ...
    def setSelectedIndices(self, collection: typing.Union[java.util.Collection[int], typing.Sequence[int], typing.Set[int]]) -> None: ...

class SimpleActionDisplay(ActionDisplay):
    def __init__(self, action: jisa.experiment.queue.Action[typing.Any]): ...
    def getAction(self) -> jisa.experiment.queue.Action[typing.Any]: ...
    def setSelected(self, boolean: bool) -> None: ...
    def setShowAll(self, boolean: bool) -> None: ...

_SweepActionDisplay__T = typing.TypeVar('_SweepActionDisplay__T')  # <T>
class SweepActionDisplay(ActionDisplay, typing.Generic[_SweepActionDisplay__T]):
    def __init__(self, sweepAction: jisa.experiment.queue.SweepAction[_SweepActionDisplay__T]): ...
    def getAction(self) -> jisa.experiment.queue.Action[typing.Any]: ...
    def setSelected(self, boolean: bool) -> None: ...
    def setShowAll(self, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.gui.queue")``.

    ActionDisplay: typing.Type[ActionDisplay]
    ActionQueueDisplay: typing.Type[ActionQueueDisplay]
    SimpleActionDisplay: typing.Type[SimpleActionDisplay]
    SweepActionDisplay: typing.Type[SweepActionDisplay]
