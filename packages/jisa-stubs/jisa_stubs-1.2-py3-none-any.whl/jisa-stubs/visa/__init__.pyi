
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.intelligt.modbus.jlibmodbus.serial
import com.sun.jna
import com.sun.jna.ptr
import java.lang
import java.nio
import java.util
import jisa.addresses
import jisa.devices.interfaces
import jisa.visa.connections
import jisa.visa.drivers
import jisa.visa.exceptions
import jpype
import kotlin.reflect
import typing



class DDEDevice(jisa.devices.interfaces.Instrument):
    @typing.overload
    def __init__(self, address: jisa.addresses.Address): ...
    @typing.overload
    def __init__(self, lXIAddress: jisa.addresses.LXIAddress, string: str, string2: str, int: int): ...
    def close(self) -> None: ...
    def getAddress(self) -> jisa.addresses.Address: ...
    def getIDN(self) -> str: ...
    def getName(self) -> str: ...
    def reconnect(self) -> None: ...
    def sendRequest(self, string: str) -> str: ...

class ModbusRTUDevice(jisa.devices.interfaces.Instrument):
    def __init__(self, address: jisa.addresses.Address, baudRate: com.intelligt.modbus.jlibmodbus.serial.SerialPort.BaudRate, int: int, int2: int, parity: com.intelligt.modbus.jlibmodbus.serial.SerialPort.Parity): ...
    def close(self) -> None: ...
    def getAddress(self) -> jisa.addresses.Address: ...
    def getIDN(self) -> str: ...
    def getName(self) -> str: ...
    def setTimeout(self, int: int) -> None: ...
    class ROCoil:
        def __init__(self, modbusRTUDevice: 'ModbusRTUDevice', int: int): ...
        def get(self) -> bool: ...
    class RORegister:
        def __init__(self, modbusRTUDevice: 'ModbusRTUDevice', int: int): ...
        def get(self) -> int: ...
    class RWCoil:
        def __init__(self, modbusRTUDevice: 'ModbusRTUDevice', int: int): ...
        def get(self) -> bool: ...
        def set(self, boolean: bool) -> None: ...
    class RWRegister:
        def __init__(self, modbusRTUDevice: 'ModbusRTUDevice', int: int): ...
        def get(self) -> int: ...
        def set(self, int: int) -> None: ...

_NativeDevice__I = typing.TypeVar('_NativeDevice__I', bound=com.sun.jna.Library)  # <I>
class NativeDevice(jisa.devices.interfaces.Instrument, typing.Generic[_NativeDevice__I]):
    @typing.overload
    def __init__(self, string: str, i: _NativeDevice__I): ...
    @typing.overload
    def __init__(self, string: str, class_: typing.Type[_NativeDevice__I]): ...
    def close(self) -> None: ...
    def getIDN(self) -> str: ...
    @staticmethod
    def search() -> java.util.List['NativeDevice'[typing.Any]]: ...

class NativeString(java.lang.CharSequence, java.lang.Comparable):
    @typing.overload
    def __init__(self, wString: com.sun.jna.WString): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    def charAt(self, int: int) -> str: ...
    def compareTo(self, object: typing.Any) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getPointer(self) -> com.sun.jna.Pointer: ...
    def hashCode(self) -> int: ...
    def length(self) -> int: ...
    def subSequence(self, int: int, int2: int) -> java.lang.CharSequence: ...
    def toString(self) -> str: ...

class PipeDevice(jisa.devices.interfaces.Instrument):
    def __init__(self, address: jisa.addresses.Address): ...
    def close(self) -> None: ...
    def getAddress(self) -> jisa.addresses.Address: ...
    def read(self) -> str: ...
    def readBytes(self) -> typing.MutableSequence[int]: ...
    def readDouble(self) -> float: ...
    def readInt(self) -> int: ...
    def setTimeout(self, int: int) -> None: ...
    def write(self, string: str, *object: typing.Any) -> None: ...

class VISA:
    def __init__(self): ...
    _getDriver__T = typing.TypeVar('_getDriver__T', bound=jisa.visa.drivers.Driver)  # <T>
    @staticmethod
    def getDriver(class_: typing.Type[_getDriver__T]) -> _getDriver__T: ...
    @staticmethod
    def init() -> None: ...
    @staticmethod
    def listInstruments() -> java.util.List[jisa.addresses.Address]: ...
    @typing.overload
    @staticmethod
    def openInstrument(address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    @typing.overload
    @staticmethod
    def openInstrument(address: jisa.addresses.Address, class_: typing.Type[jisa.visa.drivers.Driver]) -> jisa.visa.connections.Connection: ...
    @staticmethod
    def resetDrivers() -> None: ...

_VISADevice__ConfigRun__T = typing.TypeVar('_VISADevice__ConfigRun__T', bound=jisa.visa.connections.Connection)  # <T>
class VISADevice(jisa.devices.interfaces.Instrument):
    DEFAULT_TIMEOUT: typing.ClassVar[int] = ...
    DEFAULT_EOI: typing.ClassVar[int] = ...
    DEFAULT_EOS: typing.ClassVar[int] = ...
    EOS_RETURN: typing.ClassVar[int] = ...
    LF_TERMINATOR: typing.ClassVar[int] = ...
    CR_TERMINATOR: typing.ClassVar[int] = ...
    CRLF_TERMINATOR: typing.ClassVar[int] = ...
    C_IDN: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, address: jisa.addresses.Address): ...
    @typing.overload
    def __init__(self, address: jisa.addresses.Address, class_: typing.Type[jisa.visa.drivers.Driver]): ...
    def addAutoRemove(self, *string: str) -> None: ...
    def clearBuffers(self) -> None: ...
    def close(self) -> None: ...
    _config_0__T = typing.TypeVar('_config_0__T', bound=jisa.visa.connections.Connection)  # <T>
    _config_1__T = typing.TypeVar('_config_1__T', bound=jisa.visa.connections.Connection)  # <T>
    @typing.overload
    def config(self, class_: typing.Type[_config_0__T], configRun: typing.Union['VISADevice.ConfigRun'[_config_0__T], typing.Callable[[_config_0__T], None]]) -> None: ...
    @typing.overload
    def config(self, kClass: kotlin.reflect.KClass[_config_1__T], configRun: typing.Union['VISADevice.ConfigRun'[_config_1__T], typing.Callable[[_config_1__T], None]]) -> None: ...
    def configGPIB(self, configRun: typing.Union['VISADevice.ConfigRun'[jisa.visa.connections.GPIBConnection], typing.Callable[[jisa.visa.connections.GPIBConnection], None]]) -> None: ...
    def configLXI(self, configRun: typing.Union['VISADevice.ConfigRun'[jisa.visa.connections.LXIConnection], typing.Callable[[jisa.visa.connections.LXIConnection], None]]) -> None: ...
    def configSerial(self, configRun: typing.Union['VISADevice.ConfigRun'[jisa.visa.connections.SerialConnection], typing.Callable[[jisa.visa.connections.SerialConnection], None]]) -> None: ...
    def configTCPIP(self, configRun: typing.Union['VISADevice.ConfigRun'[jisa.visa.connections.TCPIPConnection], typing.Callable[[jisa.visa.connections.TCPIPConnection], None]]) -> None: ...
    def configUSB(self, configRun: typing.Union['VISADevice.ConfigRun'[jisa.visa.connections.USBConnection], typing.Callable[[jisa.visa.connections.USBConnection], None]]) -> None: ...
    def getAddress(self) -> jisa.addresses.Address: ...
    def getConnection(self) -> jisa.visa.connections.Connection: ...
    def getIDN(self) -> str: ...
    def getName(self) -> str: ...
    def manuallyClearReadBuffer(self) -> None: ...
    def query(self, string: str, *object: typing.Any) -> str: ...
    def queryDouble(self, string: str, *object: typing.Any) -> float: ...
    def queryInt(self, string: str, *object: typing.Any) -> int: ...
    @typing.overload
    def read(self) -> str: ...
    @typing.overload
    def read(self, int: int) -> str: ...
    def readBytes(self, int: int) -> typing.MutableSequence[int]: ...
    def readDouble(self) -> float: ...
    def readInt(self) -> int: ...
    def setIOLimit(self, int: int, boolean: bool, boolean2: bool) -> None: ...
    def setReadBufferSize(self, int: int) -> None: ...
    @typing.overload
    def setReadTerminator(self, string: str) -> None: ...
    @typing.overload
    def setReadTerminator(self, long: int) -> None: ...
    def setRetryCount(self, int: int) -> None: ...
    def setTimeout(self, int: int) -> None: ...
    def setWriteTerminator(self, string: str) -> None: ...
    def write(self, string: str, *object: typing.Any) -> None: ...
    def writeBytes(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    class ConfigRun(typing.Generic[_VISADevice__ConfigRun__T]):
        def config(self, t: _VISADevice__ConfigRun__T) -> None: ...

class VISANativeInterface(com.sun.jna.Library):
    VI_SPEC_VERSION: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_CLASS: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_NAME: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_IMPL_VERSION: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_LOCK_STATE: typing.ClassVar[int] = ...
    VI_ATTR_MAX_QUEUE_LENGTH: typing.ClassVar[int] = ...
    VI_ATTR_USER_DATA_32: typing.ClassVar[int] = ...
    VI_ATTR_FDC_CHNL: typing.ClassVar[int] = ...
    VI_ATTR_FDC_MODE: typing.ClassVar[int] = ...
    VI_ATTR_FDC_GEN_SIGNAL_EN: typing.ClassVar[int] = ...
    VI_ATTR_FDC_USE_PAIR: typing.ClassVar[int] = ...
    VI_ATTR_SEND_END_EN: typing.ClassVar[int] = ...
    VI_ATTR_TERMCHAR: typing.ClassVar[int] = ...
    VI_ATTR_TMO_VALUE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_READDR_EN: typing.ClassVar[int] = ...
    VI_ATTR_IO_PROT: typing.ClassVar[int] = ...
    VI_ATTR_DMA_ALLOW_EN: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_BAUD: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_DATA_BITS: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_PARITY: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_STOP_BITS: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_FLOW_CNTRL: typing.ClassVar[int] = ...
    VI_ATTR_RD_BUF_OPER_MODE: typing.ClassVar[int] = ...
    VI_ATTR_RD_BUF_SIZE: typing.ClassVar[int] = ...
    VI_ATTR_WR_BUF_OPER_MODE: typing.ClassVar[int] = ...
    VI_ATTR_WR_BUF_SIZE: typing.ClassVar[int] = ...
    VI_ATTR_SUPPRESS_END_EN: typing.ClassVar[int] = ...
    VI_ATTR_TERMCHAR_EN: typing.ClassVar[int] = ...
    VI_ATTR_DEST_ACCESS_PRIV: typing.ClassVar[int] = ...
    VI_ATTR_DEST_BYTE_ORDER: typing.ClassVar[int] = ...
    VI_ATTR_SRC_ACCESS_PRIV: typing.ClassVar[int] = ...
    VI_ATTR_SRC_BYTE_ORDER: typing.ClassVar[int] = ...
    VI_ATTR_SRC_INCREMENT: typing.ClassVar[int] = ...
    VI_ATTR_DEST_INCREMENT: typing.ClassVar[int] = ...
    VI_ATTR_WIN_ACCESS_PRIV: typing.ClassVar[int] = ...
    VI_ATTR_WIN_BYTE_ORDER: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_ATN_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_ADDR_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_CIC_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_NDAC_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_SRQ_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_SYS_CNTRL_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_HS488_CBL_LEN: typing.ClassVar[int] = ...
    VI_ATTR_CMDR_LA: typing.ClassVar[int] = ...
    VI_ATTR_VXI_DEV_CLASS: typing.ClassVar[int] = ...
    VI_ATTR_MAINFRAME_LA: typing.ClassVar[int] = ...
    VI_ATTR_MANF_NAME: typing.ClassVar[int] = ...
    VI_ATTR_MODEL_NAME: typing.ClassVar[int] = ...
    VI_ATTR_VXI_VME_INTR_STATUS: typing.ClassVar[int] = ...
    VI_ATTR_VXI_TRIG_STATUS: typing.ClassVar[int] = ...
    VI_ATTR_VXI_VME_SYSFAIL_STATE: typing.ClassVar[int] = ...
    VI_ATTR_WIN_BASE_ADDR_32: typing.ClassVar[int] = ...
    VI_ATTR_WIN_SIZE_32: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_AVAIL_NUM: typing.ClassVar[int] = ...
    VI_ATTR_MEM_BASE_32: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_CTS_STATE: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_DCD_STATE: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_DSR_STATE: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_DTR_STATE: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_END_IN: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_END_OUT: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_REPLACE_CHAR: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_RI_STATE: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_RTS_STATE: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_XON_CHAR: typing.ClassVar[int] = ...
    VI_ATTR_ASRL_XOFF_CHAR: typing.ClassVar[int] = ...
    VI_ATTR_WIN_ACCESS: typing.ClassVar[int] = ...
    VI_ATTR_RM_SESSION: typing.ClassVar[int] = ...
    VI_ATTR_VXI_LA: typing.ClassVar[int] = ...
    VI_ATTR_MANF_ID: typing.ClassVar[int] = ...
    VI_ATTR_MEM_SIZE_32: typing.ClassVar[int] = ...
    VI_ATTR_MEM_SPACE: typing.ClassVar[int] = ...
    VI_ATTR_MODEL_CODE: typing.ClassVar[int] = ...
    VI_ATTR_SLOT: typing.ClassVar[int] = ...
    VI_ATTR_INTF_INST_NAME: typing.ClassVar[int] = ...
    VI_ATTR_IMMEDIATE_SERV: typing.ClassVar[int] = ...
    VI_ATTR_INTF_PARENT_NUM: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_SPEC_VERSION: typing.ClassVar[int] = ...
    VI_ATTR_INTF_TYPE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_PRIMARY_ADDR: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_SECONDARY_ADDR: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_MANF_NAME: typing.ClassVar[int] = ...
    VI_ATTR_RSRC_MANF_ID: typing.ClassVar[int] = ...
    VI_ATTR_INTF_NUM: typing.ClassVar[int] = ...
    VI_ATTR_TRIG_ID: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_REN_STATE: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_UNADDR_EN: typing.ClassVar[int] = ...
    VI_ATTR_DEV_STATUS_BYTE: typing.ClassVar[int] = ...
    VI_ATTR_FILE_APPEND_EN: typing.ClassVar[int] = ...
    VI_ATTR_VXI_TRIG_SUPPORT: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_ADDR: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_HOSTNAME: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_PORT: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_DEVICE_NAME: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_NODELAY: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_KEEPALIVE: typing.ClassVar[int] = ...
    VI_ATTR_4882_COMPLIANT: typing.ClassVar[int] = ...
    VI_ATTR_USB_SERIAL_NUM: typing.ClassVar[int] = ...
    VI_ATTR_USB_INTFC_NUM: typing.ClassVar[int] = ...
    VI_ATTR_USB_PROTOCOL: typing.ClassVar[int] = ...
    VI_ATTR_USB_MAX_INTR_SIZE: typing.ClassVar[int] = ...
    VI_ATTR_PXI_DEV_NUM: typing.ClassVar[int] = ...
    VI_ATTR_PXI_FUNC_NUM: typing.ClassVar[int] = ...
    VI_ATTR_PXI_BUS_NUM: typing.ClassVar[int] = ...
    VI_ATTR_PXI_CHASSIS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_SLOTPATH: typing.ClassVar[int] = ...
    VI_ATTR_PXI_SLOT_LBUS_LEFT: typing.ClassVar[int] = ...
    VI_ATTR_PXI_SLOT_LBUS_RIGHT: typing.ClassVar[int] = ...
    VI_ATTR_PXI_TRIG_BUS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_STAR_TRIG_BUS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_STAR_TRIG_LINE: typing.ClassVar[int] = ...
    VI_ATTR_PXI_SRC_TRIG_BUS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_DEST_TRIG_BUS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_TYPE_BAR0: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_TYPE_BAR1: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_TYPE_BAR2: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_TYPE_BAR3: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_TYPE_BAR4: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_TYPE_BAR5: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR0_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR1_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR2_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR3_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR4_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR5_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR0_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR1_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR2_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR3_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR4_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR5_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR0_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR1_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR2_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR3_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR4_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR5_32: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR0_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR1_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR2_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR3_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR4_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR5_64: typing.ClassVar[int] = ...
    VI_ATTR_PXI_IS_EXPRESS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_SLOT_LWIDTH: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MAX_LWIDTH: typing.ClassVar[int] = ...
    VI_ATTR_PXI_ACTUAL_LWIDTH: typing.ClassVar[int] = ...
    VI_ATTR_PXI_DSTAR_BUS: typing.ClassVar[int] = ...
    VI_ATTR_PXI_DSTAR_SET: typing.ClassVar[int] = ...
    VI_ATTR_PXI_ALLOW_WRITE_COMBINE: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_HISLIP_OVERLAP_EN: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_HISLIP_VERSION: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB: typing.ClassVar[int] = ...
    VI_ATTR_TCPIP_IS_HISLIP: typing.ClassVar[int] = ...
    VI_ATTR_JOB_ID: typing.ClassVar[int] = ...
    VI_ATTR_EVENT_TYPE: typing.ClassVar[int] = ...
    VI_ATTR_SIGP_STATUS_ID: typing.ClassVar[int] = ...
    VI_ATTR_RECV_TRIG_ID: typing.ClassVar[int] = ...
    VI_ATTR_INTR_STATUS_ID: typing.ClassVar[int] = ...
    VI_ATTR_STATUS: typing.ClassVar[int] = ...
    VI_ATTR_RET_COUNT_32: typing.ClassVar[int] = ...
    VI_ATTR_BUFFER: typing.ClassVar[int] = ...
    VI_ATTR_RECV_INTR_LEVEL: typing.ClassVar[int] = ...
    VI_ATTR_OPER_NAME: typing.ClassVar[int] = ...
    VI_ATTR_GPIB_RECV_CIC_STATE: typing.ClassVar[int] = ...
    VI_ATTR_RECV_TCPIP_ADDR: typing.ClassVar[int] = ...
    VI_ATTR_USB_RECV_INTR_SIZE: typing.ClassVar[int] = ...
    VI_ATTR_USB_RECV_INTR_DATA: typing.ClassVar[int] = ...
    VI_ATTR_PXI_RECV_INTR_SEQ: typing.ClassVar[int] = ...
    VI_ATTR_PXI_RECV_INTR_DATA: typing.ClassVar[int] = ...
    VI_ATTR_USER_DATA: typing.ClassVar[int] = ...
    VI_ATTR_RET_COUNT: typing.ClassVar[int] = ...
    VI_ATTR_WIN_BASE_ADDR_64: typing.ClassVar[int] = ...
    VI_ATTR_WIN_SIZE_64: typing.ClassVar[int] = ...
    VI_ATTR_MEM_BASE_64: typing.ClassVar[int] = ...
    VI_ATTR_MEM_SIZE_64: typing.ClassVar[int] = ...
    VI_ATTR_WIN_BASE_ADDR: typing.ClassVar[int] = ...
    VI_ATTR_WIN_SIZE: typing.ClassVar[int] = ...
    VI_ATTR_MEM_BASE: typing.ClassVar[int] = ...
    VI_ATTR_MEM_SIZE: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR0: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR1: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR2: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR3: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR4: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_BASE_BAR5: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR0: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR1: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR2: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR3: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR4: typing.ClassVar[int] = ...
    VI_ATTR_PXI_MEM_SIZE_BAR5: typing.ClassVar[int] = ...
    VI_EVENT_IO_COMPLETION: typing.ClassVar[int] = ...
    VI_EVENT_TRIG: typing.ClassVar[int] = ...
    VI_EVENT_SERVICE_REQ: typing.ClassVar[int] = ...
    VI_EVENT_CLEAR: typing.ClassVar[int] = ...
    VI_EVENT_EXCEPTION: typing.ClassVar[int] = ...
    VI_EVENT_GPIB_CIC: typing.ClassVar[int] = ...
    VI_EVENT_GPIB_TALK: typing.ClassVar[int] = ...
    VI_EVENT_GPIB_LISTEN: typing.ClassVar[int] = ...
    VI_EVENT_VXI_VME_SYSFAIL: typing.ClassVar[int] = ...
    VI_EVENT_VXI_VME_SYSRESET: typing.ClassVar[int] = ...
    VI_EVENT_VXI_SIGP: typing.ClassVar[int] = ...
    VI_EVENT_VXI_VME_INTR: typing.ClassVar[int] = ...
    VI_EVENT_PXI_INTR: typing.ClassVar[int] = ...
    VI_EVENT_TCPIP_CONNECT: typing.ClassVar[int] = ...
    VI_EVENT_USB_INTR: typing.ClassVar[int] = ...
    VI_ALL_ENABLED_EVENTS: typing.ClassVar[int] = ...
    VI_SUCCESS_EVENT_EN: typing.ClassVar[int] = ...
    VI_SUCCESS_EVENT_DIS: typing.ClassVar[int] = ...
    VI_SUCCESS_QUEUE_EMPTY: typing.ClassVar[int] = ...
    VI_SUCCESS_TERM_CHAR: typing.ClassVar[int] = ...
    VI_SUCCESS_MAX_CNT: typing.ClassVar[int] = ...
    VI_SUCCESS_DEV_NPRESENT: typing.ClassVar[int] = ...
    VI_SUCCESS_TRIG_MAPPED: typing.ClassVar[int] = ...
    VI_SUCCESS_QUEUE_NEMPTY: typing.ClassVar[int] = ...
    VI_SUCCESS_NCHAIN: typing.ClassVar[int] = ...
    VI_SUCCESS_NESTED_SHARED: typing.ClassVar[int] = ...
    VI_SUCCESS_NESTED_EXCLUSIVE: typing.ClassVar[int] = ...
    VI_SUCCESS_SYNC: typing.ClassVar[int] = ...
    VI_WARN_QUEUE_OVERFLOW: typing.ClassVar[int] = ...
    VI_WARN_CONFIG_NLOADED: typing.ClassVar[int] = ...
    VI_WARN_NULL_OBJECT: typing.ClassVar[int] = ...
    VI_WARN_NSUP_ATTR_STATE: typing.ClassVar[int] = ...
    VI_WARN_UNKNOWN_STATUS: typing.ClassVar[int] = ...
    VI_WARN_NSUP_BUF: typing.ClassVar[int] = ...
    VI_WARN_EXT_FUNC_NIMPL: typing.ClassVar[int] = ...
    VI_ERROR_SYSTEM_ERROR: typing.ClassVar[int] = ...
    VI_ERROR_INV_OBJECT: typing.ClassVar[int] = ...
    VI_ERROR_RSRC_LOCKED: typing.ClassVar[int] = ...
    VI_ERROR_INV_EXPR: typing.ClassVar[int] = ...
    VI_ERROR_RSRC_NFOUND: typing.ClassVar[int] = ...
    VI_ERROR_INV_RSRC_NAME: typing.ClassVar[int] = ...
    VI_ERROR_INV_ACC_MODE: typing.ClassVar[int] = ...
    VI_ERROR_TMO: typing.ClassVar[int] = ...
    VI_ERROR_CLOSING_FAILED: typing.ClassVar[int] = ...
    VI_ERROR_INV_DEGREE: typing.ClassVar[int] = ...
    VI_ERROR_INV_JOB_ID: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_ATTR: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_ATTR_STATE: typing.ClassVar[int] = ...
    VI_ERROR_ATTR_READONLY: typing.ClassVar[int] = ...
    VI_ERROR_INV_LOCK_TYPE: typing.ClassVar[int] = ...
    VI_ERROR_INV_ACCESS_KEY: typing.ClassVar[int] = ...
    VI_ERROR_INV_EVENT: typing.ClassVar[int] = ...
    VI_ERROR_INV_MECH: typing.ClassVar[int] = ...
    VI_ERROR_HNDLR_NINSTALLED: typing.ClassVar[int] = ...
    VI_ERROR_INV_HNDLR_REF: typing.ClassVar[int] = ...
    VI_ERROR_INV_CONTEXT: typing.ClassVar[int] = ...
    VI_ERROR_NENABLED: typing.ClassVar[int] = ...
    VI_ERROR_ABORT: typing.ClassVar[int] = ...
    VI_ERROR_RAW_WR_PROT_VIOL: typing.ClassVar[int] = ...
    VI_ERROR_RAW_RD_PROT_VIOL: typing.ClassVar[int] = ...
    VI_ERROR_OUTP_PROT_VIOL: typing.ClassVar[int] = ...
    VI_ERROR_INP_PROT_VIOL: typing.ClassVar[int] = ...
    VI_ERROR_BERR: typing.ClassVar[int] = ...
    VI_ERROR_IN_PROGRESS: typing.ClassVar[int] = ...
    VI_ERROR_INV_SETUP: typing.ClassVar[int] = ...
    VI_ERROR_QUEUE_ERROR: typing.ClassVar[int] = ...
    VI_ERROR_ALLOC: typing.ClassVar[int] = ...
    VI_ERROR_INV_MASK: typing.ClassVar[int] = ...
    VI_ERROR_IO: typing.ClassVar[int] = ...
    VI_ERROR_INV_FMT: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_FMT: typing.ClassVar[int] = ...
    VI_ERROR_LINE_IN_USE: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_MODE: typing.ClassVar[int] = ...
    VI_ERROR_SRQ_NOCCURRED: typing.ClassVar[int] = ...
    VI_ERROR_INV_SPACE: typing.ClassVar[int] = ...
    VI_ERROR_INV_OFFSET: typing.ClassVar[int] = ...
    VI_ERROR_INV_WIDTH: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_OFFSET: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_VAR_WIDTH: typing.ClassVar[int] = ...
    VI_ERROR_WINDOW_NMAPPED: typing.ClassVar[int] = ...
    VI_ERROR_RESP_PENDING: typing.ClassVar[int] = ...
    VI_ERROR_NLISTENERS: typing.ClassVar[int] = ...
    VI_ERROR_NCIC: typing.ClassVar[int] = ...
    VI_ERROR_NSYS_CNTLR: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_OPER: typing.ClassVar[int] = ...
    VI_ERROR_INTR_PENDING: typing.ClassVar[int] = ...
    VI_ERROR_ASRL_PARITY: typing.ClassVar[int] = ...
    VI_ERROR_ASRL_FRAMING: typing.ClassVar[int] = ...
    VI_ERROR_ASRL_OVERRUN: typing.ClassVar[int] = ...
    VI_ERROR_TRIG_NMAPPED: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_ALIGN_OFFSET: typing.ClassVar[int] = ...
    VI_ERROR_USER_BUF: typing.ClassVar[int] = ...
    VI_ERROR_RSRC_BUSY: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_WIDTH: typing.ClassVar[int] = ...
    VI_ERROR_INV_PARAMETER: typing.ClassVar[int] = ...
    VI_ERROR_INV_PROT: typing.ClassVar[int] = ...
    VI_ERROR_INV_SIZE: typing.ClassVar[int] = ...
    VI_ERROR_WINDOW_MAPPED: typing.ClassVar[int] = ...
    VI_ERROR_NIMPL_OPER: typing.ClassVar[int] = ...
    VI_ERROR_INV_LENGTH: typing.ClassVar[int] = ...
    VI_ERROR_INV_MODE: typing.ClassVar[int] = ...
    VI_ERROR_SESN_NLOCKED: typing.ClassVar[int] = ...
    VI_ERROR_MEM_NSHARED: typing.ClassVar[int] = ...
    VI_ERROR_LIBRARY_NFOUND: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_INTR: typing.ClassVar[int] = ...
    VI_ERROR_INV_LINE: typing.ClassVar[int] = ...
    VI_ERROR_FILE_ACCESS: typing.ClassVar[int] = ...
    VI_ERROR_FILE_IO: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_LINE: typing.ClassVar[int] = ...
    VI_ERROR_NSUP_MECH: typing.ClassVar[int] = ...
    VI_ERROR_INTF_NUM_NCONFIG: typing.ClassVar[int] = ...
    VI_ERROR_CONN_LOST: typing.ClassVar[int] = ...
    VI_ERROR_NPERMISSION: typing.ClassVar[int] = ...
    VI_FIND_BUFLEN: typing.ClassVar[int] = ...
    VI_INTF_GPIB: typing.ClassVar[int] = ...
    VI_INTF_VXI: typing.ClassVar[int] = ...
    VI_INTF_GPIB_VXI: typing.ClassVar[int] = ...
    VI_INTF_ASRL: typing.ClassVar[int] = ...
    VI_INTF_PXI: typing.ClassVar[int] = ...
    VI_INTF_TCPIP: typing.ClassVar[int] = ...
    VI_INTF_USB: typing.ClassVar[int] = ...
    VI_PROT_NORMAL: typing.ClassVar[int] = ...
    VI_PROT_FDC: typing.ClassVar[int] = ...
    VI_PROT_HS488: typing.ClassVar[int] = ...
    VI_PROT_4882_STRS: typing.ClassVar[int] = ...
    VI_PROT_USBTMC_VENDOR: typing.ClassVar[int] = ...
    VI_FDC_NORMAL: typing.ClassVar[int] = ...
    VI_FDC_STREAM: typing.ClassVar[int] = ...
    VI_LOCAL_SPACE: typing.ClassVar[int] = ...
    VI_A16_SPACE: typing.ClassVar[int] = ...
    VI_A24_SPACE: typing.ClassVar[int] = ...
    VI_A32_SPACE: typing.ClassVar[int] = ...
    VI_A64_SPACE: typing.ClassVar[int] = ...
    VI_PXI_ALLOC_SPACE: typing.ClassVar[int] = ...
    VI_PXI_CFG_SPACE: typing.ClassVar[int] = ...
    VI_PXI_BAR0_SPACE: typing.ClassVar[int] = ...
    VI_PXI_BAR1_SPACE: typing.ClassVar[int] = ...
    VI_PXI_BAR2_SPACE: typing.ClassVar[int] = ...
    VI_PXI_BAR3_SPACE: typing.ClassVar[int] = ...
    VI_PXI_BAR4_SPACE: typing.ClassVar[int] = ...
    VI_PXI_BAR5_SPACE: typing.ClassVar[int] = ...
    VI_OPAQUE_SPACE: typing.ClassVar[int] = ...
    VI_UNKNOWN_LA: typing.ClassVar[int] = ...
    VI_UNKNOWN_SLOT: typing.ClassVar[int] = ...
    VI_UNKNOWN_LEVEL: typing.ClassVar[int] = ...
    VI_UNKNOWN_CHASSIS: typing.ClassVar[int] = ...
    VI_QUEUE: typing.ClassVar[int] = ...
    VI_HNDLR: typing.ClassVar[int] = ...
    VI_SUSPEND_HNDLR: typing.ClassVar[int] = ...
    VI_ALL_MECH: typing.ClassVar[int] = ...
    VI_ANY_HNDLR: typing.ClassVar[int] = ...
    VI_TRIG_ALL: typing.ClassVar[int] = ...
    VI_TRIG_SW: typing.ClassVar[int] = ...
    VI_TRIG_TTL0: typing.ClassVar[int] = ...
    VI_TRIG_TTL1: typing.ClassVar[int] = ...
    VI_TRIG_TTL2: typing.ClassVar[int] = ...
    VI_TRIG_TTL3: typing.ClassVar[int] = ...
    VI_TRIG_TTL4: typing.ClassVar[int] = ...
    VI_TRIG_TTL5: typing.ClassVar[int] = ...
    VI_TRIG_TTL6: typing.ClassVar[int] = ...
    VI_TRIG_TTL7: typing.ClassVar[int] = ...
    VI_TRIG_ECL0: typing.ClassVar[int] = ...
    VI_TRIG_ECL1: typing.ClassVar[int] = ...
    VI_TRIG_ECL2: typing.ClassVar[int] = ...
    VI_TRIG_ECL3: typing.ClassVar[int] = ...
    VI_TRIG_ECL4: typing.ClassVar[int] = ...
    VI_TRIG_ECL5: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT1: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT2: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT3: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT4: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT5: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT6: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT7: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT8: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT9: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT10: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT11: typing.ClassVar[int] = ...
    VI_TRIG_STAR_SLOT12: typing.ClassVar[int] = ...
    VI_TRIG_STAR_INSTR: typing.ClassVar[int] = ...
    VI_TRIG_PANEL_IN: typing.ClassVar[int] = ...
    VI_TRIG_PANEL_OUT: typing.ClassVar[int] = ...
    VI_TRIG_STAR_VXI0: typing.ClassVar[int] = ...
    VI_TRIG_STAR_VXI1: typing.ClassVar[int] = ...
    VI_TRIG_STAR_VXI2: typing.ClassVar[int] = ...
    VI_TRIG_PROT_DEFAULT: typing.ClassVar[int] = ...
    VI_TRIG_PROT_ON: typing.ClassVar[int] = ...
    VI_TRIG_PROT_OFF: typing.ClassVar[int] = ...
    VI_TRIG_PROT_SYNC: typing.ClassVar[int] = ...
    VI_TRIG_PROT_RESERVE: typing.ClassVar[int] = ...
    VI_TRIG_PROT_UNRESERVE: typing.ClassVar[int] = ...
    VI_READ_BUF: typing.ClassVar[int] = ...
    VI_WRITE_BUF: typing.ClassVar[int] = ...
    VI_READ_BUF_DISCARD: typing.ClassVar[int] = ...
    VI_WRITE_BUF_DISCARD: typing.ClassVar[int] = ...
    VI_IO_IN_BUF: typing.ClassVar[int] = ...
    VI_IO_OUT_BUF: typing.ClassVar[int] = ...
    VI_IO_IN_BUF_DISCARD: typing.ClassVar[int] = ...
    VI_IO_OUT_BUF_DISCARD: typing.ClassVar[int] = ...
    VI_FLUSH_ON_ACCESS: typing.ClassVar[int] = ...
    VI_FLUSH_WHEN_FULL: typing.ClassVar[int] = ...
    VI_FLUSH_DISABLE: typing.ClassVar[int] = ...
    VI_NMAPPED: typing.ClassVar[int] = ...
    VI_USE_OPERS: typing.ClassVar[int] = ...
    VI_DEREF_ADDR: typing.ClassVar[int] = ...
    VI_TMO_IMMEDIATE: typing.ClassVar[int] = ...
    VI_TMO_INFINITE: typing.ClassVar[int] = ...
    VI_NO_LOCK: typing.ClassVar[int] = ...
    VI_EXCLUSIVE_LOCK: typing.ClassVar[int] = ...
    VI_SHARED_LOCK: typing.ClassVar[int] = ...
    VI_LOAD_CONFIG: typing.ClassVar[int] = ...
    VI_NO_SEC_ADDR: typing.ClassVar[int] = ...
    VI_ASRL_PAR_NONE: typing.ClassVar[int] = ...
    VI_ASRL_PAR_ODD: typing.ClassVar[int] = ...
    VI_ASRL_PAR_EVEN: typing.ClassVar[int] = ...
    VI_ASRL_PAR_MARK: typing.ClassVar[int] = ...
    VI_ASRL_PAR_SPACE: typing.ClassVar[int] = ...
    VI_ASRL_STOP_ONE: typing.ClassVar[int] = ...
    VI_ASRL_STOP_ONE5: typing.ClassVar[int] = ...
    VI_ASRL_STOP_TWO: typing.ClassVar[int] = ...
    VI_ASRL_FLOW_NONE: typing.ClassVar[int] = ...
    VI_ASRL_FLOW_XON_XOFF: typing.ClassVar[int] = ...
    VI_ASRL_FLOW_RTS_CTS: typing.ClassVar[int] = ...
    VI_ASRL_FLOW_DTR_DSR: typing.ClassVar[int] = ...
    VI_ASRL_END_NONE: typing.ClassVar[int] = ...
    VI_ASRL_END_LAST_BIT: typing.ClassVar[int] = ...
    VI_ASRL_END_TERMCHAR: typing.ClassVar[int] = ...
    VI_ASRL_END_BREAK: typing.ClassVar[int] = ...
    VI_STATE_ASSERTED: typing.ClassVar[int] = ...
    VI_STATE_UNASSERTED: typing.ClassVar[int] = ...
    VI_STATE_UNKNOWN: typing.ClassVar[int] = ...
    VI_BIG_ENDIAN: typing.ClassVar[int] = ...
    VI_LITTLE_ENDIAN: typing.ClassVar[int] = ...
    VI_DATA_PRIV: typing.ClassVar[int] = ...
    VI_DATA_NPRIV: typing.ClassVar[int] = ...
    VI_PROG_PRIV: typing.ClassVar[int] = ...
    VI_PROG_NPRIV: typing.ClassVar[int] = ...
    VI_BLCK_PRIV: typing.ClassVar[int] = ...
    VI_BLCK_NPRIV: typing.ClassVar[int] = ...
    VI_D64_PRIV: typing.ClassVar[int] = ...
    VI_D64_NPRIV: typing.ClassVar[int] = ...
    VI_D64_2EVME: typing.ClassVar[int] = ...
    VI_D64_SST160: typing.ClassVar[int] = ...
    VI_D64_SST267: typing.ClassVar[int] = ...
    VI_D64_SST320: typing.ClassVar[int] = ...
    VI_WIDTH_8: typing.ClassVar[int] = ...
    VI_WIDTH_16: typing.ClassVar[int] = ...
    VI_WIDTH_32: typing.ClassVar[int] = ...
    VI_WIDTH_64: typing.ClassVar[int] = ...
    VI_GPIB_REN_DEASSERT: typing.ClassVar[int] = ...
    VI_GPIB_REN_ASSERT: typing.ClassVar[int] = ...
    VI_GPIB_REN_DEASSERT_GTL: typing.ClassVar[int] = ...
    VI_GPIB_REN_ASSERT_ADDRESS: typing.ClassVar[int] = ...
    VI_GPIB_REN_ASSERT_LLO: typing.ClassVar[int] = ...
    VI_GPIB_REN_ASSERT_ADDRESS_LLO: typing.ClassVar[int] = ...
    VI_GPIB_REN_ADDRESS_GTL: typing.ClassVar[int] = ...
    VI_GPIB_ATN_DEASSERT: typing.ClassVar[int] = ...
    VI_GPIB_ATN_ASSERT: typing.ClassVar[int] = ...
    VI_GPIB_ATN_DEASSERT_HANDSHAKE: typing.ClassVar[int] = ...
    VI_GPIB_ATN_ASSERT_IMMEDIATE: typing.ClassVar[int] = ...
    VI_GPIB_HS488_DISABLED: typing.ClassVar[int] = ...
    VI_GPIB_HS488_NIMPL: typing.ClassVar[int] = ...
    VI_GPIB_UNADDRESSED: typing.ClassVar[int] = ...
    VI_GPIB_TALKER: typing.ClassVar[int] = ...
    VI_GPIB_LISTENER: typing.ClassVar[int] = ...
    VI_VXI_CMD16: typing.ClassVar[int] = ...
    VI_VXI_CMD16_RESP16: typing.ClassVar[int] = ...
    VI_VXI_RESP16: typing.ClassVar[int] = ...
    VI_VXI_CMD32: typing.ClassVar[int] = ...
    VI_VXI_CMD32_RESP16: typing.ClassVar[int] = ...
    VI_VXI_CMD32_RESP32: typing.ClassVar[int] = ...
    VI_VXI_RESP32: typing.ClassVar[int] = ...
    VI_ASSERT_SIGNAL: typing.ClassVar[int] = ...
    VI_ASSERT_USE_ASSIGNED: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ1: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ2: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ3: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ4: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ5: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ6: typing.ClassVar[int] = ...
    VI_ASSERT_IRQ7: typing.ClassVar[int] = ...
    VI_UTIL_ASSERT_SYSRESET: typing.ClassVar[int] = ...
    VI_UTIL_ASSERT_SYSFAIL: typing.ClassVar[int] = ...
    VI_UTIL_DEASSERT_SYSFAIL: typing.ClassVar[int] = ...
    VI_VXI_CLASS_MEMORY: typing.ClassVar[int] = ...
    VI_VXI_CLASS_EXTENDED: typing.ClassVar[int] = ...
    VI_VXI_CLASS_MESSAGE: typing.ClassVar[int] = ...
    VI_VXI_CLASS_REGISTER: typing.ClassVar[int] = ...
    VI_VXI_CLASS_OTHER: typing.ClassVar[int] = ...
    VI_PXI_ADDR_NONE: typing.ClassVar[int] = ...
    VI_PXI_ADDR_MEM: typing.ClassVar[int] = ...
    VI_PXI_ADDR_IO: typing.ClassVar[int] = ...
    VI_PXI_ADDR_CFG: typing.ClassVar[int] = ...
    VI_TRIG_UNKNOWN: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_0: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_1: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_2: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_3: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_4: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_5: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_6: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_7: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_8: typing.ClassVar[int] = ...
    VI_PXI_LBUS_STAR_TRIG_BUS_9: typing.ClassVar[int] = ...
    VI_PXI_STAR_TRIG_CONTROLLER: typing.ClassVar[int] = ...
    VI_ERROR_INV_SESSION: typing.ClassVar[int] = ...
    VI_INFINITE: typing.ClassVar[int] = ...
    VI_NORMAL: typing.ClassVar[int] = ...
    VI_FDC: typing.ClassVar[int] = ...
    VI_HS488: typing.ClassVar[int] = ...
    VI_ASRL488: typing.ClassVar[int] = ...
    VI_ASRL_IN_BUF: typing.ClassVar[int] = ...
    VI_ASRL_OUT_BUF: typing.ClassVar[int] = ...
    VI_ASRL_IN_BUF_DISCARD: typing.ClassVar[int] = ...
    VI_ASRL_OUT_BUF_DISCARD: typing.ClassVar[int] = ...
    def viAssertIntrSignal(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viAssertTrigger(self, nativeLong: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viAssertUtilSignal(self, nativeLong: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viBufRead(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viBufWrite(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viClear(self, nativeLong: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viClose(self, nativeLong: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viDisableEvent(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viDiscardEvents(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viEnableEvent(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, short: int, nativeLong3: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viFindNext(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viFindRsrc(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference, nativeLongByReference2: com.sun.jna.ptr.NativeLongByReference, byteBuffer2: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viFlush(self, nativeLong: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viGetAttribute(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer) -> com.sun.jna.NativeLong: ...
    def viGpibCommand(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viGpibControlATN(self, nativeLong: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viGpibControlREN(self, nativeLong: com.sun.jna.NativeLong, short: int) -> com.sun.jna.NativeLong: ...
    def viGpibPassControl(self, nativeLong: com.sun.jna.NativeLong, short: int, short2: int) -> com.sun.jna.NativeLong: ...
    def viGpibSendIFC(self, nativeLong: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viIn16(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viIn16Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viIn32(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viIn32Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viIn64(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, viPUInt64: 'VISANativeInterface.ViPUInt64') -> com.sun.jna.NativeLong: ...
    def viIn64Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', viPUInt64: 'VISANativeInterface.ViPUInt64') -> com.sun.jna.NativeLong: ...
    def viIn8(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viIn8Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viInstallHandler(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, viHndlr: 'VISANativeInterface.ViHndlr', pointer: com.sun.jna.Pointer) -> com.sun.jna.NativeLong: ...
    def viLock(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viMapAddress(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, short2: int, pointer: com.sun.jna.Pointer, pointerByReference: com.sun.jna.ptr.PointerByReference) -> com.sun.jna.NativeLong: ...
    def viMapAddressEx(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, short2: int, pointer: com.sun.jna.Pointer, pointerByReference: com.sun.jna.ptr.PointerByReference) -> com.sun.jna.NativeLong: ...
    def viMapTrigger(self, nativeLong: com.sun.jna.NativeLong, short: int, short2: int, short3: int) -> com.sun.jna.NativeLong: ...
    def viMemAlloc(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMemAllocEx(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, viPBusAddress64: 'VISANativeInterface.ViPBusAddress64') -> com.sun.jna.NativeLong: ...
    def viMemFree(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viMemFreeEx(self, nativeLong: com.sun.jna.NativeLong, viBusAddress64: 'VISANativeInterface.ViBusAddress64') -> com.sun.jna.NativeLong: ...
    def viMove(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, short2: int, short3: int, nativeLong3: com.sun.jna.NativeLong, short4: int, nativeLong4: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viMoveAsync(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, short2: int, short3: int, nativeLong3: com.sun.jna.NativeLong, short4: int, nativeLong4: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMoveAsyncEx(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', short2: int, short3: int, viBusAddress642: 'VISANativeInterface.ViBusAddress64', short4: int, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMoveEx(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', short2: int, short3: int, viBusAddress642: 'VISANativeInterface.ViBusAddress64', short4: int, nativeLong2: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viMoveIn16(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveIn16Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveIn32(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMoveIn32Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMoveIn64(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, viAUInt64: 'VISANativeInterface.ViAUInt64') -> com.sun.jna.NativeLong: ...
    def viMoveIn64Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, viAUInt64: 'VISANativeInterface.ViAUInt64') -> com.sun.jna.NativeLong: ...
    def viMoveIn8(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveIn8Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveOut16(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveOut16Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveOut32(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMoveOut32Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viMoveOut64(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, viAUInt64: 'VISANativeInterface.ViAUInt64') -> com.sun.jna.NativeLong: ...
    def viMoveOut64Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, viAUInt64: 'VISANativeInterface.ViAUInt64') -> com.sun.jna.NativeLong: ...
    def viMoveOut8(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viMoveOut8Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viOpen(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viOpenDefaultRM(self, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viOut16(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, short2: int) -> com.sun.jna.NativeLong: ...
    def viOut16Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', short2: int) -> com.sun.jna.NativeLong: ...
    def viOut32(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viOut32Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', nativeLong2: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viOut64(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, viUInt64: 'VISANativeInterface.ViUInt64') -> com.sun.jna.NativeLong: ...
    def viOut64Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', viUInt64: 'VISANativeInterface.ViUInt64') -> com.sun.jna.NativeLong: ...
    def viOut8(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, byte: int) -> com.sun.jna.NativeLong: ...
    def viOut8Ex(self, nativeLong: com.sun.jna.NativeLong, short: int, viBusAddress64: 'VISANativeInterface.ViBusAddress64', byte: int) -> com.sun.jna.NativeLong: ...
    def viParseRsrc(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, shortBuffer: java.nio.ShortBuffer, shortBuffer2: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viParseRsrcEx(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, shortBuffer: java.nio.ShortBuffer, shortBuffer2: java.nio.ShortBuffer, byteBuffer2: java.nio.ByteBuffer, byteBuffer3: java.nio.ByteBuffer, byteBuffer4: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viPeek16(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, shortBuffer: java.nio.ShortBuffer) -> None: ...
    def viPeek32(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> None: ...
    def viPeek64(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, viPUInt64: 'VISANativeInterface.ViPUInt64') -> None: ...
    def viPeek8(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, byteBuffer: java.nio.ByteBuffer) -> None: ...
    def viPoke16(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, short: int) -> None: ...
    def viPoke32(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, nativeLong2: com.sun.jna.NativeLong) -> None: ...
    def viPoke64(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, viUInt64: 'VISANativeInterface.ViUInt64') -> None: ...
    def viPoke8(self, nativeLong: com.sun.jna.NativeLong, pointer: com.sun.jna.Pointer, byte: int) -> None: ...
    def viPrintf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, *object: typing.Any) -> com.sun.jna.NativeLong: ...
    def viPxiReserveTriggers(self, nativeLong: com.sun.jna.NativeLong, short: int, shortBuffer: java.nio.ShortBuffer, shortBuffer2: java.nio.ShortBuffer, shortBuffer3: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viQueryf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer, *object: typing.Any) -> com.sun.jna.NativeLong: ...
    def viRead(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viReadAsync(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viReadSTB(self, nativeLong: com.sun.jna.NativeLong, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viReadToFile(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viSPrintf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer, *object: typing.Any) -> com.sun.jna.NativeLong: ...
    def viSScanf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer, *object: typing.Any) -> com.sun.jna.NativeLong: ...
    def viScanf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, *object: typing.Any) -> com.sun.jna.NativeLong: ...
    def viSetAttribute(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viSetBuf(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viStatusDesc(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viTerminate(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viUninstallHandler(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, viHndlr: 'VISANativeInterface.ViHndlr', pointer: com.sun.jna.Pointer) -> com.sun.jna.NativeLong: ...
    def viUnlock(self, nativeLong: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viUnmapAddress(self, nativeLong: com.sun.jna.NativeLong) -> com.sun.jna.NativeLong: ...
    def viUnmapTrigger(self, nativeLong: com.sun.jna.NativeLong, short: int, short2: int) -> com.sun.jna.NativeLong: ...
    def viUsbControlIn(self, nativeLong: com.sun.jna.NativeLong, short: int, short2: int, short3: int, short4: int, short5: int, byteBuffer: java.nio.ByteBuffer, shortBuffer: java.nio.ShortBuffer) -> com.sun.jna.NativeLong: ...
    def viUsbControlOut(self, nativeLong: com.sun.jna.NativeLong, short: int, short2: int, short3: int, short4: int, short5: int, byteBuffer: java.nio.ByteBuffer) -> com.sun.jna.NativeLong: ...
    def viVPrintf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, viVAList: 'VISANativeInterface.ViVAList') -> com.sun.jna.NativeLong: ...
    def viVQueryf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer, viVAList: 'VISANativeInterface.ViVAList') -> com.sun.jna.NativeLong: ...
    def viVSPrintf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer, viVAList: 'VISANativeInterface.ViVAList') -> com.sun.jna.NativeLong: ...
    def viVSScanf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, byteBuffer2: java.nio.ByteBuffer, viVAList: 'VISANativeInterface.ViVAList') -> com.sun.jna.NativeLong: ...
    def viVScanf(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, viVAList: 'VISANativeInterface.ViVAList') -> com.sun.jna.NativeLong: ...
    def viVxiCommandQuery(self, nativeLong: com.sun.jna.NativeLong, short: int, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viWaitOnEvent(self, nativeLong: com.sun.jna.NativeLong, nativeLong2: com.sun.jna.NativeLong, nativeLong3: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference, nativeLongByReference2: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viWrite(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viWriteAsync(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    def viWriteFromFile(self, nativeLong: com.sun.jna.NativeLong, byteBuffer: java.nio.ByteBuffer, nativeLong2: com.sun.jna.NativeLong, nativeLongByReference: com.sun.jna.ptr.NativeLongByReference) -> com.sun.jna.NativeLong: ...
    class ViAUInt64(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...
    class ViBusAddress64(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...
    class ViHndlr(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...
    class ViPBusAddress64(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...
    class ViPUInt64(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...
    class ViUInt64(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...
    class ViVAList(com.sun.jna.PointerType):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, pointer: com.sun.jna.Pointer): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.visa")``.

    DDEDevice: typing.Type[DDEDevice]
    ModbusRTUDevice: typing.Type[ModbusRTUDevice]
    NativeDevice: typing.Type[NativeDevice]
    NativeString: typing.Type[NativeString]
    PipeDevice: typing.Type[PipeDevice]
    VISA: typing.Type[VISA]
    VISADevice: typing.Type[VISADevice]
    VISANativeInterface: typing.Type[VISANativeInterface]
    connections: jisa.visa.connections.__module_protocol__
    drivers: jisa.visa.drivers.__module_protocol__
    exceptions: jisa.visa.exceptions.__module_protocol__
