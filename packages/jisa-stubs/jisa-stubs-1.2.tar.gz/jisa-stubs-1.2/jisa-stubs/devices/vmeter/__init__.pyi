
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jisa.addresses
import jisa.devices.interfaces
import jisa.enums
import jisa.visa
import jisa.visa.drivers
import typing



class K2182(jisa.visa.VISADevice, jisa.devices.interfaces.VMeter, jisa.devices.interfaces.LineFilter):
    @typing.overload
    def __init__(self, address: jisa.addresses.Address): ...
    @typing.overload
    def __init__(self, address: jisa.addresses.Address, class_: typing.Type[jisa.visa.drivers.Driver]): ...
    def getAverageCount(self) -> int: ...
    def getAverageMode(self) -> jisa.enums.AMode: ...
    @staticmethod
    def getDescription() -> str: ...
    def getIntegrationTime(self) -> float: ...
    def getTerminalType(self, terminals: jisa.enums.Terminals) -> jisa.enums.TType: ...
    def getTerminals(self) -> jisa.enums.Terminals: ...
    @typing.overload
    def getVoltage(self, double: float) -> float: ...
    @typing.overload
    def getVoltage(self) -> float: ...
    def getVoltageRange(self) -> float: ...
    def isAutoRangingVoltage(self) -> bool: ...
    def isLineFilterEnabled(self) -> bool: ...
    def isOn(self) -> bool: ...
    def setAverageCount(self, int: int) -> None: ...
    def setAverageMode(self, aMode: jisa.enums.AMode) -> None: ...
    def setIntegrationTime(self, double: float) -> None: ...
    def setLineFilterEnabled(self, boolean: bool) -> None: ...
    def setTerminals(self, terminals: jisa.enums.Terminals) -> None: ...
    def setVoltageRange(self, double: float) -> None: ...
    def turnOff(self) -> None: ...
    def turnOn(self) -> None: ...
    def useAutoVoltageRange(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.devices.vmeter")``.

    K2182: typing.Type[K2182]
