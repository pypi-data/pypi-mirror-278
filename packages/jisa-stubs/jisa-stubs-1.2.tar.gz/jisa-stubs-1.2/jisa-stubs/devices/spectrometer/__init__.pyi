
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jisa.addresses
import jisa.devices.interfaces
import jisa.visa
import jpype
import typing



class AgilentCary6000i(jisa.devices.interfaces.Spectrometer):
    def __init__(self, address: jisa.addresses.Address): ...
    def close(self) -> None: ...
    def getAddress(self) -> jisa.addresses.Address: ...
    def getDescription(self) -> str: ...
    def getIDN(self) -> str: ...
    def getName(self) -> str: ...
    def setAccessory(self, boolean: bool) -> None: ...
    def takeScan(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> str: ...

class Bruker70v(jisa.visa.DDEDevice, jisa.devices.interfaces.Spectrometer):
    using_tm_rf: bool = ...
    @typing.overload
    def __init__(self, address: jisa.addresses.Address): ...
    @typing.overload
    def __init__(self, lXIAddress: jisa.addresses.LXIAddress, int: int): ...
    def getDescription(self) -> str: ...
    def getName(self) -> str: ...
    def loadReference(self, string: str, string2: str) -> str: ...
    def sendBenchCommand(self, string: str) -> str: ...
    def setAccessory(self, boolean: bool) -> None: ...
    def takeReference(self, string: str, string2: str, int: int) -> str: ...
    def takeScan(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.devices.spectrometer")``.

    AgilentCary6000i: typing.Type[AgilentCary6000i]
    Bruker70v: typing.Type[Bruker70v]
