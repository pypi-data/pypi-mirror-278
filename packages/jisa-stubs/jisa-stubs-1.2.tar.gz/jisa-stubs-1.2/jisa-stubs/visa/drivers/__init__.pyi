
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.sun.jna
import com.sun.jna.ptr
import java.net
import java.nio
import java.nio.charset
import java.util
import jisa
import jisa.addresses
import jisa.visa.connections
import jpype
import jssc
import typing



class Driver:
    def open(self, address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    def reset(self) -> None: ...
    def search(self) -> java.util.List[jisa.addresses.Address]: ...
    def worksWith(self, address: jisa.addresses.Address) -> bool: ...

class GPIBNativeInterface(com.sun.jna.Library):
    T1000s: typing.ClassVar[int] = ...
    IbcAUTOPOLL: typing.ClassVar[int] = ...
    EADR: typing.ClassVar[int] = ...
    IbaHSCableLength: typing.ClassVar[int] = ...
    IbaBNA: typing.ClassVar[int] = ...
    SDC: typing.ClassVar[int] = ...
    ECIC: typing.ClassVar[int] = ...
    ValidNRFD: typing.ClassVar[int] = ...
    IbaSerialNumber: typing.ClassVar[int] = ...
    IbaREADDR: typing.ClassVar[int] = ...
    IbcSC: typing.ClassVar[int] = ...
    NLend: typing.ClassVar[int] = ...
    BusSRQ: typing.ClassVar[int] = ...
    ValidATN: typing.ClassVar[int] = ...
    ValidREN: typing.ClassVar[int] = ...
    T100s: typing.ClassVar[int] = ...
    PPC: typing.ClassVar[int] = ...
    PPE: typing.ClassVar[int] = ...
    IbcEOT: typing.ClassVar[int] = ...
    PPD: typing.ClassVar[int] = ...
    IbcTMO: typing.ClassVar[int] = ...
    ValidIFC: typing.ClassVar[int] = ...
    IbaSAD: typing.ClassVar[int] = ...
    EHDL: typing.ClassVar[int] = ...
    EDMA: typing.ClassVar[int] = ...
    PPU: typing.ClassVar[int] = ...
    IbaSRE: typing.ClassVar[int] = ...
    T100us: typing.ClassVar[int] = ...
    BusDAV: typing.ClassVar[int] = ...
    IbaEndBitIsNormal: typing.ClassVar[int] = ...
    T3ms: typing.ClassVar[int] = ...
    ENOL: typing.ClassVar[int] = ...
    IbcDMA: typing.ClassVar[int] = ...
    IbaSendLLO: typing.ClassVar[int] = ...
    NULLend: typing.ClassVar[int] = ...
    IbcEOScmp: typing.ClassVar[int] = ...
    REM: typing.ClassVar[int] = ...
    ATN: typing.ClassVar[int] = ...
    IbcEOS: typing.ClassVar[int] = ...
    IbcLON: typing.ClassVar[int] = ...
    LACS: typing.ClassVar[int] = ...
    IbaEOSwrt: typing.ClassVar[int] = ...
    SRQI: typing.ClassVar[int] = ...
    IbcHSCableLength: typing.ClassVar[int] = ...
    IbaSPollTime: typing.ClassVar[int] = ...
    BusNRFD: typing.ClassVar[int] = ...
    CIC: typing.ClassVar[int] = ...
    EFSO: typing.ClassVar[int] = ...
    ValidEOI: typing.ClassVar[int] = ...
    WCFG: typing.ClassVar[int] = ...
    IbaSC: typing.ClassVar[int] = ...
    T30us: typing.ClassVar[int] = ...
    T300ms: typing.ClassVar[int] = ...
    END: typing.ClassVar[int] = ...
    IbaUnAddr: typing.ClassVar[int] = ...
    T30s: typing.ClassVar[int] = ...
    IbcEOSwrt: typing.ClassVar[int] = ...
    IbaRsv: typing.ClassVar[int] = ...
    LLO: typing.ClassVar[int] = ...
    IbaPP2: typing.ClassVar[int] = ...
    UNL: typing.ClassVar[int] = ...
    UNT: typing.ClassVar[int] = ...
    IbaPPC: typing.ClassVar[int] = ...
    IbcEOSchar: typing.ClassVar[int] = ...
    IbaTIMING: typing.ClassVar[int] = ...
    DTAS: typing.ClassVar[int] = ...
    T1ms: typing.ClassVar[int] = ...
    EPWR: typing.ClassVar[int] = ...
    BIN: typing.ClassVar[int] = ...
    IbcEOSrd: typing.ClassVar[int] = ...
    DABend: typing.ClassVar[int] = ...
    IbcUnAddr: typing.ClassVar[int] = ...
    DCAS: typing.ClassVar[int] = ...
    IbcSendLLO: typing.ClassVar[int] = ...
    T10ms: typing.ClassVar[int] = ...
    TIMO: typing.ClassVar[int] = ...
    GTL: typing.ClassVar[int] = ...
    IbaIst: typing.ClassVar[int] = ...
    T300s: typing.ClassVar[int] = ...
    IbcPPollTime: typing.ClassVar[int] = ...
    IbcSAD: typing.ClassVar[int] = ...
    IbaPAD: typing.ClassVar[int] = ...
    IbcSRE: typing.ClassVar[int] = ...
    BusIFC: typing.ClassVar[int] = ...
    ENEB: typing.ClassVar[int] = ...
    LOK: typing.ClassVar[int] = ...
    IbcTIMING: typing.ClassVar[int] = ...
    ETAB: typing.ClassVar[int] = ...
    GET: typing.ClassVar[int] = ...
    IbaEOScmp: typing.ClassVar[int] = ...
    BusEOI: typing.ClassVar[int] = ...
    ValidDAV: typing.ClassVar[int] = ...
    T300us: typing.ClassVar[int] = ...
    IbaEOSrd: typing.ClassVar[int] = ...
    ERR: typing.ClassVar[int] = ...
    T10s: typing.ClassVar[int] = ...
    TNONE: typing.ClassVar[int] = ...
    ESRQ: typing.ClassVar[int] = ...
    IbcEndBitIsNormal: typing.ClassVar[int] = ...
    IbaPPollTime: typing.ClassVar[int] = ...
    ValidSRQ: typing.ClassVar[int] = ...
    BusREN: typing.ClassVar[int] = ...
    BusATN: typing.ClassVar[int] = ...
    IbaEOSchar: typing.ClassVar[int] = ...
    ECAP: typing.ClassVar[int] = ...
    ELCK: typing.ClassVar[int] = ...
    ESAC: typing.ClassVar[int] = ...
    EOIP: typing.ClassVar[int] = ...
    REOS: typing.ClassVar[int] = ...
    ValidNDAC: typing.ClassVar[int] = ...
    ALL_SAD: typing.ClassVar[int] = ...
    EWIP: typing.ClassVar[int] = ...
    IbaAUTOPOLL: typing.ClassVar[int] = ...
    IbaEOT: typing.ClassVar[int] = ...
    IbaEOS: typing.ClassVar[int] = ...
    SPD: typing.ClassVar[int] = ...
    SPE: typing.ClassVar[int] = ...
    IbaTMO: typing.ClassVar[int] = ...
    IbcPP2: typing.ClassVar[int] = ...
    IbcRsv: typing.ClassVar[int] = ...
    IbcPPC: typing.ClassVar[int] = ...
    T30ms: typing.ClassVar[int] = ...
    T100ms: typing.ClassVar[int] = ...
    NO_SAD: typing.ClassVar[int] = ...
    DCL: typing.ClassVar[int] = ...
    IbaDMA: typing.ClassVar[int] = ...
    T1s: typing.ClassVar[int] = ...
    XEOS: typing.ClassVar[int] = ...
    TACS: typing.ClassVar[int] = ...
    EDVR: typing.ClassVar[int] = ...
    ESTB: typing.ClassVar[int] = ...
    BusNDAC: typing.ClassVar[int] = ...
    TCT: typing.ClassVar[int] = ...
    IbcIst: typing.ClassVar[int] = ...
    IbaLON: typing.ClassVar[int] = ...
    EABO: typing.ClassVar[int] = ...
    IbcPAD: typing.ClassVar[int] = ...
    EBUS: typing.ClassVar[int] = ...
    STOPend: typing.ClassVar[int] = ...
    T10us: typing.ClassVar[int] = ...
    ERST: typing.ClassVar[int] = ...
    EARG: typing.ClassVar[int] = ...
    RQS: typing.ClassVar[int] = ...
    T3s: typing.ClassVar[int] = ...
    IbcREADDR: typing.ClassVar[int] = ...
    EARM: typing.ClassVar[int] = ...
    IbcSPollTime: typing.ClassVar[int] = ...
    CMPL: typing.ClassVar[int] = ...
    ECFG: typing.ClassVar[int] = ...
    ibsta: typing.ClassVar[com.sun.jna.ptr.IntByReference] = ...
    iberr: typing.ClassVar[com.sun.jna.ptr.IntByReference] = ...
    ibcnt: typing.ClassVar[com.sun.jna.ptr.IntByReference] = ...
    ibcntl: typing.ClassVar[com.sun.jna.ptr.NativeLongByReference] = ...
    @typing.overload
    def AllSpoll(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference, shortByReference2: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def AllSpoll(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray], shortBuffer: java.nio.ShortBuffer) -> None: ...
    def DevClear(self, int: int, short: int) -> None: ...
    @typing.overload
    def DevClearList(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def DevClearList(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def EnableLocal(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def EnableLocal(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def EnableRemote(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def EnableRemote(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def FindLstn(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference, shortByReference2: com.sun.jna.ptr.ShortByReference, int2: int) -> None: ...
    @typing.overload
    def FindLstn(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray], shortBuffer: java.nio.ShortBuffer, int2: int) -> None: ...
    @typing.overload
    def FindRQS(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference, shortByReference2: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def FindRQS(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray], shortBuffer: java.nio.ShortBuffer) -> None: ...
    @typing.overload
    def PPoll(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def PPoll(self, int: int, shortBuffer: java.nio.ShortBuffer) -> None: ...
    def PPollConfig(self, int: int, short: int, int2: int, int3: int) -> None: ...
    @typing.overload
    def PPollUnconfig(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def PPollUnconfig(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def PassControl(self, int: int, short: int) -> None: ...
    def RcvRespMsg(self, int: int, pointer: com.sun.jna.Pointer, int2: int, int3: int) -> None: ...
    @typing.overload
    def ReadStatusByte(self, int: int, short: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def ReadStatusByte(self, int: int, short: int, shortBuffer: java.nio.ShortBuffer) -> None: ...
    def Receive(self, int: int, short: int, pointer: com.sun.jna.Pointer, int2: int, int3: int) -> None: ...
    def ReceiveSetup(self, int: int, short: int) -> None: ...
    @typing.overload
    def ResetSys(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def ResetSys(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def Send(self, int: int, short: int, pointer: com.sun.jna.Pointer, int2: int, int3: int) -> None: ...
    def SendCmds(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> None: ...
    def SendDataBytes(self, int: int, pointer: com.sun.jna.Pointer, int2: int, int3: int) -> None: ...
    def SendIFC(self, int: int) -> None: ...
    def SendLLO(self, int: int) -> None: ...
    @typing.overload
    def SendList(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference, pointer: com.sun.jna.Pointer, int2: int, int3: int) -> None: ...
    @typing.overload
    def SendList(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray], pointer: com.sun.jna.Pointer, int2: int, int3: int) -> None: ...
    @typing.overload
    def SendSetup(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def SendSetup(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def SetRWLS(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def SetRWLS(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def TestSRQ(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def TestSRQ(self, int: int, shortBuffer: java.nio.ShortBuffer) -> None: ...
    @typing.overload
    def TestSys(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference, shortByReference2: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def TestSys(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray], shortBuffer: java.nio.ShortBuffer) -> None: ...
    def Trigger(self, int: int, short: int) -> None: ...
    @typing.overload
    def TriggerList(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def TriggerList(self, int: int, shortArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def WaitSRQ(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> None: ...
    @typing.overload
    def WaitSRQ(self, int: int, shortBuffer: java.nio.ShortBuffer) -> None: ...
    @typing.overload
    def ibask(self, int: int, int2: int, intByReference: com.sun.jna.ptr.IntByReference) -> int: ...
    @typing.overload
    def ibask(self, int: int, int2: int, intBuffer: java.nio.IntBuffer) -> int: ...
    def ibcac(self, int: int, int2: int) -> int: ...
    def ibclr(self, int: int) -> int: ...
    def ibcmd(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> int: ...
    def ibcmda(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> int: ...
    def ibconfig(self, int: int, int2: int, int3: int) -> int: ...
    def ibdev(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> int: ...
    def ibeos(self, int: int, int2: int) -> int: ...
    def ibexpert(self, int: int, int2: int, pointer: com.sun.jna.Pointer, pointer2: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def ibfindA(self, pointer: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def ibfindA(self, string: str) -> int: ...
    def ibfindW(self, wString: com.sun.jna.WString) -> int: ...
    def ibgts(self, int: int, int2: int) -> int: ...
    def iblck(self, int: int, int2: int, int3: int, pointer: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def iblines(self, int: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> int: ...
    @typing.overload
    def iblines(self, int: int, shortBuffer: java.nio.ShortBuffer) -> int: ...
    @typing.overload
    def ibln(self, int: int, int2: int, int3: int, shortByReference: com.sun.jna.ptr.ShortByReference) -> int: ...
    @typing.overload
    def ibln(self, int: int, int2: int, int3: int, shortBuffer: java.nio.ShortBuffer) -> int: ...
    def ibloc(self, int: int) -> int: ...
    def ibnotify(self, int: int, int2: int, callback: com.sun.jna.Callback, pointer: com.sun.jna.Pointer) -> int: ...
    def ibonl(self, int: int, int2: int) -> int: ...
    def ibpct(self, int: int) -> int: ...
    def ibppc(self, int: int, int2: int) -> int: ...
    def ibrd(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> int: ...
    def ibrda(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> int: ...
    @typing.overload
    def ibrdfA(self, int: int, pointer: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def ibrdfA(self, int: int, string: str) -> int: ...
    def ibrdfW(self, int: int, wString: com.sun.jna.WString) -> int: ...
    @typing.overload
    def ibrpp(self, int: int, pointer: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def ibrpp(self, int: int, string: str) -> int: ...
    @typing.overload
    def ibrsp(self, int: int, pointer: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def ibrsp(self, int: int, string: str) -> int: ...
    def ibsic(self, int: int) -> int: ...
    def ibstop(self, int: int) -> int: ...
    def ibtrg(self, int: int) -> int: ...
    def ibwait(self, int: int, int2: int) -> int: ...
    def ibwrt(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> int: ...
    def ibwrta(self, int: int, pointer: com.sun.jna.Pointer, int2: int) -> int: ...
    @typing.overload
    def ibwrtfA(self, int: int, pointer: com.sun.jna.Pointer) -> int: ...
    @typing.overload
    def ibwrtfA(self, int: int, string: str) -> int: ...
    def ibwrtfW(self, int: int, wString: com.sun.jna.WString) -> int: ...

class GPIBDriver(Driver):
    def __init__(self): ...
    def open(self, address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    def reset(self) -> None: ...
    @typing.overload
    def search(self) -> java.util.List[jisa.addresses.GPIBAddress]: ...
    @typing.overload
    def search(self, int: int) -> java.util.List[jisa.addresses.GPIBAddress]: ...
    def worksWith(self, address: jisa.addresses.Address) -> bool: ...
    class GPIBConnection(jisa.visa.connections.GPIBConnection):
        def __init__(self, gPIBDriver: 'GPIBDriver', int: int): ...
        def clear(self) -> None: ...
        def close(self) -> None: ...
        def getEncoding(self) -> java.nio.charset.Charset: ...
        def isEOIEnabled(self) -> bool: ...
        def readBytes(self, int: int) -> typing.MutableSequence[int]: ...
        def setEOIEnabled(self, boolean: bool) -> None: ...
        def setEncoding(self, charset: java.nio.charset.Charset) -> None: ...
        @typing.overload
        def setReadTerminator(self, string: str) -> None: ...
        @typing.overload
        def setReadTerminator(self, long: int) -> None: ...
        def setTimeout(self, int: int) -> None: ...
        def write(self, string: str) -> None: ...
        def writeBytes(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...

class NIGPIBNativeInterface(GPIBNativeInterface):
    def Ibcnt(self) -> int: ...
    def Iberr(self) -> int: ...
    def Ibsta(self) -> int: ...

class SerialDriver(Driver):
    def __init__(self): ...
    def open(self, address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    def reset(self) -> None: ...
    def search(self) -> java.util.List[jisa.addresses.SerialAddress]: ...
    def worksWith(self, address: jisa.addresses.Address) -> bool: ...
    class JSSCConnection(jisa.visa.connections.SerialConnection):
        def __init__(self, serialPort: jssc.SerialPort): ...
        def clear(self) -> None: ...
        def close(self) -> None: ...
        def getEncoding(self) -> java.nio.charset.Charset: ...
        def overrideSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, stop: jisa.visa.connections.SerialConnection.Stop) -> None: ...
        def readBytes(self, int: int) -> typing.MutableSequence[int]: ...
        def setEncoding(self, charset: java.nio.charset.Charset) -> None: ...
        @typing.overload
        def setReadTerminator(self, string: str) -> None: ...
        @typing.overload
        def setReadTerminator(self, long: int) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, double: float, *flowControl: jisa.visa.connections.SerialConnection.FlowControl) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, int3: int, *flowControl: jisa.visa.connections.SerialConnection.FlowControl) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, stop: jisa.visa.connections.SerialConnection.Stop, *flowControl: jisa.visa.connections.SerialConnection.FlowControl) -> None: ...
        def setTimeout(self, int: int) -> None: ...
        def write(self, string: str) -> None: ...
        def writeBytes(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...

class TCPIPDriver(Driver):
    def __init__(self): ...
    def open(self, address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    def reset(self) -> None: ...
    def search(self) -> java.util.List[jisa.addresses.Address]: ...
    def worksWith(self, address: jisa.addresses.Address) -> bool: ...
    class TCPIPConnection(jisa.visa.connections.TCPIPConnection):
        def __init__(self, socket: java.net.Socket): ...
        def clear(self) -> None: ...
        def close(self) -> None: ...
        def getEncoding(self) -> java.nio.charset.Charset: ...
        def isKeepAliveEnabled(self) -> bool: ...
        def readBytes(self, int: int) -> typing.MutableSequence[int]: ...
        def setEncoding(self, charset: java.nio.charset.Charset) -> None: ...
        def setKeepAliveEnabled(self, boolean: bool) -> None: ...
        @typing.overload
        def setReadTerminator(self, string: str) -> None: ...
        @typing.overload
        def setReadTerminator(self, long: int) -> None: ...
        def setTimeout(self, int: int) -> None: ...
        def writeBytes(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...

class USBDriver(Driver):
    def __init__(self): ...
    def open(self, address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    def reset(self) -> None: ...
    def search(self) -> java.util.List[jisa.addresses.Address]: ...
    def worksWith(self, address: jisa.addresses.Address) -> bool: ...

class LinuxGPIBDriver(GPIBDriver):
    def __init__(self): ...

class NIGPIBDriver(GPIBDriver):
    def __init__(self): ...

class AGVISADriver(jisa.visa.drivers.VISADriver):
    def __init__(self): ...

class NIVISADriver(jisa.visa.drivers.VISADriver):
    def __init__(self): ...

class RSVISADriver(jisa.visa.drivers.VISADriver):
    def __init__(self): ...

class VISADriver(Driver):
    def __init__(self): ...
    def newRM(self) -> None: ...
    def open(self, address: jisa.addresses.Address) -> jisa.visa.connections.Connection: ...
    def reset(self) -> None: ...
    def search(self) -> java.util.List[jisa.addresses.Address]: ...
    def worksWith(self, address: jisa.addresses.Address) -> bool: ...
    class VISAConnection(jisa.visa.connections.Connection):
        def __init__(self, vISADriver: 'VISADriver', nativeLong: com.sun.jna.NativeLong): ...
        def clear(self) -> None: ...
        def close(self) -> None: ...
        def getAttributeLong(self, long: int) -> int: ...
        def getAttributeString(self, long: int) -> str: ...
        def getEncoding(self) -> java.nio.charset.Charset: ...
        def readBytes(self, int: int) -> typing.MutableSequence[int]: ...
        def setAttribute(self, long: int, long2: int) -> None: ...
        def setEncoding(self, charset: java.nio.charset.Charset) -> None: ...
        @typing.overload
        def setReadTerminator(self, string: str) -> None: ...
        @typing.overload
        def setReadTerminator(self, long: int) -> None: ...
        def setTimeout(self, int: int) -> None: ...
        def write(self, string: str) -> None: ...
        def writeBytes(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    class VISAGPIBConnection(jisa.visa.drivers.VISADriver.VISAConnection, jisa.visa.connections.GPIBConnection):
        def __init__(self, vISADriver: 'VISADriver', nativeLong: com.sun.jna.NativeLong): ...
        def isEOIEnabled(self) -> bool: ...
        def setEOIEnabled(self, boolean: bool) -> None: ...
    class VISALXIConnection(jisa.visa.drivers.VISADriver.VISAConnection, jisa.visa.connections.LXIConnection):
        def __init__(self, vISADriver: 'VISADriver', nativeLong: com.sun.jna.NativeLong): ...
    class VISASerialConnection(jisa.visa.drivers.VISADriver.VISAConnection, jisa.visa.connections.SerialConnection):
        def __init__(self, vISADriver: 'VISADriver', nativeLong: com.sun.jna.NativeLong): ...
        def overrideSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, stop: jisa.visa.connections.SerialConnection.Stop) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, double: float, *flowControl: jisa.visa.connections.SerialConnection.FlowControl) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, int3: int, *flowControl: jisa.visa.connections.SerialConnection.FlowControl) -> None: ...
        @typing.overload
        def setSerialParameters(self, int: int, int2: int, parity: jisa.visa.connections.SerialConnection.Parity, stop: jisa.visa.connections.SerialConnection.Stop, *flowControl: jisa.visa.connections.SerialConnection.FlowControl) -> None: ...
    class VISATCPIPConnection(jisa.visa.drivers.VISADriver.VISAConnection, jisa.visa.connections.TCPIPConnection):
        def __init__(self, vISADriver: 'VISADriver', nativeLong: com.sun.jna.NativeLong): ...
        def isKeepAliveEnabled(self) -> bool: ...
        def setKeepAliveEnabled(self, boolean: bool) -> None: ...
    class VISAUSBConnection(jisa.visa.drivers.VISADriver.VISAConnection, jisa.visa.connections.USBConnection):
        def __init__(self, vISADriver: 'VISADriver', nativeLong: com.sun.jna.NativeLong): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.visa.drivers")``.

    AGVISADriver: typing.Type[AGVISADriver]
    Driver: typing.Type[Driver]
    GPIBDriver: typing.Type[GPIBDriver]
    GPIBNativeInterface: typing.Type[GPIBNativeInterface]
    LinuxGPIBDriver: typing.Type[LinuxGPIBDriver]
    NIGPIBDriver: typing.Type[NIGPIBDriver]
    NIGPIBNativeInterface: typing.Type[NIGPIBNativeInterface]
    NIVISADriver: typing.Type[NIVISADriver]
    RSVISADriver: typing.Type[RSVISADriver]
    SerialDriver: typing.Type[SerialDriver]
    TCPIPDriver: typing.Type[TCPIPDriver]
    USBDriver: typing.Type[USBDriver]
    VISADriver: typing.Type[VISADriver]
