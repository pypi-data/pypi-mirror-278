
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jisa.visa.connections
import typing



_Address__AddressInstantiator__A = typing.TypeVar('_Address__AddressInstantiator__A', bound='Address')  # <A>
class Address:
    TYPES: typing.ClassVar[java.util.List] = ...
    @staticmethod
    def fromString(string: str) -> 'Address': ...
    def getJISAString(self) -> str: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    @staticmethod
    def parse(string: str) -> 'Address': ...
    def parseString(self, string: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    class AddressInstantiator(typing.Generic[_Address__AddressInstantiator__A]):
        def create(self) -> _Address__AddressInstantiator__A: ...

class InvalidAddressFormatException(java.lang.Exception):
    def __init__(self, string: str, string2: str): ...

class GPIBAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getBoardNumber(self) -> int: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getPrimaryAddress(self) -> int: ...
    def getSecondaryAddress(self) -> int: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setBoardNumber(self, int: int) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setPrimaryAddress(self, int: int) -> None: ...
    def setSecondaryAddress(self, int: int) -> None: ...
    def toString(self) -> str: ...

class IDAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getID(self) -> str: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setID(self, string: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def toString(self) -> str: ...

class LXIAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, string: str): ...
    @typing.overload
    def __init__(self, int: int, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getBoard(self) -> int: ...
    def getHost(self) -> str: ...
    def getLanName(self) -> str: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setBoard(self, int: int) -> None: ...
    def setHost(self, string: str) -> None: ...
    def setLanName(self, string: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def toString(self) -> str: ...

class ModbusAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAddress(self) -> int: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getPortName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setAddress(self, int: int) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setPortName(self, string: str) -> None: ...
    def toString(self) -> str: ...

class PipeAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getPipeName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setPipeName(self, string: str) -> None: ...
    def toString(self) -> str: ...

class SerialAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getASRLNum(self) -> int: ...
    def getBaudRate(self) -> 'SerialAddress.Baud': ...
    def getDataBits(self) -> 'SerialAddress.Data': ...
    def getJISAString(self) -> str: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getParity(self) -> 'SerialAddress.Parity': ...
    def getPortName(self) -> str: ...
    def getStopBits(self) -> 'SerialAddress.Stop': ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def hasParametersSpecified(self) -> bool: ...
    def parseString(self, string: str) -> None: ...
    def setBaudRate(self, baud: 'SerialAddress.Baud') -> None: ...
    def setDataBits(self, data: 'SerialAddress.Data') -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setParity(self, parity: 'SerialAddress.Parity') -> None: ...
    def setPortName(self, string: str) -> None: ...
    def setStopBits(self, stop: 'SerialAddress.Stop') -> None: ...
    def toString(self) -> str: ...
    class Baud(java.lang.Enum['SerialAddress.Baud']):
        AUTO: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_110: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_300: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_1200: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_2400: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_4800: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_9600: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_19200: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_38400: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_57600: typing.ClassVar['SerialAddress.Baud'] = ...
        BAUD_115200: typing.ClassVar['SerialAddress.Baud'] = ...
        @staticmethod
        def find(string: str) -> 'SerialAddress.Baud': ...
        def getTag(self) -> str: ...
        def getValue(self) -> int: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SerialAddress.Baud': ...
        @staticmethod
        def values() -> typing.MutableSequence['SerialAddress.Baud']: ...
    class Data(java.lang.Enum['SerialAddress.Data']):
        AUTO: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_1: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_2: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_3: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_4: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_5: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_6: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_7: typing.ClassVar['SerialAddress.Data'] = ...
        DATA_8: typing.ClassVar['SerialAddress.Data'] = ...
        @staticmethod
        def find(string: str) -> 'SerialAddress.Data': ...
        def getTag(self) -> str: ...
        def getValue(self) -> int: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SerialAddress.Data': ...
        @staticmethod
        def values() -> typing.MutableSequence['SerialAddress.Data']: ...
    class Parity(java.lang.Enum['SerialAddress.Parity']):
        AUTO: typing.ClassVar['SerialAddress.Parity'] = ...
        NONE: typing.ClassVar['SerialAddress.Parity'] = ...
        EVEN: typing.ClassVar['SerialAddress.Parity'] = ...
        ODD: typing.ClassVar['SerialAddress.Parity'] = ...
        MARK: typing.ClassVar['SerialAddress.Parity'] = ...
        SPACE: typing.ClassVar['SerialAddress.Parity'] = ...
        @staticmethod
        def find(string: str) -> 'SerialAddress.Parity': ...
        def getTag(self) -> str: ...
        def getValue(self) -> jisa.visa.connections.SerialConnection.Parity: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SerialAddress.Parity': ...
        @staticmethod
        def values() -> typing.MutableSequence['SerialAddress.Parity']: ...
    class Stop(java.lang.Enum['SerialAddress.Stop']):
        AUTO: typing.ClassVar['SerialAddress.Stop'] = ...
        STOP_1_0: typing.ClassVar['SerialAddress.Stop'] = ...
        STOP_1_5: typing.ClassVar['SerialAddress.Stop'] = ...
        STOP_2_0: typing.ClassVar['SerialAddress.Stop'] = ...
        @staticmethod
        def find(string: str) -> 'SerialAddress.Stop': ...
        def getTag(self) -> str: ...
        def getValue(self) -> jisa.visa.connections.SerialConnection.Stop: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SerialAddress.Stop': ...
        @staticmethod
        def values() -> typing.MutableSequence['SerialAddress.Stop']: ...

class TCPIPAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, string: str, int2: int): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getBoard(self) -> int: ...
    def getHost(self) -> str: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getPort(self) -> int: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setBoard(self, int: int) -> None: ...
    def setHost(self, string: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setPort(self, int: int) -> None: ...
    def toString(self) -> str: ...

class USBAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, string: str, int4: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str, int3: int): ...
    def getBoard(self) -> int: ...
    def getInterfaceNumber(self) -> int: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getProductID(self) -> int: ...
    def getSerialNumber(self) -> str: ...
    def getVendorID(self) -> int: ...
    def setBoard(self, int: int) -> None: ...
    def setInterfaceNumber(self, int: int) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setProductID(self, int: int) -> None: ...
    def setSerialNumber(self, string: str) -> None: ...
    def setVendorID(self, int: int) -> None: ...
    def toString(self) -> str: ...

class VISAAddress(Address):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAddress(self) -> str: ...
    def getParameters(self) -> java.util.Map[str, typing.Any]: ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...
    def setAddress(self, string: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def toString(self) -> str: ...

class USBRawAddress(USBAddress):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, string: str, int4: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str, int3: int): ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...

class USBTMCAddress(USBAddress):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, string: str, int4: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str, int3: int): ...
    def getTypeName(self) -> str: ...
    def getVISAString(self) -> str: ...
    def parseString(self, string: str) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jisa.addresses")``.

    Address: typing.Type[Address]
    GPIBAddress: typing.Type[GPIBAddress]
    IDAddress: typing.Type[IDAddress]
    InvalidAddressFormatException: typing.Type[InvalidAddressFormatException]
    LXIAddress: typing.Type[LXIAddress]
    ModbusAddress: typing.Type[ModbusAddress]
    PipeAddress: typing.Type[PipeAddress]
    SerialAddress: typing.Type[SerialAddress]
    TCPIPAddress: typing.Type[TCPIPAddress]
    USBAddress: typing.Type[USBAddress]
    USBRawAddress: typing.Type[USBRawAddress]
    USBTMCAddress: typing.Type[USBTMCAddress]
    VISAAddress: typing.Type[VISAAddress]
