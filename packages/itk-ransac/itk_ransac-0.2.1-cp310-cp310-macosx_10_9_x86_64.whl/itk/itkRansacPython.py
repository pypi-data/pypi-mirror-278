# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RansacPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRansacPython
else:
    import _itkRansacPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
class itkParametersEstimatorPD6(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkParametersEstimatorPD6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Estimate(self, *args):
        r"""
        Estimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        parameters: std::vector< double,std::allocator< double > > &

        Estimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        parameters: std::vector< double,std::allocator< double > > &

        """
        return _itkRansacPython.itkParametersEstimatorPD6_Estimate(self, *args)

    def LeastSquaresEstimate(self, *args):
        r"""
        LeastSquaresEstimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        parameters: std::vector< double,std::allocator< double > > &

        LeastSquaresEstimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        parameters: std::vector< double,std::allocator< double > > &

        """
        return _itkRansacPython.itkParametersEstimatorPD6_LeastSquaresEstimate(self, *args)

    def Agree(self, parameters, data):
        r"""
        Agree(self, parameters, data) -> bool

        Parameters
        ----------
        parameters: std::vector< double,std::allocator< double > > &
        data: itkPointD6 &

        """
        return _itkRansacPython.itkParametersEstimatorPD6_Agree(self, parameters, data)

    def AgreeMultiple(self, parameters, data, currentBest):
        r"""
        AgreeMultiple(self, parameters, data, currentBest) -> vectorD

        Parameters
        ----------
        parameters: std::vector< double,std::allocator< double > > &
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        currentBest: unsigned int

        """
        return _itkRansacPython.itkParametersEstimatorPD6_AgreeMultiple(self, parameters, data, currentBest)

    def CheckCorresspondenceDistance(self, parameters, data):
        r"""
        CheckCorresspondenceDistance(self, parameters, data) -> bool

        Parameters
        ----------
        parameters: std::vector< double,std::allocator< double > > &
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &

        """
        return _itkRansacPython.itkParametersEstimatorPD6_CheckCorresspondenceDistance(self, parameters, data)

    def CheckCorresspondenceEdgeLength(self, parameters, data, edgeLength):
        r"""
        CheckCorresspondenceEdgeLength(self, parameters, data, edgeLength) -> bool

        Parameters
        ----------
        parameters: std::vector< double,std::allocator< double > > &
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        edgeLength: double

        """
        return _itkRansacPython.itkParametersEstimatorPD6_CheckCorresspondenceEdgeLength(self, parameters, data, edgeLength)

    def SetMinimalForEstimate(self, minForEstimate):
        r"""
        SetMinimalForEstimate(self, minForEstimate)

        Parameters
        ----------
        minForEstimate: unsigned int

        """
        return _itkRansacPython.itkParametersEstimatorPD6_SetMinimalForEstimate(self, minForEstimate)

    def GetMinimalForEstimate(self):
        r"""GetMinimalForEstimate(self) -> unsigned int"""
        return _itkRansacPython.itkParametersEstimatorPD6_GetMinimalForEstimate(self)
    __swig_destroy__ = _itkRansacPython.delete_itkParametersEstimatorPD6

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParametersEstimatorPD6

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRansacPython.itkParametersEstimatorPD6_cast(obj)

# Register itkParametersEstimatorPD6 in _itkRansacPython:
_itkRansacPython.itkParametersEstimatorPD6_swigregister(itkParametersEstimatorPD6)

def itkRANSACPD6S_New():
    return itkRANSACPD6S.New()

class itkRANSACPD6S(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkRANSACPD6S class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRANSACPD6S_Pointer"""
        return _itkRansacPython.itkRANSACPD6S___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRANSACPD6S_Pointer"""
        return _itkRansacPython.itkRANSACPD6S_Clone(self)

    def SetNumberOfThreads(self, numberOfThreads):
        r"""
        SetNumberOfThreads(self, numberOfThreads)

        Parameters
        ----------
        numberOfThreads: unsigned int

        """
        return _itkRansacPython.itkRANSACPD6S_SetNumberOfThreads(self, numberOfThreads)

    def SetMaxIteration(self, maxIteration):
        r"""
        SetMaxIteration(self, maxIteration)

        Parameters
        ----------
        maxIteration: unsigned int

        """
        return _itkRansacPython.itkRANSACPD6S_SetMaxIteration(self, maxIteration)

    def GetNumberOfThreads(self):
        r"""GetNumberOfThreads(self) -> unsigned int"""
        return _itkRansacPython.itkRANSACPD6S_GetNumberOfThreads(self)

    def SetParametersEstimator(self, paramEstimator):
        r"""
        SetParametersEstimator(self, paramEstimator)

        Parameters
        ----------
        paramEstimator: itkParametersEstimatorPD6 *

        """
        return _itkRansacPython.itkRANSACPD6S_SetParametersEstimator(self, paramEstimator)

    def SetData(self, data):
        r"""
        SetData(self, data)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &

        """
        return _itkRansacPython.itkRANSACPD6S_SetData(self, data)

    def SetAgreeData(self, data):
        r"""
        SetAgreeData(self, data)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &

        """
        return _itkRansacPython.itkRANSACPD6S_SetAgreeData(self, data)

    def Compute(self, parameters, desiredProbabilityForNoOutliers):
        r"""
        Compute(self, parameters, desiredProbabilityForNoOutliers) -> vectorD

        Parameters
        ----------
        parameters: std::vector< double,std::allocator< double > > &
        desiredProbabilityForNoOutliers: double

        """
        return _itkRansacPython.itkRANSACPD6S_Compute(self, parameters, desiredProbabilityForNoOutliers)

    def SetCheckCorresspondenceDistance(self, inputFlag):
        r"""
        SetCheckCorresspondenceDistance(self, inputFlag)

        Parameters
        ----------
        inputFlag: bool

        """
        return _itkRansacPython.itkRANSACPD6S_SetCheckCorresspondenceDistance(self, inputFlag)

    def GetCheckCorresspondenceDistance(self):
        r"""GetCheckCorresspondenceDistance(self) -> bool"""
        return _itkRansacPython.itkRANSACPD6S_GetCheckCorresspondenceDistance(self)

    def SetCheckCorrespondenceEdgeLength(self, inputLength):
        r"""
        SetCheckCorrespondenceEdgeLength(self, inputLength)

        Parameters
        ----------
        inputLength: double

        """
        return _itkRansacPython.itkRANSACPD6S_SetCheckCorrespondenceEdgeLength(self, inputLength)

    def GetCheckCorrespondenceEdgeLength(self):
        r"""GetCheckCorrespondenceEdgeLength(self) -> double"""
        return _itkRansacPython.itkRANSACPD6S_GetCheckCorrespondenceEdgeLength(self)
    __swig_destroy__ = _itkRansacPython.delete_itkRANSACPD6S

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRANSACPD6S

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRansacPython.itkRANSACPD6S_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRANSACPD6S

        Create a new object of the class itkRANSACPD6S and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRANSACPD6S.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRANSACPD6S.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRANSACPD6S.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRANSACPD6S in _itkRansacPython:
_itkRansacPython.itkRANSACPD6S_swigregister(itkRANSACPD6S)

def itkRANSACPD6V_New():
    return itkRANSACPD6V.New()

class itkRANSACPD6V(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkRANSACPD6V class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRANSACPD6V_Pointer"""
        return _itkRansacPython.itkRANSACPD6V___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRANSACPD6V_Pointer"""
        return _itkRansacPython.itkRANSACPD6V_Clone(self)

    def SetNumberOfThreads(self, numberOfThreads):
        r"""
        SetNumberOfThreads(self, numberOfThreads)

        Parameters
        ----------
        numberOfThreads: unsigned int

        """
        return _itkRansacPython.itkRANSACPD6V_SetNumberOfThreads(self, numberOfThreads)

    def SetMaxIteration(self, maxIteration):
        r"""
        SetMaxIteration(self, maxIteration)

        Parameters
        ----------
        maxIteration: unsigned int

        """
        return _itkRansacPython.itkRANSACPD6V_SetMaxIteration(self, maxIteration)

    def GetNumberOfThreads(self):
        r"""GetNumberOfThreads(self) -> unsigned int"""
        return _itkRansacPython.itkRANSACPD6V_GetNumberOfThreads(self)

    def SetParametersEstimator(self, paramEstimator):
        r"""
        SetParametersEstimator(self, paramEstimator)

        Parameters
        ----------
        paramEstimator: itkParametersEstimatorPD6 *

        """
        return _itkRansacPython.itkRANSACPD6V_SetParametersEstimator(self, paramEstimator)

    def SetData(self, data):
        r"""
        SetData(self, data)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &

        """
        return _itkRansacPython.itkRANSACPD6V_SetData(self, data)

    def SetAgreeData(self, data):
        r"""
        SetAgreeData(self, data)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &

        """
        return _itkRansacPython.itkRANSACPD6V_SetAgreeData(self, data)

    def Compute(self, parameters, desiredProbabilityForNoOutliers):
        r"""
        Compute(self, parameters, desiredProbabilityForNoOutliers) -> vectorD

        Parameters
        ----------
        parameters: std::vector< double,std::allocator< double > > &
        desiredProbabilityForNoOutliers: double

        """
        return _itkRansacPython.itkRANSACPD6V_Compute(self, parameters, desiredProbabilityForNoOutliers)

    def SetCheckCorresspondenceDistance(self, inputFlag):
        r"""
        SetCheckCorresspondenceDistance(self, inputFlag)

        Parameters
        ----------
        inputFlag: bool

        """
        return _itkRansacPython.itkRANSACPD6V_SetCheckCorresspondenceDistance(self, inputFlag)

    def GetCheckCorresspondenceDistance(self):
        r"""GetCheckCorresspondenceDistance(self) -> bool"""
        return _itkRansacPython.itkRANSACPD6V_GetCheckCorresspondenceDistance(self)

    def SetCheckCorrespondenceEdgeLength(self, inputLength):
        r"""
        SetCheckCorrespondenceEdgeLength(self, inputLength)

        Parameters
        ----------
        inputLength: double

        """
        return _itkRansacPython.itkRANSACPD6V_SetCheckCorrespondenceEdgeLength(self, inputLength)

    def GetCheckCorrespondenceEdgeLength(self):
        r"""GetCheckCorrespondenceEdgeLength(self) -> double"""
        return _itkRansacPython.itkRANSACPD6V_GetCheckCorrespondenceEdgeLength(self)
    __swig_destroy__ = _itkRansacPython.delete_itkRANSACPD6V

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRANSACPD6V

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRansacPython.itkRANSACPD6V_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRANSACPD6V

        Create a new object of the class itkRANSACPD6V and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRANSACPD6V.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRANSACPD6V.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRANSACPD6V.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRANSACPD6V in _itkRansacPython:
_itkRansacPython.itkRANSACPD6V_swigregister(itkRANSACPD6V)

def itkLandmarkRegistrationEstimatorD6S_New():
    return itkLandmarkRegistrationEstimatorD6S.New()

class itkLandmarkRegistrationEstimatorD6S(itkParametersEstimatorPD6):
    r"""Proxy of C++ itkLandmarkRegistrationEstimatorD6S class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkRegistrationEstimatorD6S_Pointer"""
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkRegistrationEstimatorD6S_Pointer"""
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_Clone(self)

    def Estimate(self, *args):
        r"""
        Estimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        parameters: std::vector< double,std::allocator< double > > &

        Estimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        parameters: std::vector< double,std::allocator< double > > &

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_Estimate(self, *args)

    def LeastSquaresEstimate(self, *args):
        r"""
        LeastSquaresEstimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        parameters: std::vector< double,std::allocator< double > > &

        LeastSquaresEstimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        parameters: std::vector< double,std::allocator< double > > &

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_LeastSquaresEstimate(self, *args)

    def SetDelta(self, delta):
        r"""
        SetDelta(self, delta)

        Parameters
        ----------
        delta: double

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_SetDelta(self, delta)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_GetDelta(self)

    def SetAgreeData(self, data):
        r"""
        SetAgreeData(self, data)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_SetAgreeData(self, data)
    __swig_destroy__ = _itkRansacPython.delete_itkLandmarkRegistrationEstimatorD6S

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkRegistrationEstimatorD6S

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6S_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkRegistrationEstimatorD6S

        Create a new object of the class itkLandmarkRegistrationEstimatorD6S and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkRegistrationEstimatorD6S.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkRegistrationEstimatorD6S.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkRegistrationEstimatorD6S.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkRegistrationEstimatorD6S in _itkRansacPython:
_itkRansacPython.itkLandmarkRegistrationEstimatorD6S_swigregister(itkLandmarkRegistrationEstimatorD6S)

def itkLandmarkRegistrationEstimatorD6V_New():
    return itkLandmarkRegistrationEstimatorD6V.New()

class itkLandmarkRegistrationEstimatorD6V(itkParametersEstimatorPD6):
    r"""Proxy of C++ itkLandmarkRegistrationEstimatorD6V class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkRegistrationEstimatorD6V_Pointer"""
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkRegistrationEstimatorD6V_Pointer"""
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_Clone(self)

    def Estimate(self, *args):
        r"""
        Estimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        parameters: std::vector< double,std::allocator< double > > &

        Estimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        parameters: std::vector< double,std::allocator< double > > &

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_Estimate(self, *args)

    def LeastSquaresEstimate(self, *args):
        r"""
        LeastSquaresEstimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6 *,std::allocator< itkPointD6 * > > &
        parameters: std::vector< double,std::allocator< double > > &

        LeastSquaresEstimate(self, data, parameters)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &
        parameters: std::vector< double,std::allocator< double > > &

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_LeastSquaresEstimate(self, *args)

    def SetDelta(self, delta):
        r"""
        SetDelta(self, delta)

        Parameters
        ----------
        delta: double

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_SetDelta(self, delta)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_GetDelta(self)

    def SetAgreeData(self, data):
        r"""
        SetAgreeData(self, data)

        Parameters
        ----------
        data: std::vector< itkPointD6,std::allocator< itkPointD6 > > &

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_SetAgreeData(self, data)
    __swig_destroy__ = _itkRansacPython.delete_itkLandmarkRegistrationEstimatorD6V

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkRegistrationEstimatorD6V

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRansacPython.itkLandmarkRegistrationEstimatorD6V_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkRegistrationEstimatorD6V

        Create a new object of the class itkLandmarkRegistrationEstimatorD6V and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkRegistrationEstimatorD6V.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkRegistrationEstimatorD6V.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkRegistrationEstimatorD6V.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkRegistrationEstimatorD6V in _itkRansacPython:
_itkRansacPython.itkLandmarkRegistrationEstimatorD6V_swigregister(itkLandmarkRegistrationEstimatorD6V)

