stages:
  - build
  - test
  - deploy

include:
  - component: gitlab.com/components/sast/sast@1
    inputs:
      stage: test

# -- Quality Assurance

semgrep-sast:
  needs: []

flake8:
  stage: test
  image: python
  needs: []
  script:
    - python -m pip install flake8 flake8-gl-codeclimate
    - python -m flake8 . --exit-zero
    - python -m flake8 . --exit-zero --format gl-codeclimate --output-file flake8.json
  artifacts:
    reports:
      codequality: flake8.json

# -- Build and test

build:
  stage: build
  image: python
  before_script:
    - python -m pip install build
  script:
    - python -m build . -o .
    - python -m tarfile --list *.tar.*
    - python -m zipfile --list *.whl
  artifacts:
    paths:
      - "*.tar.*"
      - "*.whl"

test:
  stage: test
  parallel:
    matrix:
      - REDHAT_VERSION:
          - 8
          - 9
  image: rockylinux:${REDHAT_VERSION}
  needs: [build]
  variables:
    COVERAGE_FILE: ".coverage-${CI_JOB_NAME_SLUG}"
  before_script:
    - dnf -y install
        jq
        python3
        rpm
        rpm-build
        rpmlint
    - /usr/bin/python3 -m venv --system-site-packages venv
    - . ./venv/bin/activate
    - python -m pip install pytest pytest-cov
    - WHEEL=$(echo *.whl)
    - python -m pip install ${WHEEL}[test]
    - python -m pip list installed
    - rpmlint --version
  script:
    # run rpmlint
    - rpmlint --permissive --info rpmlint_codeclimate/tests/example.spec
    # run rpmlint piped to rpmlint-codeclimate
    - rpmlint --permissive --info rpmlint_codeclimate/tests/example.spec | python -m rpmlint_codeclimate -s rpmlint_codeclimate/tests/example.spec | jq -C
    # run the actual test suite for rpmlint-codeclimate
    - python -m pytest
        --cov rpmlint_codeclimate
        --junit-xml junit.xml
        --pyargs rpmlint_codeclimate.tests
        -ra
        -v
    # format the cobertura report
    - python -m coverage xml -o coverage.xml
  artifacts:
    reports:
      # coverage report
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      # test report
      junit: junit.xml
    paths:
      - .coverage-*

python_coverage:
  stage: .post
  image: python
  needs: [test]
  script:
    # install coverage (with toml parsing extra)
    - python -m pip install coverage[toml]
    # combine coverage files from other jobs
    - python -m coverage combine .coverage*
    # print a report (for the record)
    - python -m coverage report -m
  artifacts: null
  # report coverage here, now that we have all of the information
  coverage: '/^TOTAL\s+.*\s+(\d+\.?\d*)%/'

# -- Publish

twine:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  image: python
  variables:
    GIT_STRATEGY: none
    # don't ask questions
    TWINE_NON_INTERACTIVE: "1"
    # PyPI username
    TWINE_USERNAME: "__token__"
    # PyPI password (set this using a protected group or protected variable)
    TWINE_PASSWORD: ""
  dependencies:
    - build
  before_script:
    - python -m pip install twine
  script:
    - python -m twine check *.tar.* *.whl
    - python -m twine upload *.tar.* *.whl
