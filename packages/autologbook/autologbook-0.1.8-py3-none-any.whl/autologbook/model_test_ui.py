# -*- coding: utf-8 -*-

# ----------------------------------------------------------------------------------------------------------------------
#  Copyright (c) 2023. Antonio Bulgheroni.
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
#  documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
#  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
#  permit persons to whom the Software is furnished to do so, subject to the following conditions:
#  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
#  Software.
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#  OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ----------------------------------------------------------------------------------------------------------------------

# Form implementation generated from reading ui file 'S:\software-dev\autologbook-dev\autologbook\ui\model_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_main_model_test(object):
    def setupUi(self, main_model_test):
        main_model_test.setObjectName("main_model_test")
        main_model_test.resize(331, 515)
        self.centralwidget = QtWidgets.QWidget(main_model_test)
        self.centralwidget.setObjectName("centralwidget")
        main_model_test.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(main_model_test)
        self.toolBar.setObjectName("toolBar")
        main_model_test.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(main_model_test)
        self.toolBar_2.setObjectName("toolBar_2")
        main_model_test.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar_2)
        self.protocol_browser_docking = QtWidgets.QDockWidget(main_model_test)
        self.protocol_browser_docking.setObjectName("protocol_browser_docking")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.treeView = QtWidgets.QTreeView(self.dockWidgetContents)
        self.treeView.setObjectName("treeView")
        self.treeView.header().setVisible(False)
        self.verticalLayout_2.addWidget(self.treeView)
        self.protocol_browser_docking.setWidget(self.dockWidgetContents)
        main_model_test.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.protocol_browser_docking)
        self.dockWidget = QtWidgets.QDockWidget(main_model_test)
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.sampleSelector = QtWidgets.QComboBox(self.dockWidgetContents_2)
        self.sampleSelector.setObjectName("sampleSelector")
        self.verticalLayout.addWidget(self.sampleSelector)
        self.listView = QtWidgets.QListView(self.dockWidgetContents_2)
        self.listView.setObjectName("listView")
        self.verticalLayout.addWidget(self.listView)
        self.select_label = QtWidgets.QLabel(self.dockWidgetContents_2)
        self.select_label.setObjectName("select_label")
        self.verticalLayout.addWidget(self.select_label)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        self.dockWidget.setWidget(self.dockWidgetContents_2)
        main_model_test.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)
        self.actionback_to_autologbook = QtWidgets.QAction(main_model_test)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/icons8-home-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionback_to_autologbook.setIcon(icon)
        self.actionback_to_autologbook.setObjectName("actionback_to_autologbook")
        self.actioncollapse_all = QtWidgets.QAction(main_model_test)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/resources/icons8-collapse-arrow-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actioncollapse_all.setIcon(icon1)
        self.actioncollapse_all.setObjectName("actioncollapse_all")
        self.actionexand_all = QtWidgets.QAction(main_model_test)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/resources/icons8-expand-arrow-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionexand_all.setIcon(icon2)
        self.actionexand_all.setObjectName("actionexand_all")
        self.actionrefresh_view = QtWidgets.QAction(main_model_test)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/resources/icons8-update-left-rotation-48.png"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.actionrefresh_view.setIcon(icon3)
        self.actionrefresh_view.setObjectName("actionrefresh_view")
        self.actionopen_protocol_folder = QtWidgets.QAction(main_model_test)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/resources/icons8-folder-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionopen_protocol_folder.setIcon(icon4)
        self.actionopen_protocol_folder.setObjectName("actionopen_protocol_folder")
        self.actionupdate_protocol = QtWidgets.QAction(main_model_test)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/resources/icons8-sync-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionupdate_protocol.setIcon(icon5)
        self.actionupdate_protocol.setObjectName("actionupdate_protocol")
        self.toolBar.addAction(self.actionback_to_autologbook)
        self.toolBar.addAction(self.actionopen_protocol_folder)
        self.toolBar_2.addAction(self.actioncollapse_all)
        self.toolBar_2.addAction(self.actionexand_all)
        self.toolBar_2.addAction(self.actionrefresh_view)
        self.toolBar_2.addAction(self.actionupdate_protocol)

        self.retranslateUi(main_model_test)
        self.sampleSelector.currentTextChanged['QString'].connect(main_model_test.changeListRoot)
        QtCore.QMetaObject.connectSlotsByName(main_model_test)

    def retranslateUi(self, main_model_test):
        _translate = QtCore.QCoreApplication.translate
        main_model_test.setWindowTitle(_translate("main_model_test", "MainWindow"))
        self.toolBar.setWindowTitle(_translate("main_model_test", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("main_model_test", "toolBar_2"))
        self.protocol_browser_docking.setWindowTitle(_translate("main_model_test", "Protocol Browser"))
        self.dockWidget.setWindowTitle(_translate("main_model_test", "Sample Browser"))
        self.select_label.setText(_translate("main_model_test", "Selected element is:"))
        self.actionback_to_autologbook.setText(_translate("main_model_test", "back to autologbook"))
        self.actionback_to_autologbook.setToolTip(_translate("main_model_test", "Go back to the main window"))
        self.actioncollapse_all.setText(_translate("main_model_test", "collapse_all"))
        self.actioncollapse_all.setToolTip(_translate("main_model_test", "Collapse all elements"))
        self.actionexand_all.setText(_translate("main_model_test", "exand_all"))
        self.actionexand_all.setToolTip(_translate("main_model_test", "Expand all elements"))
        self.actionrefresh_view.setText(_translate("main_model_test", "refresh_view"))
        self.actionrefresh_view.setToolTip(_translate("main_model_test", "Refresh view"))
        self.actionopen_protocol_folder.setText(_translate("main_model_test", "open_protocol_folder"))
        self.actionopen_protocol_folder.setToolTip(_translate("main_model_test", "Open protocol folder"))
        self.actionupdate_protocol.setText(_translate("main_model_test", "update_protocol"))
        self.actionupdate_protocol.setToolTip(_translate("main_model_test", "Update the protocol"))


from . import resource_rc
