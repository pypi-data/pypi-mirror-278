# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'S:\software-dev\autologbook-dev\autologbook\ui\main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(862, 675)
        MainWindow.setAcceptDrops(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/icons8-logbook-64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 1)
        self.protocol_folder_text = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.protocol_folder_text.sizePolicy().hasHeightForWidth())
        self.protocol_folder_text.setSizePolicy(sizePolicy)
        self.protocol_folder_text.setMinimumSize(QtCore.QSize(400, 0))
        self.protocol_folder_text.setObjectName("protocol_folder_text")
        self.gridLayout.addWidget(self.protocol_folder_text, 0, 2, 1, 1)
        self.select_protocol_folder = QtWidgets.QPushButton(self.centralwidget)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/resources/icons8-pictures-folder-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.select_protocol_folder.setIcon(icon1)
        self.select_protocol_folder.setObjectName("select_protocol_folder")
        self.gridLayout.addWidget(self.select_protocol_folder, 0, 3, 1, 4)
        self.mirror_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.mirror_checkBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.mirror_checkBox.setObjectName("mirror_checkBox")
        self.gridLayout.addWidget(self.mirror_checkBox, 1, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 1, 1, 1)
        self.mirroring_folder_text = QtWidgets.QLineEdit(self.centralwidget)
        self.mirroring_folder_text.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mirroring_folder_text.sizePolicy().hasHeightForWidth())
        self.mirroring_folder_text.setSizePolicy(sizePolicy)
        self.mirroring_folder_text.setMinimumSize(QtCore.QSize(400, 0))
        self.mirroring_folder_text.setObjectName("mirroring_folder_text")
        self.gridLayout.addWidget(self.mirroring_folder_text, 1, 2, 1, 1)
        self.select_mirroring_folder = QtWidgets.QPushButton(self.centralwidget)
        self.select_mirroring_folder.setEnabled(False)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/resources/icons8-link-folder-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.select_mirroring_folder.setIcon(icon2)
        self.select_mirroring_folder.setObjectName("select_mirroring_folder")
        self.gridLayout.addWidget(self.select_mirroring_folder, 1, 3, 1, 4)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 1, 1, 1)
        self.select_microscope_comboBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.select_microscope_comboBox.sizePolicy().hasHeightForWidth())
        self.select_microscope_comboBox.setSizePolicy(sizePolicy)
        self.select_microscope_comboBox.setMinimumSize(QtCore.QSize(400, 0))
        self.select_microscope_comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.select_microscope_comboBox.setObjectName("select_microscope_comboBox")
        self.select_microscope_comboBox.addItem("")
        self.select_microscope_comboBox.addItem("")
        self.select_microscope_comboBox.addItem("")
        self.select_microscope_comboBox.addItem("")
        self.select_microscope_comboBox.addItem("")
        self.select_microscope_comboBox.addItem("")
        self.gridLayout.addWidget(self.select_microscope_comboBox, 2, 2, 1, 1)
        self.GUIThreadLabel = QtWidgets.QLabel(self.centralwidget)
        self.GUIThreadLabel.setObjectName("GUIThreadLabel")
        self.gridLayout.addWidget(self.GUIThreadLabel, 2, 3, 1, 1)
        self.gui_thread_status = QtWidgets.QLabel(self.centralwidget)
        self.gui_thread_status.setMinimumSize(QtCore.QSize(15, 15))
        self.gui_thread_status.setMaximumSize(QtCore.QSize(15, 15))
        self.gui_thread_status.setText("")
        self.gui_thread_status.setPixmap(QtGui.QPixmap(":/resources/icons8-red-circle-48.png"))
        self.gui_thread_status.setScaledContents(True)
        self.gui_thread_status.setObjectName("gui_thread_status")
        self.gridLayout.addWidget(self.gui_thread_status, 2, 4, 1, 1)
        self.custom_ownership_checkbox = QtWidgets.QCheckBox(self.centralwidget)
        self.custom_ownership_checkbox.setObjectName("custom_ownership_checkbox")
        self.gridLayout.addWidget(self.custom_ownership_checkbox, 3, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        self.projectID_field = QtWidgets.QLineEdit(self.centralwidget)
        self.projectID_field.setEnabled(False)
        self.projectID_field.setObjectName("projectID_field")
        self.horizontalLayout_3.addWidget(self.projectID_field)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_3.addWidget(self.label_6)
        self.project_name_field = QtWidgets.QLineEdit(self.centralwidget)
        self.project_name_field.setEnabled(False)
        self.project_name_field.setObjectName("project_name_field")
        self.horizontalLayout_3.addWidget(self.project_name_field)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7)
        self.responsible_field = QtWidgets.QLineEdit(self.centralwidget)
        self.responsible_field.setEnabled(False)
        self.responsible_field.setObjectName("responsible_field")
        self.horizontalLayout_3.addWidget(self.responsible_field)
        self.gridLayout.addLayout(self.horizontalLayout_3, 3, 1, 1, 2)
        self.AutoThreadLabel = QtWidgets.QLabel(self.centralwidget)
        self.AutoThreadLabel.setObjectName("AutoThreadLabel")
        self.gridLayout.addWidget(self.AutoThreadLabel, 3, 3, 1, 1)
        self.auto_thread_status = QtWidgets.QLabel(self.centralwidget)
        self.auto_thread_status.setMinimumSize(QtCore.QSize(15, 15))
        self.auto_thread_status.setMaximumSize(QtCore.QSize(15, 15))
        self.auto_thread_status.setText("")
        self.auto_thread_status.setPixmap(QtGui.QPixmap(":/resources/icons8-red-circle-48.png"))
        self.auto_thread_status.setScaledContents(True)
        self.auto_thread_status.setObjectName("auto_thread_status")
        self.gridLayout.addWidget(self.auto_thread_status, 3, 4, 1, 1)
        self.auto_obs_status = QtWidgets.QLabel(self.centralwidget)
        self.auto_obs_status.setMinimumSize(QtCore.QSize(15, 15))
        self.auto_obs_status.setMaximumSize(QtCore.QSize(15, 15))
        self.auto_obs_status.setText("")
        self.auto_obs_status.setPixmap(QtGui.QPixmap(":/resources/icons8-red-circle-48.png"))
        self.auto_obs_status.setScaledContents(True)
        self.auto_obs_status.setObjectName("auto_obs_status")
        self.gridLayout.addWidget(self.auto_obs_status, 3, 5, 1, 1)
        self.auto_emi_status = QtWidgets.QLabel(self.centralwidget)
        self.auto_emi_status.setMinimumSize(QtCore.QSize(15, 15))
        self.auto_emi_status.setMaximumSize(QtCore.QSize(15, 15))
        self.auto_emi_status.setText("")
        self.auto_emi_status.setPixmap(QtGui.QPixmap(":/resources/icons8-red-circle-48.png"))
        self.auto_emi_status.setScaledContents(True)
        self.auto_emi_status.setObjectName("auto_emi_status")
        self.gridLayout.addWidget(self.auto_emi_status, 3, 6, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.watchdog_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        self.watchdog_pushbutton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.watchdog_pushbutton.sizePolicy().hasHeightForWidth())
        self.watchdog_pushbutton.setSizePolicy(sizePolicy)
        self.watchdog_pushbutton.setMinimumSize(QtCore.QSize(40, 35))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/resources/icons8-play-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.watchdog_pushbutton.setIcon(icon3)
        self.watchdog_pushbutton.setIconSize(QtCore.QSize(30, 30))
        self.watchdog_pushbutton.setCheckable(True)
        self.watchdog_pushbutton.setObjectName("watchdog_pushbutton")
        self.horizontalLayout.addWidget(self.watchdog_pushbutton)
        self.open_explorer_pushbuttom = QtWidgets.QPushButton(self.centralwidget)
        self.open_explorer_pushbuttom.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_explorer_pushbuttom.sizePolicy().hasHeightForWidth())
        self.open_explorer_pushbuttom.setSizePolicy(sizePolicy)
        self.open_explorer_pushbuttom.setMinimumSize(QtCore.QSize(40, 35))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/resources/icons8-opened-folder-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.open_explorer_pushbuttom.setIcon(icon4)
        self.open_explorer_pushbuttom.setIconSize(QtCore.QSize(30, 30))
        self.open_explorer_pushbuttom.setObjectName("open_explorer_pushbuttom")
        self.horizontalLayout.addWidget(self.open_explorer_pushbuttom)
        self.open_browser_button = QtWidgets.QPushButton(self.centralwidget)
        self.open_browser_button.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_browser_button.sizePolicy().hasHeightForWidth())
        self.open_browser_button.setSizePolicy(sizePolicy)
        self.open_browser_button.setMinimumSize(QtCore.QSize(40, 35))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/resources/icons8-website-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.open_browser_button.setIcon(icon5)
        self.open_browser_button.setIconSize(QtCore.QSize(30, 30))
        self.open_browser_button.setObjectName("open_browser_button")
        self.horizontalLayout.addWidget(self.open_browser_button)
        self.edit_custom_html_file_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        self.edit_custom_html_file_pushbutton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.edit_custom_html_file_pushbutton.sizePolicy().hasHeightForWidth())
        self.edit_custom_html_file_pushbutton.setSizePolicy(sizePolicy)
        self.edit_custom_html_file_pushbutton.setMinimumSize(QtCore.QSize(40, 35))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/resources/icons8-pencil-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.edit_custom_html_file_pushbutton.setIcon(icon6)
        self.edit_custom_html_file_pushbutton.setIconSize(QtCore.QSize(30, 30))
        self.edit_custom_html_file_pushbutton.setObjectName("edit_custom_html_file_pushbutton")
        self.horizontalLayout.addWidget(self.edit_custom_html_file_pushbutton)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.log_message_box = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.log_message_box.setMinimumSize(QtCore.QSize(500, 400))
        self.log_message_box.setLineWrapMode(QtWidgets.QPlainTextEdit.NoWrap)
        self.log_message_box.setObjectName("log_message_box")
        self.verticalLayout.addWidget(self.log_message_box)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(308, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.clean_logger_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        self.clean_logger_pushbutton.setObjectName("clean_logger_pushbutton")
        self.horizontalLayout_2.addWidget(self.clean_logger_pushbutton)
        self.save_logger_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/resources/icons8-save-as-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_logger_pushbutton.setIcon(icon7)
        self.save_logger_pushbutton.setObjectName("save_logger_pushbutton")
        self.horizontalLayout_2.addWidget(self.save_logger_pushbutton)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 862, 21))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        self.menuLoad_recent = QtWidgets.QMenu(self.menu_File)
        self.menuLoad_recent.setObjectName("menuLoad_recent")
        self.menuRun = QtWidgets.QMenu(self.menubar)
        self.menuRun.setObjectName("menuRun")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_Load_experiment = QtWidgets.QAction(MainWindow)
        self.action_Load_experiment.setObjectName("action_Load_experiment")
        self.actionSave_experiment = QtWidgets.QAction(MainWindow)
        self.actionSave_experiment.setEnabled(False)
        self.actionSave_experiment.setIcon(icon7)
        self.actionSave_experiment.setObjectName("actionSave_experiment")
        self.actionSta_rt_watchdog = QtWidgets.QAction(MainWindow)
        self.actionSta_rt_watchdog.setEnabled(False)
        self.actionSta_rt_watchdog.setIcon(icon3)
        self.actionSta_rt_watchdog.setObjectName("actionSta_rt_watchdog")
        self.actionStop_watchdog = QtWidgets.QAction(MainWindow)
        self.actionStop_watchdog.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/resources/icons8-stop-sign-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionStop_watchdog.setIcon(icon8)
        self.actionStop_watchdog.setObjectName("actionStop_watchdog")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionClear_logger = QtWidgets.QAction(MainWindow)
        self.actionClear_logger.setObjectName("actionClear_logger")
        self.actionSave_logger = QtWidgets.QAction(MainWindow)
        self.actionSave_logger.setIcon(icon7)
        self.actionSave_logger.setObjectName("actionSave_logger")
        self.actionLoad_configuration_file = QtWidgets.QAction(MainWindow)
        self.actionLoad_configuration_file.setIcon(icon4)
        self.actionLoad_configuration_file.setObjectName("actionLoad_configuration_file")
        self.actionSave_current_configuration = QtWidgets.QAction(MainWindow)
        self.actionSave_current_configuration.setIcon(icon7)
        self.actionSave_current_configuration.setObjectName("actionSave_current_configuration")
        self.actionReset_to_default = QtWidgets.QAction(MainWindow)
        self.actionReset_to_default.setObjectName("actionReset_to_default")
        self.actionSet_engine = QtWidgets.QAction(MainWindow)
        self.actionSet_engine.setObjectName("actionSet_engine")
        self.actionAbout_Autologbook = QtWidgets.QAction(MainWindow)
        self.actionAbout_Autologbook.setObjectName("actionAbout_Autologbook")
        self.actionEdit_configuration = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/resources/icons8-support-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEdit_configuration.setIcon(icon9)
        self.actionEdit_configuration.setObjectName("actionEdit_configuration")
        self.actionChange_user_credentials = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/resources/icons8-user-secured-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionChange_user_credentials.setIcon(icon10)
        self.actionChange_user_credentials.setObjectName("actionChange_user_credentials")
        self.action_toggle_watchdog = QtWidgets.QAction(MainWindow)
        self.action_toggle_watchdog.setObjectName("action_toggle_watchdog")
        self.actionRecent1 = QtWidgets.QAction(MainWindow)
        self.actionRecent1.setObjectName("actionRecent1")
        self.actionRecent2 = QtWidgets.QAction(MainWindow)
        self.actionRecent2.setObjectName("actionRecent2")
        self.actionRecent3 = QtWidgets.QAction(MainWindow)
        self.actionRecent3.setObjectName("actionRecent3")
        self.actionRecent4 = QtWidgets.QAction(MainWindow)
        self.actionRecent4.setObjectName("actionRecent4")
        self.menu_File.addAction(self.action_Load_experiment)
        self.menu_File.addAction(self.menuLoad_recent.menuAction())
        self.menu_File.addAction(self.actionSave_experiment)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionClear_logger)
        self.menu_File.addAction(self.actionSave_logger)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionClose)
        self.menuRun.addAction(self.action_toggle_watchdog)
        self.menuSettings.addAction(self.actionChange_user_credentials)
        self.menuSettings.addSeparator()
        self.menuSettings.addAction(self.actionLoad_configuration_file)
        self.menuSettings.addAction(self.actionEdit_configuration)
        self.menuSettings.addAction(self.actionReset_to_default)
        self.menuSettings.addSeparator()
        self.menuHelp.addAction(self.actionAbout_Autologbook)
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menuRun.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.label.setBuddy(self.protocol_folder_text)
        self.label_2.setBuddy(self.mirroring_folder_text)
        self.label_3.setBuddy(self.select_microscope_comboBox)
        self.label_5.setBuddy(self.projectID_field)
        self.label_6.setBuddy(self.project_name_field)
        self.label_7.setBuddy(self.responsible_field)
        self.label_4.setBuddy(self.log_message_box)

        self.retranslateUi(MainWindow)
        self.mirror_checkBox.toggled['bool'].connect(self.mirroring_folder_text.setEnabled) # type: ignore
        self.mirror_checkBox.toggled['bool'].connect(self.select_mirroring_folder.setEnabled) # type: ignore
        self.watchdog_pushbutton.clicked['bool'].connect(MainWindow.toggled_watchdog) # type: ignore
        self.open_explorer_pushbuttom.clicked.connect(MainWindow.open_browser) # type: ignore
        self.edit_custom_html_file_pushbutton.clicked.connect(MainWindow.open_yaml_editor) # type: ignore
        self.select_protocol_folder.clicked.connect(MainWindow.open_protocol_folder) # type: ignore
        self.select_mirroring_folder.clicked.connect(MainWindow.open_mirroring_folder) # type: ignore
        self.watchdog_pushbutton.toggled['bool'].connect(self.open_explorer_pushbuttom.setEnabled) # type: ignore
        self.select_microscope_comboBox.currentIndexChanged['QString'].connect(MainWindow.changed_microscope) # type: ignore
        self.mirror_checkBox.toggled['bool'].connect(MainWindow.toggled_mirroring) # type: ignore
        self.protocol_folder_text.editingFinished.connect(MainWindow.validate_inputs) # type: ignore
        self.mirroring_folder_text.editingFinished.connect(MainWindow.validate_inputs) # type: ignore
        self.clean_logger_pushbutton.clicked.connect(MainWindow.clear_logger) # type: ignore
        self.save_logger_pushbutton.clicked.connect(MainWindow.save_logger) # type: ignore
        self.custom_ownership_checkbox.toggled['bool'].connect(self.projectID_field.setEnabled) # type: ignore
        self.custom_ownership_checkbox.toggled['bool'].connect(self.project_name_field.setEnabled) # type: ignore
        self.custom_ownership_checkbox.toggled['bool'].connect(self.responsible_field.setEnabled) # type: ignore
        self.custom_ownership_checkbox.toggled['bool'].connect(MainWindow.toggled_custom_ownership) # type: ignore
        self.projectID_field.editingFinished.connect(MainWindow.validate_inputs) # type: ignore
        self.project_name_field.editingFinished.connect(MainWindow.validate_inputs) # type: ignore
        self.responsible_field.editingFinished.connect(MainWindow.validate_inputs) # type: ignore
        self.open_browser_button.clicked.connect(MainWindow.open_protocol_webpage) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.protocol_folder_text, self.select_protocol_folder)
        MainWindow.setTabOrder(self.select_protocol_folder, self.mirror_checkBox)
        MainWindow.setTabOrder(self.mirror_checkBox, self.mirroring_folder_text)
        MainWindow.setTabOrder(self.mirroring_folder_text, self.select_mirroring_folder)
        MainWindow.setTabOrder(self.select_mirroring_folder, self.select_microscope_comboBox)
        MainWindow.setTabOrder(self.select_microscope_comboBox, self.custom_ownership_checkbox)
        MainWindow.setTabOrder(self.custom_ownership_checkbox, self.projectID_field)
        MainWindow.setTabOrder(self.projectID_field, self.project_name_field)
        MainWindow.setTabOrder(self.project_name_field, self.responsible_field)
        MainWindow.setTabOrder(self.responsible_field, self.watchdog_pushbutton)
        MainWindow.setTabOrder(self.watchdog_pushbutton, self.open_explorer_pushbuttom)
        MainWindow.setTabOrder(self.open_explorer_pushbuttom, self.edit_custom_html_file_pushbutton)
        MainWindow.setTabOrder(self.edit_custom_html_file_pushbutton, self.log_message_box)
        MainWindow.setTabOrder(self.log_message_box, self.clean_logger_pushbutton)
        MainWindow.setTabOrder(self.clean_logger_pushbutton, self.save_logger_pushbutton)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Autologbook GUI"))
        self.label.setText(_translate("MainWindow", "Protocol folder"))
        self.select_protocol_folder.setToolTip(_translate("MainWindow", "Select the protocol folder"))
        self.select_protocol_folder.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Click here to select a folder to be monitored. </span></p><p>It is recommended to name this folder as ProtocolID-Project-Responsible as, for example, 2204123-RADCAS-Bulgheroni</p></body></html>"))
        self.select_protocol_folder.setText(_translate("MainWindow", "Select folder"))
        self.mirror_checkBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>Activate mirroring</p></body></html>"))
        self.mirror_checkBox.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>Activating the mirroring will start the automatic copy of all files present in the protocol folder to the mirroring folder.</p></body></html>"))
        self.mirror_checkBox.setText(_translate("MainWindow", "Activate mirroring"))
        self.label_2.setText(_translate("MainWindow", "Mirroring folder"))
        self.select_mirroring_folder.setToolTip(_translate("MainWindow", "<html><head/><body><p>Select a mirroring folder</p></body></html>"))
        self.select_mirroring_folder.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Select a mirroring folder</span></p><p>This folder <span style=\" font-weight:600;\">must </span>have be named as ProtocolID-Project-Responsible and must be on R:\\A226\\Results. If not, the watchdog won\'t be able to start.</p></body></html>"))
        self.select_mirroring_folder.setText(_translate("MainWindow", "Select folder"))
        self.label_3.setText(_translate("MainWindow", "Select microscope "))
        self.select_microscope_comboBox.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Select the microscope as appropriate.</span></p></body></html>"))
        self.select_microscope_comboBox.setItemText(0, _translate("MainWindow", "Quattro"))
        self.select_microscope_comboBox.setItemText(1, _translate("MainWindow", "Versa"))
        self.select_microscope_comboBox.setItemText(2, _translate("MainWindow", "XL40-GB"))
        self.select_microscope_comboBox.setItemText(3, _translate("MainWindow", "XL40-Cold"))
        self.select_microscope_comboBox.setItemText(4, _translate("MainWindow", "Vega"))
        self.select_microscope_comboBox.setItemText(5, _translate("MainWindow", "TEM"))
        self.GUIThreadLabel.setText(_translate("MainWindow", "G:"))
        self.gui_thread_status.setToolTip(_translate("MainWindow", "Status of the GUI thread"))
        self.custom_ownership_checkbox.setToolTip(_translate("MainWindow", "<html><head/><body><p>Activate custom protocol parameters (ID / Projet name / Project responsible)</p></body></html>"))
        self.custom_ownership_checkbox.setText(_translate("MainWindow", "Use custom parameters"))
        self.label_5.setText(_translate("MainWindow", "Protocol ID"))
        self.label_6.setText(_translate("MainWindow", "Project name"))
        self.label_7.setText(_translate("MainWindow", "Responsible"))
        self.AutoThreadLabel.setText(_translate("MainWindow", "A:"))
        self.auto_thread_status.setToolTip(_translate("MainWindow", "Status of the autologbook watchdog thread"))
        self.auto_obs_status.setToolTip(_translate("MainWindow", "Status of the autologbook watchdog observer thread"))
        self.auto_emi_status.setToolTip(_translate("MainWindow", "Status of the autologbook watchdog emitter thread"))
        self.watchdog_pushbutton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Start the watchog</p></body></html>"))
        self.watchdog_pushbutton.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Start the watchdog</span></p><p><br/></p><p>The watchdog will monitor the protocol or the mirroring  folder for interesting new file and add them to eLOG entry automatically.</p><p><br/></p><p>At least one between the protocol and the mirroring folder must be rooted in R:\\A226\\Results, otherwise the watchdog won\'t be started.</p></body></html>"))
        self.watchdog_pushbutton.setText(_translate("MainWindow", "Start watchdog"))
        self.open_explorer_pushbuttom.setToolTip(_translate("MainWindow", "Open the protocol folder"))
        self.open_explorer_pushbuttom.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Open protocol folder</span></p><p>Click this button to open a file explorer pointing to either the protocol folder or the mirroring one if the mirroing option is activated.</p></body></html>"))
        self.open_explorer_pushbuttom.setText(_translate("MainWindow", "Open protocol folder"))
        self.open_browser_button.setToolTip(_translate("MainWindow", "<html><head/><body><p>Open the protocol webpage</p></body></html>"))
        self.open_browser_button.setText(_translate("MainWindow", "Open protocol webpage"))
        self.edit_custom_html_file_pushbutton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Open the interactive protocol editor</p></body></html>"))
        self.edit_custom_html_file_pushbutton.setText(_translate("MainWindow", "Open protocol editor"))
        self.label_4.setText(_translate("MainWindow", "Logging messages"))
        self.clean_logger_pushbutton.setText(_translate("MainWindow", "Clear logger"))
        self.save_logger_pushbutton.setText(_translate("MainWindow", "Save logger..."))
        self.menu_File.setTitle(_translate("MainWindow", "&File"))
        self.menuLoad_recent.setTitle(_translate("MainWindow", "Load recent"))
        self.menuRun.setTitle(_translate("MainWindow", "Run"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.action_Load_experiment.setText(_translate("MainWindow", "&Load experiment..."))
        self.actionSave_experiment.setText(_translate("MainWindow", "Save experiment..."))
        self.actionSta_rt_watchdog.setText(_translate("MainWindow", "Sta&rt watchdog"))
        self.actionStop_watchdog.setText(_translate("MainWindow", "Stop watchdog"))
        self.actionClose.setText(_translate("MainWindow", "&Close"))
        self.actionClear_logger.setText(_translate("MainWindow", "Clea&r logger"))
        self.actionSave_logger.setText(_translate("MainWindow", "Save logger..."))
        self.actionLoad_configuration_file.setText(_translate("MainWindow", "Load configuration file..."))
        self.actionSave_current_configuration.setText(_translate("MainWindow", "Save current configuration..."))
        self.actionReset_to_default.setText(_translate("MainWindow", "Reset to default..."))
        self.actionSet_engine.setText(_translate("MainWindow", "Set mirroring engine..."))
        self.actionAbout_Autologbook.setText(_translate("MainWindow", "About Autologbook..."))
        self.actionEdit_configuration.setText(_translate("MainWindow", "Edit configuration..."))
        self.actionChange_user_credentials.setText(_translate("MainWindow", "Change user credentials..."))
        self.action_toggle_watchdog.setText(_translate("MainWindow", "Toggle watchdog"))
        self.action_toggle_watchdog.setToolTip(_translate("MainWindow", "Start / stop the watchdog"))
        self.action_toggle_watchdog.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.actionRecent1.setText(_translate("MainWindow", "Recent1"))
        self.actionRecent2.setText(_translate("MainWindow", "Recent2"))
        self.actionRecent3.setText(_translate("MainWindow", "Recent3"))
        self.actionRecent4.setText(_translate("MainWindow", "Recent4"))
from . import resource_rc
