{"version":3,"file":"conditionSetView.js","names":["BaseConditionRowView","Backbone","View","extend","className","tagName","events","initialize","options","listenTo","model","$el","slideUp","rowAnimationSpeedMS","remove","bind","_onDeleteClicked","e","stopPropagation","preventDefault","destroy","ConditionRowView","template","_","join","prototype","call","conditionSet","_$choice","_$operator","_$valueWrapper","_$newValue","_defaultValueField","_valueField","render","html","attributes","$rowOptions","children","fieldName","get","rowNum","$","attr","choices","each","choice","append","val","id","text","appendTo","_onChoiceChanged","_onOperatorChanged","_onValueChanged","createValueField","empty","operators","operator","newValueField","toggle","setValue","_onSelectChoiceChanged","set","_onSelectOperatorChanged","DisabledConditionRowView","value","Djblets","Forms","ConditionSetView","DEFAULT_ROW_ANIMATION_SPEED_MS","_rowAnimationSpeedMS","_$lastID","_$rows","conditions","bindProperty","_$mode","_$rowsContainer","$rowItems","condition","i","_addConditionRow","_onConditionModeChanged","$rowEl","RowViewCls","rowView","el","undefined","hide","slideDown","_onAddRowClicked","addNewCondition","mode","filter"],"sources":["../../../../../../static/djblets/js/forms/views/conditionSetView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Base view for condition rows.\n *\n * This is responsible for handling common logic for condition row views. It's\n * mainly used to handle deletion of the row.\n */\nconst BaseConditionRowView = Backbone.View.extend({\n    className: 'conditions-field-row',\n    tagName: 'li',\n\n    events: {\n        'click .conditions-field-row-delete': '_onDeleteClicked',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     rowAnimationSpeedMS (number):\n     *         The animation speed for adding/removing rows.\n     */\n    initialize(options) {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.slideUp(options.rowAnimationSpeedMS,\n                             this.remove.bind(this));\n        });\n    },\n\n    /**\n     * Callback for when the delete button is clicked.\n     *\n     * Deletes the model, which will in turn delete this row.\n     */\n    _onDeleteClicked(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.model.destroy();\n    },\n});\n\n\n/**\n * A view representing a row containing a choice, operator, and value.\n *\n * This is responsible for allowing a user to choose the values for one\n * condition. Choosing a choice will populate a list of operators, and choosing\n * an operator will show or hide a value field (depending on the operator).\n */\nconst ConditionRowView = BaseConditionRowView.extend({\n    template: _.template([\n        '<span class=\"conditions-field-action conditions-field-row-delete\">\\n',\n        ' <span class=\"fa fa-minus-circle\"></span>\\n',\n        '</span>\\n',\n        '<span class=\"conditions-field-row-options\">\\n',\n        ' <% if (error) { %>',\n        '  <ul class=\"error-list\"><li><%- error %></li></ul>\\n',\n        ' <% } %>',\n        ' <span class=\"conditions-field-choice\"></span>\\n',\n        ' <span class=\"conditions-field-operator\"></span>\\n',\n        ' <span class=\"conditions-field-value\"></span>\\n',\n        '</span>',\n    ].join('')),\n\n    events: _.extend({\n        'change .conditions-field-choice select': '_onSelectChoiceChanged',\n        'change .conditions-field-operator select': '_onSelectOperatorChanged',\n    }, BaseConditionRowView.prototype.events),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     conditionSet (Djblets.Forms.ConditionSet):\n     *         The condition set defining the choices allowed. This is\n     *         required.\n     *\n     *     rowAnimationSpeedMS (number):\n     *         The animation speed for adding/removing rows.\n     */\n    initialize(options) {\n        BaseConditionRowView.prototype.initialize.call(this, options);\n\n        this.conditionSet = options.conditionSet;\n\n        this._$choice = null;\n        this._$operator = null;\n        this._$valueWrapper = null;\n        this._$newValue = null;\n        this._defaultValueField = null;\n        this._valueField = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will create and populate the choice, operator and value fields,\n     * based on the contents of the model, and begin listening to events.\n     *\n     * Returns:\n     *     ConditionRowView:\n     *     The instance, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n\n        const $rowOptions = this.$el.children('.conditions-field-row-options');\n        const fieldName = this.conditionSet.get('fieldName');\n        const rowNum = this.model.get('id');\n\n        /* Build the list of choices. This will be populated up-front. */\n        this._$choice = $('<select>')\n            .attr('name', `${fieldName}_choice[${rowNum}]`);\n\n        this.conditionSet.choices.each(choice => {\n            this._$choice.append($('<option>')\n                .val(choice.id)\n                .text(choice.get('name')));\n        });\n\n        this._$choice\n            .appendTo($rowOptions.children('.conditions-field-choice'));\n\n        /*\n         * Build the list for the operators. This will be populated when\n         * calling _onChoiceChanged, and whenever the choice changes.\n         */\n        this._$operator = $('<select>')\n            .attr('name', `${fieldName}_operator[${rowNum}]`)\n            .appendTo($rowOptions.children('.conditions-field-operator'));\n\n        this._$valueWrapper = $rowOptions.children('.conditions-field-value');\n\n        /*\n         * Bind all the events so the attributes and inputs reflect each other.\n         * We'll also be binding visibility.\n         */\n        this.listenTo(this.model, 'change:choice', this._onChoiceChanged);\n        this.listenTo(this.model, 'change:operator', this._onOperatorChanged);\n        this.listenTo(this.model, 'change:value', this._onValueChanged);\n\n        /* Set the initial state for the choice and operator from the model. */\n        this._onChoiceChanged();\n        this._onOperatorChanged();\n        this._onValueChanged();\n\n        return this;\n    },\n\n    /**\n     * Callback for when the choice attribute changes on the model.\n     *\n     * Updates the list of operators and sets up a new field for the value,\n     * getting rid of the old one.\n     */\n    _onChoiceChanged() {\n        const choice = this.model.get('choice');\n        const fieldName = this.conditionSet.get('fieldName');\n        const rowNum = this.model.get('id');\n\n        this._$choice.val(choice.id);\n\n        this._defaultValueField = choice.createValueField(\n            `${fieldName}_value[${rowNum}]`);\n\n        /* Rebuild the list of operators for the choice. */\n        this._$operator.empty();\n\n        choice.operators.each(operator => {\n            this._$operator.append(\n                $('<option>')\n                    .val(operator.id)\n                    .text(operator.get('name')));\n        });\n\n        this._$operator.val(this.model.get('operator').id);\n    },\n\n    /**\n     * Callback for when the operator changes on the model.\n     *\n     * Updates the visibility of the value, based on whether the operator\n     * needs one.\n     */\n    _onOperatorChanged() {\n        const operator = this.model.get('operator');\n        let newValueField;\n\n        this._$operator.val(operator.id);\n        this._$valueWrapper.toggle(operator.get('useValue'));\n\n        if (operator.get('valueField') !== null) {\n            const fieldName = this.conditionSet.get('fieldName');\n            const rowNum = this.model.get('id');\n\n            newValueField = operator.createValueField(\n                `${fieldName}_value[${rowNum}]`);\n        } else {\n            newValueField = this._defaultValueField;\n        }\n\n        if (newValueField !== this._valueField) {\n            /* Replace the old value field with a new one for this choice. */\n            if (this._$newValue !== null &&\n                newValueField !== this._valueField) {\n                this._$newValue.remove();\n                this._$newValue = null;\n            }\n\n            this._valueField = newValueField;\n\n            this._$newValue = this._valueField.render().$el\n                .appendTo(this._$valueWrapper);\n        }\n    },\n\n    /**\n     * Callback for when the value changes on the model.\n     *\n     * Updates the field to reflect the new value.\n     */\n    _onValueChanged() {\n        this._valueField.setValue(this.model.get('value'));\n    },\n\n    /**\n     * Callback for when a new condition choice is chosen in the drop-down.\n     *\n     * Updates the choice in the model.\n     */\n    _onSelectChoiceChanged() {\n        this.model.set('choice',\n                       this.conditionSet.choices.get(this._$choice.val()));\n    },\n\n    /**\n     * Callback for when a new operator is chosen in the drop-down.\n     *\n     * Updates the operator in the model.\n     */\n    _onSelectOperatorChanged() {\n        const choice = this.model.get('choice');\n\n        this.model.set('operator',\n                       choice.operators.get(this._$operator.val()));\n    },\n});\n\n\n/**\n * A view representing a disabled condition row.\n *\n * This is used for conditions that are considered invalid (ones whose choice\n * or operator could not be found when loading). The condition is shown in a\n * disabled state, with the raw value alongside it (if set). It can only be\n * removed.\n */\nconst DisabledConditionRowView = BaseConditionRowView.extend({\n    render() {\n        const value = this.model.get('value');\n\n        if (value !== null) {\n            this.$('.conditions-field-value').text(value);\n        }\n\n        return this;\n    },\n});\n\n\n/**\n * A view for creating, editing, and deleting a set of conditions.\n *\n * This starts off by listing all the conditions already configured (as\n * represented by the data in the associated model), and allows those\n * conditions to be edited/deleted or new ones to be created.\n *\n * Options:\n *     rowAnimationSpeedMS (number):\n *         The animation speed (in milliseconds) for adding or removing\n *         condition rows.\n */\nDjblets.Forms.ConditionSetView = Backbone.View.extend({\n    DEFAULT_ROW_ANIMATION_SPEED_MS: 300,\n\n    events: {\n        'change #conditions_mode input': '_onConditionModeChanged',\n        'click .conditions-field-add-condition': '_onAddRowClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize(options) {\n        this._rowAnimationSpeedMS = options.rowAnimationSpeedMS ||\n                                    this.DEFAULT_ROW_ANIMATION_SPEED_MS;\n\n        this._$lastID = null;\n        this._$rows = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will construct a :js:class:`ConditionRowView` for each condition\n     * that has been provided, and hook up events to handle the creation or\n     * deletion of conditions.\n     *\n     * Returns:\n     *     Djblets.Forms.ConditionSetView:\n     *     This instance, for chaining.\n     */\n    render() {\n        const fieldName = this.model.get('fieldName');\n        const conditions = this.model.conditions;\n\n        this._$lastID = this.$el.children(`input[name=${fieldName}_last_id]`)\n            .bindProperty('value', this.model, 'lastID');\n        this._$mode = this.$('#conditions_mode input');\n        this._$rowsContainer = this.$('.conditions-field-rows-container');\n        this._$rows = this._$rowsContainer.children('.conditions-field-rows');\n\n        /* Render rows for any existing conditions. */\n        const $rowItems = this._$rows.children();\n\n        conditions.each((condition, i) => {\n            this._addConditionRow(condition, $rowItems[i]);\n        });\n\n        /* Begin listening for any events that impact the rows or inputs. */\n        this.listenTo(conditions, 'add',\n                      condition => this._addConditionRow(condition));\n\n        this._onConditionModeChanged();\n\n        return this;\n    },\n\n    /**\n     * Add a condition row to the UI.\n     *\n     * This is called when a new condition has been added in the models. It\n     * constructs a :js:class:`ConditionRowView` and renders it in the list.\n     *\n     * Args:\n     *     condition (Djblets.Forms.Condition):\n     *         The condition being added.\n     *\n     *     $rowEl (jQuery):\n     *         The element to use for the row. If not provided, a new one\n     *         will be created.\n     */\n    _addConditionRow(condition, $rowEl) {\n        const RowViewCls = condition.get('valid')\n                           ? ConditionRowView\n                           : DisabledConditionRowView;\n\n        const rowView = new RowViewCls({\n            conditionSet: this.model,\n            el: $rowEl,\n            model: condition,\n            rowAnimationSpeedMS: this._rowAnimationSpeedMS,\n        });\n        rowView.render();\n\n        if ($rowEl === undefined) {\n            rowView.$el\n                .hide()\n                .appendTo(this._$rows)\n                .slideDown(this._rowAnimationSpeedMS);\n        }\n    },\n\n    /**\n     * Handler for when \"Add a new condition\" is clicked.\n     *\n     * This adds a new condition to the model, which will in turn render the\n     * new row to the list.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event.\n     */\n    _onAddRowClicked(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.model.addNewCondition();\n    },\n\n    /**\n     * Handler for when the condition mode changes.\n     *\n     * If the current mode is \"Always\", hide the conditions list.\n     */\n    _onConditionModeChanged() {\n        const mode = this._$mode.filter(':checked').val();\n\n        this._$rowsContainer.toggle(mode !== 'always');\n    },\n});\n\n\n})();\n"],"mappings":"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"}