import type { ControlElement, UISchemaElement } from '@jsonforms/core/lib/models';
import type { JsonFormsState } from '@jsonforms/core/lib/store';
import type { JsonFormsUISchemaRegistryEntry } from '@jsonforms/core/lib/reducers/uischemas';
import type { JsonSchema } from '@jsonforms/core/lib/models/jsonSchema';
import type { ErrorTranslator, Translator } from '@jsonforms/core/lib/i18n';
export declare const jsonFormsReducerConfig: {
    core: import("@jsonforms/core").Reducer<import("@jsonforms/core/lib/reducers/core").JsonFormsCore, import("@jsonforms/core").CoreActions>;
    renderers: import("@jsonforms/core").Reducer<import("@jsonforms/core/lib/reducers/renderers").JsonFormsRendererRegistryEntry[], import("@jsonforms/core").AddRendererAction | import("@jsonforms/core").RemoveRendererAction>;
    cells: import("@jsonforms/core").Reducer<import("@jsonforms/core/lib/reducers/cells").JsonFormsCellRendererRegistryState, import("@jsonforms/core").AddCellRendererAction | import("@jsonforms/core").RemoveCellRendererAction>;
    config: import("@jsonforms/core").Reducer<any, import("@jsonforms/core").SetConfigAction>;
    uischemas: import("@jsonforms/core").Reducer<JsonFormsUISchemaRegistryEntry[], import("@jsonforms/core").UISchemaActions>;
    defaultData: import("@jsonforms/core").Reducer<import("@jsonforms/core/lib/reducers/default-data").JsonFormsDefaultDataRegistryEntry[], import("@jsonforms/core").RegisterDefaultDataAction | import("@jsonforms/core").UnregisterDefaultDataAction>;
    i18n: import("@jsonforms/core").Reducer<import("@jsonforms/core/lib/i18n").JsonFormsI18nState, import("@jsonforms/core").I18nActions>;
};
/**
 * Finds a registered UI schema to use, if any.
 * @param schema the JSON schema describing the data to be rendered
 * @param schemaPath the according schema path
 * @param path the instance path
 * @param fallback the type of the layout to use or a UI-schema-generator function
 * @param control may be checked for embedded inline uischema options
 */
export declare const findUISchema: (uischemas: JsonFormsUISchemaRegistryEntry[], schema: JsonSchema, schemaPath: string, path: string, fallback?: string | (() => UISchemaElement), control?: ControlElement, rootSchema?: JsonSchema) => UISchemaElement;
export declare const getErrorAt: (instancePath: string, schema: JsonSchema) => (state: JsonFormsState) => import("ajv").ErrorObject<string, Record<string, any>, unknown>[];
export declare const getSubErrorsAt: (instancePath: string, schema: JsonSchema) => (state: JsonFormsState) => import("ajv").ErrorObject<string, Record<string, any>, unknown>[];
export declare const getConfig: (state: JsonFormsState) => any;
export declare const getLocale: (state: JsonFormsState) => string;
export declare const getTranslator: () => (state: JsonFormsState) => Translator;
export declare const getErrorTranslator: () => (state: JsonFormsState) => ErrorTranslator;
