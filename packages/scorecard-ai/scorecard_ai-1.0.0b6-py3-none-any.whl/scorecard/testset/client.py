# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.custom_schema import CustomSchema
from ..types.http_validation_error import HttpValidationError
from ..types.not_found_error_body import NotFoundErrorBody
from ..types.paginated_testcase_response import PaginatedTestcaseResponse
from ..types.testset import Testset
from ..types.unauthenticated_error import UnauthenticatedError
from ..types.unauthorized_error_body import UnauthorizedErrorBody

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestsetClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Testset:
        """
        Retrieve Testset metadata without Testcase data

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.get(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testset, construct_type(type_=Testset, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Testset:
        """
        Delete a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.delete(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testset, construct_type(type_=Testset, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        using_retrieval: typing.Optional[bool] = OMIT,
        custom_schema: typing.Optional[CustomSchema] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testset:
        """
        Create a new Testset

        Parameters
        ----------
        name : str

        description : typing.Optional[str]
            A description for the testset.

        using_retrieval : typing.Optional[bool]
            Whether or not the testset uses retrieval.

        custom_schema : typing.Optional[CustomSchema]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.create(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/testset",
            method="POST",
            json={
                "name": name,
                "description": description,
                "using_retrieval": using_retrieval,
                "custom_schema": custom_schema,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testset, construct_type(type_=Testset, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_schema(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> CustomSchema:
        """
        Read the schema of a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to retrieve the schema from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomSchema
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.read_schema(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/schema", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(CustomSchema, construct_type(type_=CustomSchema, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_testcases(
        self,
        testset_id: int,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedTestcaseResponse:
        """
        Retrieve all Testcases from a Testset

        Parameters
        ----------
        testset_id : int
            The Testset ID to retrieve testcases from.

        offset : typing.Optional[int]
            The offset to start from.

        limit : typing.Optional[int]
            The number of testcases to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedTestcaseResponse
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.get_testcases(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase",
            method="GET",
            params={"offset": offset, "limit": limit},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(PaginatedTestcaseResponse, construct_type(type_=PaginatedTestcaseResponse, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestsetClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Testset:
        """
        Retrieve Testset metadata without Testcase data

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testset.get(
            testset_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testset, construct_type(type_=Testset, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Testset:
        """
        Delete a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testset.delete(
            testset_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testset, construct_type(type_=Testset, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        using_retrieval: typing.Optional[bool] = OMIT,
        custom_schema: typing.Optional[CustomSchema] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testset:
        """
        Create a new Testset

        Parameters
        ----------
        name : str

        description : typing.Optional[str]
            A description for the testset.

        using_retrieval : typing.Optional[bool]
            Whether or not the testset uses retrieval.

        custom_schema : typing.Optional[CustomSchema]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testset.create(
            name="name",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/testset",
            method="POST",
            json={
                "name": name,
                "description": description,
                "using_retrieval": using_retrieval,
                "custom_schema": custom_schema,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testset, construct_type(type_=Testset, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_schema(
        self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CustomSchema:
        """
        Read the schema of a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to retrieve the schema from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomSchema
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testset.read_schema(
            testset_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/schema", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(CustomSchema, construct_type(type_=CustomSchema, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_testcases(
        self,
        testset_id: int,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedTestcaseResponse:
        """
        Retrieve all Testcases from a Testset

        Parameters
        ----------
        testset_id : int
            The Testset ID to retrieve testcases from.

        offset : typing.Optional[int]
            The offset to start from.

        limit : typing.Optional[int]
            The number of testcases to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedTestcaseResponse
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testset.get_testcases(
            testset_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase",
            method="GET",
            params={"offset": offset, "limit": limit},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(PaginatedTestcaseResponse, construct_type(type_=PaginatedTestcaseResponse, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
