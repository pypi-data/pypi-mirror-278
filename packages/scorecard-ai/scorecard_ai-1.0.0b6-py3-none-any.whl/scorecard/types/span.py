# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel


class Span(UncheckedBaseModel):
    children: typing.List[Span] = pydantic_v1.Field(alias="Children")
    timestamp: dt.datetime = pydantic_v1.Field(alias="Timestamp")
    trace_id: str = pydantic_v1.Field(alias="TraceId")
    span_id: str = pydantic_v1.Field(alias="SpanId")
    parent_span_id: str = pydantic_v1.Field(alias="ParentSpanId")
    trace_state: str = pydantic_v1.Field(alias="TraceState")
    span_name: str = pydantic_v1.Field(alias="SpanName")
    span_kind: str = pydantic_v1.Field(alias="SpanKind")
    service_name: str = pydantic_v1.Field(alias="ServiceName")
    resource_attributes: typing.Dict[str, str] = pydantic_v1.Field(alias="ResourceAttributes")
    scope_name: str = pydantic_v1.Field(alias="ScopeName")
    scope_version: str = pydantic_v1.Field(alias="ScopeVersion")
    span_attributes: typing.Dict[str, str] = pydantic_v1.Field(alias="SpanAttributes")
    duration: int = pydantic_v1.Field(alias="Duration")
    status_code: str = pydantic_v1.Field(alias="StatusCode")
    status_message: str = pydantic_v1.Field(alias="StatusMessage")
    events_timestamp: typing.List[dt.datetime] = pydantic_v1.Field(alias="Events.Timestamp")
    events_name: typing.List[str] = pydantic_v1.Field(alias="Events.Name")
    events_attributes: typing.List[typing.Dict[str, str]] = pydantic_v1.Field(alias="Events.Attributes")
    links_trace_id: typing.List[str] = pydantic_v1.Field(alias="Links.TraceId")
    links_span_id: typing.List[str] = pydantic_v1.Field(alias="Links.SpanId")
    links_trace_state: typing.List[str] = pydantic_v1.Field(alias="Links.TraceState")
    links_attributes: typing.List[typing.Dict[str, str]] = pydantic_v1.Field(alias="Links.Attributes")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


Span.update_forward_refs()
