# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel


class Run(UncheckedBaseModel):
    id: typing.Optional[int] = None
    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The creation date and time of the run.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The last time the run was updated.
    """

    execution_start_time: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The start time of the run.
    """

    execution_end_time: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The end time of the run.
    """

    testset_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The testset that was executed in this run.
    """

    status: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The current status of the run.
    """

    limit_testcases: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The maximum number of testcases to run.
    """

    source: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    How the run was created.
    """

    model_params: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    The model parameters used when generating the run.
    """

    notes: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Notes about the run.
    """

    scoring_config_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ID of the scoring configuration the run uses.
    """

    prompt_template: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The prompt template to be used while executing the run.
    """

    scoring_start_time: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The start time of scoring the run's results.
    """

    scoring_end_time: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The end time of scoring the run's results.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
