# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .custom_schema import CustomSchema


class Testset(UncheckedBaseModel):
    id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ID of the testset.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The creation date and time of the testset.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A human-readable name for the testset. This will be displayed in the UI.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A description for the testset.
    """

    using_retrieval: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether or not the testset uses retrieval.
    """

    ingestion_method: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The method used to ingest the testset.
    """

    num_testcases: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The number of testcases in the testset.
    """

    published: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether or not the testset is published.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The last time the testset was updated.
    """

    is_archived: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether or not the testset is archived.
    """

    project_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ID of the project the testset belongs to.
    """

    custom_schema: typing.Optional[CustomSchema] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
