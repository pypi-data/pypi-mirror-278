# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .testrecord_custom_inputs_value import TestrecordCustomInputsValue
from .testrecord_custom_labels_value import TestrecordCustomLabelsValue
from .testrecord_custom_outputs_value import TestrecordCustomOutputsValue
from .testrecord_model_debug_info_value import TestrecordModelDebugInfoValue
from .testrecord_model_params_value import TestrecordModelParamsValue


class Testrecord(UncheckedBaseModel):
    id: typing.Optional[int] = None
    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The creation date and time of the testrecord.
    """

    run_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ID of the run the testrecord belongs to.
    """

    testset_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ID of the testset the testrecord belongs to.
    """

    testcase_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ID of the testcase the testrecord belongs to.
    """

    user_query: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The user query for the testrecord.
    """

    context: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The context for the testrecord.
    """

    model_response: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The actual response of the model for the testrecord.
    """

    ideal: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The ideal response for the testrecord.
    """

    custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestrecordCustomInputsValue]]] = None
    custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestrecordCustomLabelsValue]]] = None
    custom_outputs: typing.Optional[typing.Dict[str, typing.Optional[TestrecordCustomOutputsValue]]] = None
    status: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The current status of the testrecord.
    """

    prompt: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The prompt used to generate the testrecord.
    """

    model_params: typing.Optional[typing.Dict[str, typing.Optional[TestrecordModelParamsValue]]] = pydantic_v1.Field(
        default=None
    )
    """
    The model parameters used when generating the testrecord.
    """

    model_debug_info: typing.Optional[
        typing.Dict[str, typing.Optional[TestrecordModelDebugInfoValue]]
    ] = pydantic_v1.Field(default=None)
    """
    Debug information produced during the testrecord's generation.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
