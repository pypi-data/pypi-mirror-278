# coding: utf-8

"""
    XI Sdk Resellers

    For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AsyncOrderCreateDTOShipToInfo(BaseModel):
    """
    The shipping information provided by the reseller for order delivery.
    """ # noqa: E501
    address_id: Optional[StrictStr] = Field(default=None, description="The company contact provided by the reseller.", alias="addressId")
    contact: Optional[StrictStr] = Field(default=None, description="The contact name for the order will be shipped to.")
    company_name: Optional[StrictStr] = Field(default=None, description="The name of the company the order will be shipped to.", alias="companyName")
    address_line1: Optional[StrictStr] = Field(default=None, description="The address line 1 the order will be shipped to.", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="The address line 2 the order will be shipped to.", alias="addressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, description="The address line 3 the order will be shipped to.", alias="addressLine3")
    address_line4: Optional[StrictStr] = Field(default=None, description="The address line 4 the order will be shipped to.", alias="addressLine4")
    name1: Optional[StrictStr] = Field(default=None, description="Need description")
    name2: Optional[StrictStr] = Field(default=None, description="Need description")
    city: Optional[StrictStr] = Field(default=None, description="The city the order will be shipped to.")
    state: Optional[StrictStr] = Field(default=None, description="The state the order will be shipped to.")
    postal_code: Optional[StrictStr] = Field(default=None, description="The zip or postal code the order will be shipped to.", alias="postalCode")
    country_code: Optional[StrictStr] = Field(default=None, description="The two-character ISO country code the order will be shipped to.", alias="countryCode")
    email: Optional[StrictStr] = Field(default=None, description="The company contact email address.")
    shipping_notes: Optional[StrictStr] = Field(default=None, description="Shipping Notes", alias="shippingNotes")
    phone_number: Optional[StrictStr] = Field(default=None, description="Phone number for shipping", alias="phoneNumber")
    __properties: ClassVar[List[str]] = ["addressId", "contact", "companyName", "addressLine1", "addressLine2", "addressLine3", "addressLine4", "name1", "name2", "city", "state", "postalCode", "countryCode", "email", "shippingNotes", "phoneNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsyncOrderCreateDTOShipToInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address_line3 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line3 is None and "address_line3" in self.model_fields_set:
            _dict['addressLine3'] = None

        # set to None if address_line4 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line4 is None and "address_line4" in self.model_fields_set:
            _dict['addressLine4'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsyncOrderCreateDTOShipToInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressId": obj.get("addressId"),
            "contact": obj.get("contact"),
            "companyName": obj.get("companyName"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "addressLine4": obj.get("addressLine4"),
            "name1": obj.get("name1"),
            "name2": obj.get("name2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postalCode": obj.get("postalCode"),
            "countryCode": obj.get("countryCode"),
            "email": obj.get("email"),
            "shippingNotes": obj.get("shippingNotes"),
            "phoneNumber": obj.get("phoneNumber")
        })
        return _obj


