# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol import BasicResponse_pb2 as openobd__protocol_dot_BasicResponse__pb2
from openobd_protocol.ConnectionMonitor import ConnectionInformation_pb2 as openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2


class ConnectionMonitorServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getConnectorInformation = channel.unary_unary(
                '/com.jifeline.OpenOBD.Protocol.ConnectionMonitor.ConnectionMonitorServices/getConnectorInformation',
                request_serializer=openobd__protocol_dot_BasicResponse__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2.ConnectorInformation.FromString,
                )
        self.streamConnectorInformation = channel.unary_stream(
                '/com.jifeline.OpenOBD.Protocol.ConnectionMonitor.ConnectionMonitorServices/streamConnectorInformation',
                request_serializer=openobd__protocol_dot_BasicResponse__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2.ConnectorInformation.FromString,
                )


class ConnectionMonitorServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getConnectorInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamConnectorInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionMonitorServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getConnectorInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.getConnectorInformation,
                    request_deserializer=openobd__protocol_dot_BasicResponse__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2.ConnectorInformation.SerializeToString,
            ),
            'streamConnectorInformation': grpc.unary_stream_rpc_method_handler(
                    servicer.streamConnectorInformation,
                    request_deserializer=openobd__protocol_dot_BasicResponse__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2.ConnectorInformation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.jifeline.OpenOBD.Protocol.ConnectionMonitor.ConnectionMonitorServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectionMonitorServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getConnectorInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.jifeline.OpenOBD.Protocol.ConnectionMonitor.ConnectionMonitorServices/getConnectorInformation',
            openobd__protocol_dot_BasicResponse__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2.ConnectorInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamConnectorInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.jifeline.OpenOBD.Protocol.ConnectionMonitor.ConnectionMonitorServices/streamConnectorInformation',
            openobd__protocol_dot_BasicResponse__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_ConnectionMonitor_dot_ConnectionInformation__pb2.ConnectorInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
