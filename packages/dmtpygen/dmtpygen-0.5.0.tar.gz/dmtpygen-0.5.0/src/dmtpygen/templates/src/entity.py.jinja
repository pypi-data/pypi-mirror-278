# This an autogenerated file
# {{ description }}
# Generated with {{ type }}
{%- if has_self_reference or has_cross_references %}
from __future__ import annotations
{%- endif %}
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.{{ filename }} import {{ blueprint_type }}
{%- if needs_numpy %}
from numpy import ndarray,asarray
{%- else %}
from typing import Dict
{%- endif %}
{%- for imp in imports %}
{{imp}}
{%- endfor %}
{%- if has_cross_references %}
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    {%- for cref in cross_references %}
    from {{cref.module}} import {{cref.name}}
    {%- endfor %}
{%- endif %}

class {{ type }}({{super_classes}}):
    """
{%-if description %}
    {{description}}
{%-endif %}
    Keyword arguments
    -----------------
    {%-for field in fields %}
    {{ field.name }} : {{ field.get("type_description",field.get("type")) }}
{%-if field.description or "default" in field %}
         {{ field.description | escape_string }} {%- if "default" in field %}(default {{ field["default"] }}){%- endif %}
{%-endif %}
    {%-endfor %}
    """

    def __init__(self {{ arguments }}, **kwargs):
        super().__init__(**kwargs)
        {%- for field in fields %}
        self.{{ field.name }} = {{ field.init }}
        {%- endfor %}
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return {{ blueprint_type }}()

{% for field in fields %}
    @property
    def {{ field.name }}(self) -> {{ field.type }}:
        """{{field.description}}"""
        return self.__{{ field.name }}
    {%- if not field.readonly %}

    @{{ field.name }}.setter
    def {{ field.name }}(self, value: {{ field.type }}):
        """Set {{field.name}}"""
        {%- if field.is_array %}
            {%- if field.is_entity %}
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__{{ field.name }} = value
            {%- else %}
        array = asarray(value, dtype={{ field.ftype }})
        if len(array) > 0 and array.ndim != {{ field.ndim }}:
            raise ValueError("Expected array with {{ field.ndim }} dimensions")
        self.__{{ field.name }} = array
            {%- endif %}
        {%- else %}
        self.__{{ field.name }} = {{ field.setter }}
        {%- endif %}
    {%- endif %}
{% endfor %}
