import{_ as f,a as N}from"../../../js/StoreList-Bw6KvXpM.js";import{d as y,cM as h,cI as _,cN as g,cJ as S,cK as P,o as b,n as w,w as t,a as e,N as s,z as l,L as V,e as o,cs as B,f as n,B as i,Q as k,g as v,i as a,ct as x,cu as C,cv as D,M as E,J as j,s as r}from"../../../js/index-DTm3q99n.js";import"../../../js/ImportDialog-iFDBHaKe.js";const M=""+new URL("../../../img/pynn-logo-DcOGhNXp.png",import.meta.url).href,I=r("p",null," PyNN (pronounced 'pine') is a simulator-independent language for building spiking neuronal network models. A PyNN script runs without modification on any simulator or neuromorphic hardware platform that PyNN supports (currently NEURON, NEST, PCSIM, MOOSE, Brian, the BrainScaleS platform and the SpiNNaker platform). ",-1),L=r("p",null," PyNN provides a library of standard neuron, synapse and synaptic plasticity models, which have been verified to work the same on the different supported simulators. PyNN also provides a set of commonly-used connectivity algorithms (e.g. all-to-all, random, distance-dependent, small-world) but makes it easy to provide your own connectivity in a simulator-independent way. ",-1),T=r("p",null," Even if you don't wish to run simulations on multiple simulators, you may benefit from writing your simulation code using PyNN's powerful, high-level interface. In this case, you can use any neuron or synapse model supported by your simulator, and are not restricted to the standard models. ",-1),z=y({__name:"Home",setup(O){const d=h(),u=_(),m=g(),c=S(),p=P();return(R,A)=>(b(),w(j,null,{default:t(()=>[e(E,null,{default:t(()=>[e(s,{md:"6"},{default:t(()=>[e(l,null,{default:t(()=>[e(V,{src:o(M),alt:"pynn-logo",class:"ma-2 mx-10","max-height":"400"},null,8,["src"]),e(B,null,{default:t(()=>[n(" An integration layer for neural simulation ")]),_:1}),e(i,null,{default:t(()=>[I,L,T]),_:1})]),_:1}),e(l,{class:"mt-2"},{default:t(()=>[e(k,null,{default:t(()=>[n("References")]),_:1}),e(i,null,{default:t(()=>[e(v,null,{default:t(()=>[e(a,{"append-icon":"mdi:mdi-open-in-new",href:"http://neuralensemble.org/PyNN/","prepend-icon":"mdi:mdi-home",target:"_blank"},{default:t(()=>[n(" http://neuralensemble.org/PyNN/ ")]),_:1}),e(a,{"append-icon":"mdi:mdi-open-in-new",href:"https://github.com/NeuralEnsemble/PyNN/","prepend-icon":"mdi:mdi-github",target:"_blank"},{default:t(()=>[n(" https://github.com/NeuralEnsemble/PyNN/ ")]),_:1}),e(a,{"append-icon":"mdi:mdi-open-in-new",href:"http://neuralensemble.org/docs/PyNN/","prepend-icon":"mdi:mdi-book-open",target:"_blank"},{default:t(()=>[n(" http://neuralensemble.org/docs/PyNN/ ")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),e(s,{md:"6"},{default:t(()=>[e(x,{variant:"accordion"},{default:t(()=>[e(C,{title:"Backend settings"},{default:t(()=>[e(D,null,{default:t(()=>[e(f,{store:o(p)},null,8,["store"])]),_:1})]),_:1})]),_:1}),e(N,{modelDBStore:o(d),modelStore:o(u),projectStore:o(c),projectDBStore:o(m),simulator:"pynn"},null,8,["modelDBStore","modelStore","projectStore","projectDBStore"])]),_:1})]),_:1})]),_:1}))}});export{z as default};
