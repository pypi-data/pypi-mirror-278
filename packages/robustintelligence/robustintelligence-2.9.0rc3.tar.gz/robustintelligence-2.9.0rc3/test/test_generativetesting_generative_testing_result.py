# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.generativetesting_generative_testing_result import GenerativetestingGenerativeTestingResult

class TestGenerativetestingGenerativeTestingResult(unittest.TestCase):
    """GenerativetestingGenerativeTestingResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenerativetestingGenerativeTestingResult:
        """Test GenerativetestingGenerativeTestingResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenerativetestingGenerativeTestingResult`
        """
        model = GenerativetestingGenerativeTestingResult()
        if include_optional:
            return GenerativetestingGenerativeTestingResult(
                id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', ),
                job_id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', ),
                attack_technique = '',
                attack_objective = 'ATTACK_OBJECTIVE_UNSPECIFIED',
                objective_sub_category = 'OBJECTIVE_SUB_CATEGORY_UNSPECIFIED',
                failing_examples = [
                    ri.apiclient.models.generative_testing_result_example.GenerativeTestingResultExample(
                        attack_prompt = '', 
                        model_output = '', )
                    ],
                severity = 'SEVERITY_NONE',
                owasp_standards = [
                    ri.apiclient.models.container_for_an_ai_risk_standard_(e/g/_nist).Container for an AI risk standard (e.g. NIST)(
                        description = '', )
                    ],
                nist_standards = [
                    ri.apiclient.models.container_for_an_ai_risk_standard_(e/g/_nist).Container for an AI risk standard (e.g. NIST)(
                        description = '', )
                    ],
                mitre_standards = [
                    ri.apiclient.models.container_for_an_ai_risk_standard_(e/g/_nist).Container for an AI risk standard (e.g. NIST)(
                        description = '', )
                    ],
                attacks_attempted = 56,
                threat = 'THREAT_UNSPECIFIED',
                successful_attacks = 56
            )
        else:
            return GenerativetestingGenerativeTestingResult(
        )
        """

    def testGenerativetestingGenerativeTestingResult(self):
        """Test GenerativetestingGenerativeTestingResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()